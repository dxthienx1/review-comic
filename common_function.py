import json
import sys
import os
import re
import shutil
import random
from natsort import natsorted
from datetime import datetime, timedelta, timezone, time as dtime
from time import sleep, time
import threading
import traceback
import winreg
import requests
import yt_dlp
import portalocker
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium_stealth import stealth
import subprocess
import ffmpeg
import pickle
import platform
from tkinter import messagebox, filedialog
import customtkinter as ctk
import ctypes
from PIL import Image, ImageDraw, ImageGrab
import pystray
from pystray import MenuItem as item
import keyboard
import pyperclip
import whisper
import gc
from imageio import imwrite
from moviepy.editor import VideoFileClip, AudioFileClip, vfx
from pydub import AudioSegment
import math
from TTS.api import TTS
import csv
import queue
import torch
import cv2
import zipfile
import mouse
import pyautogui
import numpy as np
from itertools import groupby
from operator import itemgetter

print(f'torch_version: {torch.__version__}')  # Ki·ªÉm tra phi√™n b·∫£n PyTorch
print(f'cuda_version: {torch.version.cuda}')  # Ki·ªÉm tra phi√™n b·∫£n CUDA m√† PyTorch s·ª≠ d·ª•ng
print(f'is_cudnn_available: {torch.backends.cudnn.enabled}')  # Ki·ªÉm tra xem cuDNN c√≥ ƒë∆∞·ª£c k√≠ch ho·∫°t kh√¥ng
print(f'is_cuda_available: {torch.cuda.is_available()}')
print(f"S·ªë GPU kh·∫£ d·ª•ng: {torch.cuda.device_count()}")
for i in range(torch.cuda.device_count()):
    print(f"GPU {i}: {torch.cuda.get_device_name(i)}")
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f'device: {device}')

# def get_disk_serial():
#     c = wmi.WMI()
#     for disk in c.Win32_DiskDrive():
#         for partition in disk.associators("Win32_DiskDriveToDiskPartition"):
#             for logical_disk in partition.associators("Win32_LogicalDiskToPartition"):
#                 if logical_disk.DeviceID == "C:" or logical_disk.DeviceID == "c:":
#                     return disk.SerialNumber

def get_chrome_profile_folder():
    if platform.system() == "Windows":
        profile_folder = os.path.join(os.environ['LOCALAPPDATA'], "Google", "Chrome", "User Data")
    elif platform.system() == "Darwin":
        profile_folder = os.path.join(os.path.expanduser("~"), "Library", "Application Support", "Google", "Chrome")
    elif platform.system() == "Linux":
        profile_folder = os.path.join(os.path.expanduser("~"), ".config", "google-chrome")
    else:
        raise Exception("H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
    return profile_folder

is_dev_enviroment = True
def get_current_dir():
    """L·∫•y th∆∞ m·ª•c ƒëang ch·∫°y t·ªáp th·ª±c thi"""
    if getattr(sys, 'frozen', False):
        current_dir = os.path.dirname(sys.executable)
        is_dev_enviroment = False
    else:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        is_dev_enviroment = True
    return current_dir

current_dir = get_current_dir()
sys.path.append(current_dir)

chromedriver_path = os.path.join(current_dir, 'import\\chromedriver.exe')
config_path = os.path.join(current_dir, 'config.json')
config_xtts_path = os.path.join(current_dir, 'models', 'main', 'config.json')
last_config_xtts_path = os.path.join(current_dir, 'models', 'default_version', 'config.json')
ref_audio_folder = os.path.join(current_dir, 'models', 'ref_data')

icon_path = os.path.join(current_dir, 'import' , 'icon.png')
ico_path = os.path.join(current_dir, 'import' , 'icon.ico')

profile_folder = get_chrome_profile_folder()
if not profile_folder:
    print(f'Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ch·ª©a chrome profile')

padx = 5
pady = 2
height_element = 40
width_window = 500
user32 = ctypes.windll.user32
screen_width = user32.GetSystemMetrics(0)
screen_height = user32.GetSystemMetrics(1)
left = 0.3
right = 0.7
LEFT = 'left'
RIGHT = 'right'
CENTER = 'center'

max_lenth_text = 250
tot = "üü¢"
thanhcong = "‚úÖ"
comment_icon = "üí¨"
like_icon = "‚ù§Ô∏è"
thatbai = "‚ùå"
canhbao = "‚ö†Ô∏è"

def load_ffmpeg():
    def get_ffmpeg_dir():
        if getattr(sys, 'frozen', False):
            base_dir = os.path.dirname(sys.executable)
        else:
            base_dir = os.path.dirname(__file__)
        ffmpeg_dir = os.path.join(base_dir, "ffmpeg", "bin")
        return ffmpeg_dir
    def is_ffmpeg_available():
        try:
            subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
            return True
        except FileNotFoundError:
            return False
    if not is_ffmpeg_available():
        ffmpeg_dir = get_ffmpeg_dir()
        os.environ["PATH"] += os.pathsep + ffmpeg_dir
load_ffmpeg()

# def get_driver(show=True):
#     try:
#         service = Service(chromedriver_path)
#         options = webdriver.ChromeOptions()
#         if not show:
#             options.add_argument('--headless')
#             options.add_argument("--no-sandbox")
#             options.add_argument("--disable-dev-shm-usage")
#         options.add_argument('--disable-gpu')
#         options.add_argument('--disable-blink-features=AutomationControlled')
#         options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36")
#         options.add_argument("--log-level=3")
#         options.add_argument("--disable-logging")
#         options.add_experimental_option('excludeSwitches', ['enable-automation'])
#         options.add_experimental_option('useAutomationExtension', False)
#         driver = webdriver.Chrome(service=service, options=options)
#         driver.maximize_window()
#         stealth(driver,
#                 languages=["en-US", "en"],
#                 vendor="Google Inc.",
#                 platform="Win32",
#                 webgl_vendor="Intel Inc.",
#                 renderer="Intel Iris OpenGL Engine",
#                 fix_hairline=True
#                 )
#         sleep(1)
#         return driver
#     except:
#         getlog()
#         print("L·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o chromedriver.")
#         return None
USER_AGENTS_WINDOWS = {
    "United States": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "United Kingdom": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Canada": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Australia": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "France": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Germany": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Russia": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Japan": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "China": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Vietnam": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "India": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "South Korea": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Brazil": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Mexico": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Italy": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Spain": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Turkey": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Netherlands": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Indonesia": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Thailand": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Philippines": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Argentina": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "South Africa": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
    "Pakistan": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Egypt": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
    "Other": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
}

def get_browser_ip(driver):
    try:
        driver.get("https://checkip.amazonaws.com")
        sleep(random.uniform(2, 5))
        ip = driver.find_element("tag name", "body").text.strip()
        return ip
    except:
        return "Kh√¥ng x√°c ƒë·ªãnh" 

def create_chrome_proxy_extension(proxy_ip, proxy_port, username, password, extension_name='chrome_proxy'):
    pluginfile_folder = os.path.join(current_dir, extension_name)
    os.makedirs(pluginfile_folder, exist_ok=True)
    pluginfile = os.path.join(pluginfile_folder, f"{proxy_ip}_{proxy_port}.zip")
    if os.path.exists(pluginfile):
        return pluginfile
    
    manifest_json = f"""{{
        "version": "1.0.0",
        "manifest_version": 2,
        "name": "{extension_name}",
        "permissions": [
            "proxy",
            "tabs",
            "unlimitedStorage",
            "storage",
            "<all_urls>",
            "webRequest",
            "webRequestBlocking"
        ],
        "background": {{
            "scripts": ["background.js"]
        }},
        "minimum_chrome_version":"76.0.0"
    }}"""

    background_js = f"""
    var config = {{
        mode: "fixed_servers",
        rules: {{
            singleProxy: {{
                scheme: "http",
                host: "{proxy_ip}",
                port: parseInt({proxy_port})
            }},
            bypassList: []
        }}
    }};
    chrome.proxy.settings.set({{value: config, scope: "regular"}}, function() {{}});

    chrome.webRequest.onAuthRequired.addListener(
        function(details) {{
            return {{
                authCredentials: {{
                    username: "{username}",
                    password: "{password}"
                }}
            }};
        }},
        {{urls: ["<all_urls>"]}},
        ["blocking"]
    );
    """
    
    with zipfile.ZipFile(pluginfile, 'w') as zp:
        zp.writestr("manifest.json", manifest_json)
        zp.writestr("background.js", background_js)

    return pluginfile 

def get_proxy_info(proxy=None):
    proxy_ip = proxy_port = proxy_user = proxy_pass = proxy_country = None
    if proxy:
        proxy_info = proxy.split(":")
        if len(proxy_info) == 5:
            proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country = proxy_info
        if len(proxy_info) == 4:
            proxy_ip, proxy_port, proxy_user, proxy_pass = proxy_info
        if len(proxy_info) == 3:
            proxy_ip, proxy_port, proxy_country = proxy_info
        elif len(proxy_info) == 2:
            proxy_ip, proxy_port = proxy_info
    return proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country

def get_driver(show=True, proxy=None, mode="web", target_email=None):
    try:
        service = Service(chromedriver_path)
        options = webdriver.ChromeOptions()

        # Random h√≥a User-Agent ƒë·ªÉ tr√°nh b·ªã Google theo d√µi
        proxy_ip, proxy_port, proxy_user, proxy_pass, proxy_country = get_proxy_info(proxy)
        if not proxy_country or proxy_country not in USER_AGENTS_WINDOWS:
            proxy_country = "Other"
        if mode == "web":
            user_agent = USER_AGENTS_WINDOWS[proxy_country]
        else:
            user_agent = "Mozilla/5.0 (Linux; Android 11; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Mobile Safari/537.36"

        
        options.add_argument(f"--user-agent={user_agent}")

        if proxy_ip and proxy_port:
            if proxy_user and proxy_pass:
                pluginfile = create_chrome_proxy_extension(proxy_ip, proxy_port, proxy_user, proxy_pass)
                options.add_extension(pluginfile)
                # proxy_extension_path = create_proxy_extension_with_chrome_profile(proxy_ip, proxy_port, proxy_user, proxy_pass)
                # options.add_argument(f"--load-extension={proxy_extension_path}")
            else:
                proxy_url = f"http://{proxy_ip}:{proxy_port}"
                options.add_argument(f'--proxy-server={proxy_url}')

        # Ch·∫°y ·ªü ch·∫ø ƒë·ªô headless n·∫øu c·∫ßn
        if not show:
            options.add_argument('--headless=new')
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--force-device-scale-factor=1")
        # T·∫Øt t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument("--log-level=3")
        options.add_argument("--disable-logging")
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument("--disable-popup-blocking")
        options.add_argument("--disable-features=WebRTC")
        if mode == "mobi":
            mobile_emulation = {
                # "deviceMetrics": {"width": 360, "height": 740, "pixelRatio": 3.0},
                "userAgent": user_agent
            }
            options.add_experimental_option("mobileEmulation", mobile_emulation)
        # debugging_port = random.randint(9000, 9999) 
        # options.add_argument(f"--remote-debugging-port={debugging_port}")
        driver = webdriver.Chrome(service=service, options=options)
        # if mode == 'web':
        driver.set_window_size(screen_width - 200, screen_height - 50)
        # X√≥a d·∫•u hi·ªáu bot b·∫±ng JavaScript
        driver.execute_script("""
            Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
            Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
            Object.defineProperty(navigator, 'languages', { get: () => ['en-US', 'en'] });
            Object.defineProperty(navigator, 'hardwareConcurrency', { get: () => 4 });
        """)

        # Fake WebGL + Canvas (tr√°nh b·ªã nh·∫≠n di·ªán qua fingerprint)
        driver.execute_script("""
            WebGLRenderingContext.prototype.getParameter = function(parameter) {
                if (parameter === 37445) return 'Intel Open Source Technology Center';
                if (parameter === 37446) return 'Mesa DRI Intel(R) HD Graphics 620';
                return WebGLRenderingContext.prototype.getParameter(parameter);
            };
        """)

        try:
            stealth(driver,
                    languages=["en-US", "en"],
                    vendor="Google Inc.",
                    platform="Win32" if mode == "web" else "Linux",
                    webgl_vendor="Intel Inc.",
                    renderer="Intel Iris OpenGL Engine",
                    fix_hairline=True
                    )
        except ImportError:
            pass

        # Ki·ªÉm tra IP sau khi m·ªü tr√¨nh duy·ªát
        browser_ip = get_browser_ip(driver)
        if not browser_ip or (proxy_ip and proxy_ip != browser_ip):
            if target_email:
                print(f"‚ùå {target_email} ƒê·ªïi IP kh√¥ng th√†nh c√¥ng!")
            driver.quit()
            return None
        else:
            if target_email:
                print(f"{tot} {target_email} IP ƒëang d√πng: {browser_ip}")
        # if mode == 'web':
        driver.execute_script("window.open('');")
        driver.switch_to.window(driver.window_handles[-1])
        if len(driver.window_handles) > 1:
            driver.switch_to.window(driver.window_handles[0])  
            driver.close()
        # Chuy·ªÉn l·∫°i sang tab m·ªõi
        driver.switch_to.window(driver.window_handles[-1])
        sleep_random(1,2)
        return driver
    except Exception as e:
        getlog()
        return None


def get_driver_with_profile(target_gmail='default', show=True):
    try:
        os.system("taskkill /F /IM chrome.exe /T >nul 2>&1")
    except:
        pass
    sleep(1)
    def get_profile_name_by_gmail():
        def check_gmail_in_profile(profile_path):
            preferences_file = os.path.join(profile_path, "Preferences")
            
            if os.path.exists(preferences_file):
                with open(preferences_file, 'r', encoding='utf-8') as f:
                    try:
                        preferences = json.load(f)
                        if 'profile' in preferences:
                            for account in preferences['account_info']:
                                if 'email' in account and account['email'] == target_gmail:
                                    return True
                    except json.JSONDecodeError:
                        print(f"Kh√¥ng th·ªÉ ƒë·ªçc file Preferences trong profile {profile_path}.")
            return False
        
        profiles = [name for name in os.listdir(profile_folder) if os.path.isdir(os.path.join(profile_folder, name)) and name.startswith("Profile")]
        if "Default" in os.listdir(profile_folder):
            profiles.append("Default")

        for profile_name in profiles:
            profile_path = os.path.join(profile_folder, profile_name)
            if os.path.exists(profile_path):
                if check_gmail_in_profile(profile_path):
                    return profile_name
        return None
    
    if target_gmail == 'default':
        profile_name = "Default"
    else:
        profile_name = get_profile_name_by_gmail()
    if profile_name:
        options = webdriver.ChromeOptions()
        options.add_argument(f"user-data-dir={profile_folder}")
        options.add_argument(f"profile-directory={profile_name}")
        if not show:
            options.add_argument("--headless")
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument("--log-level=3")
        options.add_argument("--disable-logging")
        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)
        driver = webdriver.Chrome(options=options)
        # driver.set_window_size(screen_width - 100, screen_height - 50)
        try:
            driver.maximize_window()
        except:
            pass
        return driver
    else:
        print(f'Kh√¥ng t√¨m th·∫•y profile cho t√†i kho·∫£n google {target_gmail}')
        return None

def scroll_into_view(driver, element):
    driver.execute_script("arguments[0].scrollIntoView(true);", element)
    sleep(0.2)
    
def get_element_by_text(driver, text, tag_name='*', timeout=10, multiple=False, not_contain_attribute=None):
    try:
        xpath = f'//{tag_name}[contains(text(), "{text}")]'
        if not_contain_attribute:
            xpath = f'//{tag_name}[contains(text(), "{text}") and not(@{not_contain_attribute})]'
        if multiple:
            elements = WebDriverWait(driver, timeout).until(
                EC.presence_of_all_elements_located((By.XPATH, xpath))
            )
            return elements
        else:
            element = WebDriverWait(driver, timeout).until(
                EC.presence_of_element_located((By.XPATH, xpath))
            )
            return element
    except Exception as e:
        getlog()
        return None

def get_element_by_xpath(driver, xpath, key=None, index=0, multiple=False, timeout=10):
    try:
        if multiple:
            WebDriverWait(driver, timeout).until(
                EC.presence_of_all_elements_located((By.XPATH, xpath))
            )
            return driver.find_elements(By.XPATH, xpath)

        WebDriverWait(driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
        elements = driver.find_elements(By.XPATH, xpath)
        if key:
            key = key.lower()
            for ele in elements:
                if key in ele.accessible_name.lower() or key in ele.text.lower() or key in ele.tag_name.lower() or key in ele.aria_role.lower():
                    return ele
            return None
        if len(elements) > 0:
            return elements[index] 
    except:
        return None

def get_xpath(maintag, class_name=None, attribute=None, attribute_value=None, contain=False):
    if contain:
        if class_name:
            class_list = class_name.split()
            class_condition = " and ".join([f"contains(@class, '{cls}')" for cls in class_list])
        if attribute and attribute_value:
            xpath = f"//{maintag}[{class_condition} and @{attribute}=\"{attribute_value}\"]"
        else:
            xpath = f"//{maintag}[{class_condition}]"
    else:
        if attribute and attribute_value:
            xpath = f"//{maintag}[@class=\"{class_name}\" and @{attribute}=\"{attribute_value}\"]"
        else:
            xpath = f"//{maintag}[@class=\"{class_name}\"]"
    return xpath

def get_xpath_by_multi_attribute(maintag, attributes): #attributes = ['name="postSchedule"', ...]
    if len(attributes) > 1:
        attribute = " and @".join(attributes)
    else:
        attribute = attributes[0]
    attribute = f"@{attribute}"
    xpath = f"//{maintag}[{attribute}]"
    return xpath

def find_parent_element(element, level=1, tag_name=None, attribute=None, value=None):
    xpath = f"./ancestor::*[{level}]"
    if tag_name:
        xpath = f"./ancestor::{tag_name}[{level}]"
    if attribute and value:
        xpath += f"[contains(@{attribute}, '{value}')]"
    try:
        parent_element = get_element_by_xpath(element, xpath)
        return parent_element
    except:
        getlog()
        return None 
    
def find_child_element(element, level=1, tag_name=None, attribute=None, value=None):
    xpath = f"./descendant::*[{level}]"
    if tag_name:
        xpath = f"./descendant::{tag_name}[{level}]"
    if attribute and value:
        xpath += f"[contains(@{attribute}, '{value}')]"
    try:
        child_element = get_element_by_xpath(element, xpath)
        return child_element
    except:
        getlog()
        return None

def is_date_greater_than_current_day(date_str, day_delta=0):
    try:
        input_date = datetime.strptime(date_str, '%Y-%m-%d').date()
    except ValueError:
        print(f"ƒê·ªãnh d·∫°ng ng√†y {date_str} kh√¥ng h·ª£p l·ªá ...")
        return False
    current_date = datetime.now().date()
    target_date = current_date + timedelta(days=day_delta)
    return input_date > target_date

def is_format_date_yyyymmdd(date_str, daydelta=None):
    date_pattern = re.compile(r"^\d{4}-\d{2}-\d{2}$")
    if not date_pattern.match(date_str):
        return False, "ƒê·ªãnh d·∫°ng ng√†y ph·∫£i l√† yyyy-mm-dd"
    if daydelta:
        try:
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        except ValueError:
            return False, "ƒê·ªãnh d·∫°ng ng√†y ph·∫£i l√† yyyy-mm-dd"
        current_date = datetime.now()
        if date_obj > current_date + timedelta(days=daydelta-1):
            return False, f"Date is more than {daydelta} days in the future"
    return True, "Valid date"

def convert_datetime_to_string(date):
    try:
        return date.strftime('%Y-%m-%d')
    except ValueError:
        print(f"ng√†y {date} kh√¥ng h·ª£p l·ªá")
        return None
    
def convert_date_string_to_datetime(date_str):
    if not date_str:
        print("Ng√†y ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.")
        return None
    date_str = date_str.strip()
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').date()
    except:
        print(f"ƒê·ªãnh d·∫°ng ng√†y {date_str} ph·∫£i l√† yyyy-mm-dd")
        return None
    
def add_date_into_string(date_str, day_gap):
    date  = convert_date_string_to_datetime(date_str)
    if date:
        date += timedelta(days=day_gap)
        return date.strftime("%Y-%m-%d")
    return None

def convert_time_to_seconds(time_str):
    try:
        list_time = time_str.split(':')
        cnt = len(list_time)
        if cnt == 3:
            return float(list_time[0]) * 3600 + float(list_time[1]) * 60 + float(list_time[2])
        elif cnt == 2:
            return float(list_time[0]) * 60 + float(list_time[1])
        elif cnt == 1:
            return float(list_time[0])
        else:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá")
            return None
    except:
        print("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá")
        return None

def set_autostart():
    try:
        # L·∫•y ƒë∆∞·ªùng d·∫´n t·ªõi file app.py
        script_path = os.path.abspath(sys.argv[0])
        key = winreg.HKEY_CURRENT_USER
        key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        key_path = "VocabularyReminder"
        with winreg.OpenKey(
            key, key_value, 0, winreg.KEY_SET_VALUE
        ) as registry_key:
            winreg.SetValueEx(registry_key, key_path, 0, winreg.REG_SZ, script_path)
    except Exception as e:
        print(f"Could not set autostart: {e}")
# H√†m ƒë·ªÉ x√≥a ·ª©ng d·ª•ng kh·ªèi danh s√°ch kh·ªüi ƒë·ªông c√πng Windows
def unset_autostart():
    try:
        key = winreg.HKEY_CURRENT_USER
        key_value = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        key_path = "VocabularyReminder"
        with winreg.OpenKey(
            key, key_value, 0, winreg.KEY_SET_VALUE
        ) as registry_key:
            winreg.DeleteValue(registry_key, key_path)
    except FileNotFoundError:
        pass
    except Exception as e:
        print(f"Could not unset autostart: {e}")

def remove_file(file_path):
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
    except:
        pass

def get_json_data(file_path="", readline=True):
    if not os.path.exists(file_path):
        print(f"L·ªói: File {file_path} kh√¥ng t·ªìn t·∫°i.")
        return None
    try:
        p = None
        mode = "rb" if file_path.endswith(".pkl") else "r"
        encoding = None if file_path.endswith(".pkl") else "utf-8"
        with open(file_path, mode, encoding=encoding) as file:
            portalocker.lock(file, portalocker.LOCK_SH)
            if file_path.endswith('.json'):
                p = json.load(file)
            elif file_path.endswith('.pkl'):
                p = pickle.load(file)
            elif file_path.endswith('.txt'):
                p = file.readlines() if readline else file.read()
        return p
    except Exception as e:
        getlog()
        return None

def save_to_json_file(data, file_path):
    try:
        if file_path.endswith('.json'):
            with open(file_path, "w", encoding="utf-8") as file:
                portalocker.lock(file, portalocker.LOCK_EX)
                json.dump(data, file, indent=3)

        elif file_path.endswith('.pkl'):
            with open(file_path, "wb") as file:
                portalocker.lock(file, portalocker.LOCK_EX)
                pickle.dump(data, file)

        elif file_path.endswith('.txt'):
            with open(file_path, "w", encoding="utf-8") as file:
                portalocker.lock(file, portalocker.LOCK_EX)
                file.write(f"{data}\n")
    except:
        getlog()


def getlog(lock=None):
    try:
        print(traceback.print_exc())
        if lock:
            lock["log"].acquire()
            with open("log.txt", "a", encoding='utf-8') as logf:
                logf.write(str(datetime.now()))
                traceback.print_exc(file=logf)
            lock["log"].release()
        else:
            with open("log.txt", "a", encoding='utf-8') as logf:
                logf.write(str(datetime.now()))
                traceback.print_exc(file=logf)
    except:
        pass

def get_float_data(float_string):
    try:
        value = float(float_string)
        return value
    except:
        return None

def check_folder(folder, is_create=False, noti=True):
    try:
        if not os.path.exists(folder):
            if is_create:
                os.makedirs(folder, exist_ok=True)
            else:
                if noti:
                    print(f'Th∆∞ m·ª•c {folder} kh√¥ng t·ªìn t·∫°i.')
                return False
        return True
    except:
        if noti:
            print(f'{folder} kh√¥ng ph·∫£i l√† ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c h·ª£p l·ªá !!!')
        return False
    
def get_output_folder(input_video_path, output_folder_name='output_folder'):
    folder_input, file_name = get_current_folder_and_basename(input_video_path)
    output_folder = f'{folder_input}/{output_folder_name}'
    os.makedirs(output_folder, exist_ok=True)
    return output_folder, file_name

def get_current_folder_and_basename(input_video_path):
    folder_input = os.path.dirname(input_video_path)
    file_name = os.path.basename(input_video_path)
    return folder_input, file_name #file_name bao g·ªìm ph·∫ßn m·ªü r·ªông

def download_video_by_bravedown(video_urls, download_folder=None, root_web="https://bravedown.com/ixigua-video-downloader"):
    try:
        driver = get_driver(show=True)
        def choose_downlaod_folder():
            if download_folder:
                driver.get("chrome://settings/downloads")
                pyperclip.copy(download_folder)
                sleep(1)
                press_TAB_key(driver, 2)
                sleep(0.5)
                press_SPACE_key(driver, 1)
                sleep(0.5)
                press_key_on_window('tab', 4)
                press_key_on_window('space', 1)
                keyboard.send('ctrl+v')
                press_key_on_window('enter', 4)
                sleep(1)
            sleep(1)
        choose_downlaod_folder()
        def verify_human(video_url):
            ele = get_element_by_text(driver, "Please verify you are human!")
            if ele:
                sleep(3)
                press_TAB_key(driver)
                press_SPACE_key(driver)
                sleep(3)
                input_url(video_url)
        def input_url(video_url):
            xpath = get_xpath_by_multi_attribute('input', ['id="input"'])
            ele = get_element_by_xpath(driver, xpath)
            ele.clear()
            ele.send_keys(video_url)
            sleep(1)
            press_ENTER_key(driver, 1)
            sleep(2)
 
        def get_max_resolution_video():
            try:
                xpath = get_xpath('i', 'fas fa-volume-up')
                ele = get_element_by_xpath(driver, xpath, index=-1)
                return ele
            except:
                return None
        cnt=0
        download_from, root_web = get_download_flatform(video_urls[0])
        driver.get(root_web)
        sleep(5)
        for video_url in video_urls.copy():
            if cnt==0:
                verify_human(video_url)
            else:
                driver.get(root_web)
                sleep(2)
            input_url(video_url)
            ele = get_max_resolution_video()
            if not ele:
                continue
            parent = find_parent_element(ele, 1, 'a')
            url_data = parent.get_attribute("data-linkdown")
            driver.get(url_data)
            sleep(2)
            cnt += 1
            video_urls.remove(video_url)
            sleep(2)
            print(f'T·∫£i th√†nh c√¥ng video: {video_url}')
        if cnt > 0:
            print(f'  --> ƒê√£ t·∫£i ƒë∆∞·ª£c {cnt} video.')
            return True
        else:
            return False
    except:
        getlog()
        print("C√≥ l·ªói khi t·∫£i video t·ª´ web !!!")
        return False
    finally:
        if driver:
            driver.quit()

def get_download_flatform(video_url):
    if "//www.douyin.com/" in video_url:
        download_flatform = "douyin"
        root_web = "https://bravedown.com/douyin-video-downloader"
    elif "//www.youtube.com/" in video_url or "youtu.be/" in video_url:
        download_flatform = "youtube"
        root_web = "https://bravedown.com/youtube-video-downloader"
    elif "//www.facebook.com/" in video_url:
        download_flatform = "facebook"
        root_web = "https://bravedown.com/facebook-video-downloader"
    elif "//www.instagram.com/" in video_url:
        download_flatform = "instagram"
        root_web = "https://bravedown.com/instagram-video-downloader"
    elif "//www.twitter.com/" in video_url or "//twitter.com/" in video_url:
        download_flatform = "twitter"
        root_web = "https://bravedown.com/twitter-video-downloader"
    elif "//www.tiktok.com/" in video_url:
        download_flatform = "tiktok"
        root_web = "https://bravedown.com/tiktok-downloader"
    elif "//www.vimeo.com/" in video_url:
        download_flatform = "vimeo"
        root_web = "https://bravedown.com/vimeo-downloader"
    elif "//www.reddit.com/" in video_url:
        download_flatform = "reddit"
        root_web = "https://bravedown.com/reddit-downloader"
    elif "//www.dailymotion.com/" in video_url:
        download_flatform = "dailymotion"
        root_web = "https://bravedown.com/dailymotion-video-downloader"
    elif "//www.vk.com/" in video_url:
        download_flatform = "vk"
        root_web = "https://bravedown.com/vk-video-downloader"
    elif "//www.bilibili.com/" in video_url:
        download_flatform = "bilibili"
        root_web = "https://bravedown.com/bilibili-downloader"
    elif "//www.snapchat.com/" in video_url:
        download_flatform = "snapchat"
        root_web = "https://bravedown.com/snapchat-video-downloader"
    elif "baidu.com/" in video_url:
        download_flatform = "baidu"
        root_web = "https://bravedown.com/baidu-video-downloader"
    elif "www.threads.net/" in video_url:
        download_flatform = "threads"
        root_web = "https://bravedown.com/threads-downloader"
    elif "kuaishou.com/" in video_url:
        download_flatform = "kuaishou"
        root_web = "https://bravedown.com/kuaishou-video-downloader"
    else:
        download_flatform = "ixigua"
        root_web = "https://bravedown.com/ixigua-video-downloader"
    return download_flatform, root_web

def download_video_by_url(url, download_folder=None, file_path=None, return_file_path=False):
    t = time()
    if not url:
        return False
    if not download_folder:
        return False
    try:
        if not file_path:
            def get_file_path(file_name):
                chars = ["/", "\\", ":", "|", "?", "*", "<", ">", "\"", "."]
                for char in chars:
                    if char in file_name:
                        file_name = file_name.replace(char, "")
                    if len(file_name) > 100:
                        file_name = file_name[:100]
                file_path = os.path.join(download_folder, f"{file_name}.mp4")
                return file_path
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
                'outtmpl': f'{download_folder}/%(title)s.%(ext)s'
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=False)
                title = info_dict.get('title', 'video')
                if title == 'video':
                    cnt = 1
                    while True:
                        file_path = os.path.join(download_folder, f"{title}_{cnt}.mp4")
                        if os.path.exists(file_path):
                            cnt += 1
                        else:
                            break
                else:
                    file_path = get_file_path(title)
                    cnt = 0
                    while True:
                        if os.path.exists(file_path):
                            cnt += 1
                            file_path = f"{file_path.split('.mp4')[0]}_{cnt}.mp4"
                        else:
                            break
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
            'outtmpl': file_path,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download(url)
        t1 = time() - t
        if t1 < 5:
            sleep(5-t1)
        print(f'T·∫£i th√†nh c√¥ng video: {file_path}')
        if return_file_path:
            return file_path
        else:
            return True
    except:
        return None

def rename_files_by_index(folder_path, base_name="", extension="", start_index=1):
    try:
        start_index = int(start_index)
    except:
        start_index = 1
    if extension == "":
        files = [folder for folder in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, folder))]
    else:
        files = [file for file in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, file)) and file.endswith(extension)]
    files = natsorted(files)
    for index, file_name in enumerate(files, start=start_index):
        old_file_path = os.path.join(folder_path, file_name)
        if '<index>' in base_name:
            name = base_name.replace('<index>', str(index))
            new_file_name = f'{name}{extension}'
        else:
            new_file_name = f"{base_name}{index}{extension}"
        new_file_path = os.path.join(folder_path, new_file_name)
        try:
            os.rename(old_file_path, new_file_path)
            print(f"ƒê√£ ƒë·ªïi t√™n {old_file_path} th√†nh {new_file_path}")
        except:
            print(f"ƒê·ªïi t√™n file {old_file_path} kh√¥ng th√†nh c√¥ng")

def convert_jpg_to_png(input_folder, from_format='jpg', to_format='png'):
    try:
        output_folder = os.path.join(input_folder, 'png_images')
        os.makedirs(output_folder, exist_ok=True)
        list_images = get_file_in_folder_by_type(input_folder, f'.{from_format}')
        for file in list_images:
            input_path = os.path.join(input_folder, file)
            
            # L·∫•y ph·∫ßn m·ªü r·ªông c·ªßa file
            ext = os.path.splitext(file)[1].lower()
            
            # C√°c ƒë·ªãnh d·∫°ng ·∫£nh h·ªó tr·ª£
            supported_formats = [".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".webp"]
            
            # Ki·ªÉm tra n·∫øu file l√† ·∫£nh h·ª£p l·ªá
            if ext in supported_formats:
                output_path = os.path.join(output_folder, os.path.splitext(file)[0] + f".{to_format}")
                
                try:
                    with Image.open(input_path) as img:
                        # N·∫øu chuy·ªÉn sang JPG, c·∫ßn lo·∫°i b·ªè k√™nh alpha (n·ªÅn trong su·ªët)
                        if to_format.lower() in ["jpg", "jpeg"]:
                            img = img.convert("RGB")

                        img.save(output_path, to_format.upper())
                    print(f"‚úÖ ƒê√£ chuy·ªÉn {file} ‚Üí {os.path.basename(output_path)}")
                except Exception as e:
                    print(f"‚ùå L·ªói khi chuy·ªÉn {file}: {e}")
    except:
        getlog()

def remove_char_in_file_name(folder_path, chars_want_to_remove, char_want_to_replace="", extension=None):
    if not extension:
        extension = '.mp4'
    try:
        chars = chars_want_to_remove.split(',')
        if len(chars) == 0:
            return
        files = [file for file in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, file)) and file.endswith(extension)]
        files = natsorted(files)
        for i, file_name in enumerate(files):
            base_name = file_name.split(extension)[0]
            for char in chars:
                if char in base_name:
                    base_name = base_name.replace(char, char_want_to_replace)
            old_file_path = os.path.join(folder_path, file_name)
            new_file_name = f"{base_name}{extension}"
            new_file_path = os.path.join(folder_path, new_file_name)
            try:
                os.rename(old_file_path, new_file_path)
                print(f"ƒê√£ ƒë·ªïi t√™n {old_file_path} th√†nh {new_file_path}")
            except:
                print(f"ƒê·ªïi t√™n file {old_file_path} kh√¥ng th√†nh c√¥ng")
    except:
        pass

def remove_or_move_file(input_video_path, is_delete=False, is_move=True, finish_folder_name='finished folder'):
    try:
        if is_delete:
            os.remove(input_video_path)
        elif is_move:
            videos_folder = os.path.dirname(input_video_path)
            finish_folder = os.path.join(videos_folder, f'{finish_folder_name}')
            os.makedirs(finish_folder, exist_ok=True)
            base_name = os.path.basename(input_video_path)
            move_file_path = os.path.join(finish_folder, base_name)
            shutil.move(input_video_path, move_file_path)
    except:
        print(f"Kh√¥ng th·ªÉ x√≥a ho·∫∑c di chuy·ªÉn file {input_video_path}")
        

def check_datetime_input(date_str, time_str):
    try:
        input_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        current_time_plus_30 = datetime.now() + timedelta(minutes=30)
        if input_time <= current_time_plus_30:
            print(f'Th·ªùi gian mu·ªën ƒëƒÉng v√†o l√† {time_str} ng√†y {date_str} kh√¥ng h·ª£p l·ªá --> Ph·∫£i ƒëƒÉng sau 30 ph√∫t so v·ªõi th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.')
            return False
        return True
    except:
        print("ƒê·ªãnh d·∫°ng gi·ªù kh√¥ng ƒë√∫ng hh:mm")
        return False

def get_upload_date(upload_date, next_day=False):
    current_date = datetime.now().date()
    if isinstance(upload_date, str):
        try:
            upload_date = convert_date_string_to_datetime(upload_date)
        except:
            upload_date = current_date
    try:
        if upload_date <= current_date:
            upload_date = current_date
    except:
        upload_date = current_date
    if next_day and upload_date == current_date:
        upload_date = upload_date + timedelta(days=1)
    return upload_date

def get_day_gap(day_gap):
    if not day_gap:
        day_gap = "1"
    try:
        day_gap = int(day_gap.strip())
    except:
        day_gap = 1
    return day_gap

def get_number_of_days(number_of_days):
    if not number_of_days:
        number_of_days = "10"
    try:
        number_of_days = int(number_of_days.strip())
    except:
        number_of_days = 1
    return number_of_days

def convert_boolean_to_Yes_No(value):
    if value:
        return 'Yes'
    else:
        return 'No'

def press_esc_key(cnt=1, driver=None):
    if driver:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.ESCAPE).perform()
            sleep(0.3)

def press_TAB_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.TAB).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t TAB")

def press_SPACE_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.SPACE).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t SPACE")

def press_ENTER_key(driver, cnt=1):
    try:
        for i in range(cnt):
            actions = ActionChains(driver)
            actions.send_keys(Keys.ENTER).perform()
            sleep(0.3)
    except:
        print("Kh√¥ng th·ªÉ b·∫•m n√∫t ENTER")

def press_key_on_window(key, cnt=1):
    """B·∫•m m·ªôt ph√≠m tr√™n Windows nhi·ªÅu l·∫ßn v·ªõi kho·∫£ng ngh·ªâ gi·ªØa c√°c l·∫ßn b·∫•m."""
    try:
        for _ in range(cnt):
            keyboard.send(key)
            sleep(0.3)
    except:
        print(f"Kh√¥ng th·ªÉ b·∫•m n√∫t {key.upper()}")

def get_views_text(views_ele):
    match = re.search(r'(\d+(?:\.\d+)?)([KMB]?)', views_ele)
    if match:
        number = float(match.group(1))
        unit = match.group(2)
        return f'{number}{unit}'
    return None

def get_view_count(view_count=""):
    if view_count:
        try:
            view_count = view_count.split('views')[0].strip()
            if 'B' in view_count:
                view_count = float(view_count.replace('B', '')) * 1000000000
            elif 'M' in view_count:
                view_count = float(view_count.replace('M', '')) * 1000000
            elif 'K' in view_count:
                view_count = float(view_count.replace('K', '')) * 1000
            else:
                view_count = int(float(view_count))
        except:
                getlog()
                view_count = 0
    else:
        view_count = 0
    return view_count

def get_image_from_video(videos_folder, position=None):
    try:
        if position:
            time_position = convert_time_to_seconds(position)
        else:
            print("H√£y ch·ªçn th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·∫£nh t·ª´ video.")
            return
    except:
        print("ƒê·ªãnh d·∫°ng th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·∫£nh kh√¥ng h·ª£p l·ªá.")
        return
    videos = os.listdir(videos_folder)
    videos = [k for k in videos if k.endswith('.mp4')]      
    if len(videos) == 0:
        print(f"Kh√¥ng t√¨m th·∫•y video trong th∆∞ m·ª•c {videos_folder}")
        return
    try:
        output_folder = os.path.join(videos_folder, 'images')
        os.makedirs(output_folder, exist_ok=True)
        for i, video_file in enumerate(videos):
            video_path = os.path.join(videos_folder, video_file)
            video_name = os.path.splitext(video_file)[0]
            image_path = os.path.join(output_folder, f'{video_name}.png')
            if os.path.exists(image_path):
                continue
            video = VideoFileClip(video_path)
            if ':' in position:
                extraction_time = time_position
            else:
                extraction_time = video.duration - time_position
            if extraction_time < 0 or extraction_time > video.duration:
                print(f'Th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·∫£nh v∆∞·ª£t qu√° th·ªùi l∆∞·ª£ng c·ªßa video {video_file}. L·∫•y th·ªùi ƒëi·ªÉm tr√≠ch xu·∫•t ·ªü cu·ªëi video')
                extraction_time = video.duration
            frame = video.get_frame(extraction_time)
            imwrite(image_path, frame)
            video.close()
    except:
        print("C√≥ l·ªói trong qu√° tr√¨nh tr√≠ch xu·∫•t ·∫£nh t·ª´ video !!!")

def get_time_check_cycle(time_check_string):
    try:
        time_check = int(float(time_check_string))
    except:
        time_check = 0
    return time_check * 60

def get_random_audio_path(new_audio_folder):
    audios = get_file_in_folder_by_type(new_audio_folder, file_type=".mp3", is_sort=False)
    if not audios:
        return None
    return os.path.join(new_audio_folder, random.choice(audios))
    
def get_file_in_folder_by_type(folder, file_type=".mp4", start_with=None, is_sort=True, noti=True):
    try:
        start_with = start_with.lower() if start_with else None
        file_type = file_type.lower()
        if not os.path.exists(folder):
            if noti:
                print(f"Th∆∞ m·ª•c {folder} kh√¥ng t·ªìn t·∫°i !!!")
            return None
        list_items = os.listdir(folder)
        if "." not in file_type:
            if start_with:
                list_dirs = [d for d in list_items if os.path.isdir(os.path.join(folder, d)) and d.lower().startswith(start_with)]
            else:
                list_dirs = [d for d in list_items if os.path.isdir(os.path.join(folder, d))]
            if len(list_dirs) == 0:
                if noti:
                    print(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c b·∫Øt ƒë·∫ßu v·ªõi '{start_with}' trong {folder} !!!")
                return None
            return natsorted(list_dirs) if is_sort else list_dirs
        else:
            if start_with:
                list_files = [f for f in list_items if f.lower().endswith(file_type) and f.lower().startswith(start_with)]
            else:
                list_files = [f for f in list_items if f.lower().endswith(file_type)]
            if len(list_files) == 0:
                if noti:
                    print(f"Kh√¥ng t√¨m th·∫•y file {file_type} trong th∆∞ m·ª•c {folder} !!!")
                return None
            return natsorted(list_files) if is_sort else list_files
    except:
        getlog()
        return None

def move_file_from_folder_to_folder(folder1, folder2):
    try:
        for filename in os.listdir(folder1):
            folder1_file = os.path.join(folder1, filename)
            folder2_file = os.path.join(folder2, filename)
            if os.path.isfile(folder1_file):
                shutil.move(folder1_file, folder2_file)
    except:
        pass
        

#--------------------------CTK----------------------------

def choose_folder():
    folder_path = filedialog.askdirectory()
    return folder_path

def choose_file(file_type = "*"):
    file_path = filedialog.askopenfilename( title="Select a file", filetypes=(("All files", f"*.{file_type}"),) )
    return file_path

def message_aks(message):
    messagebox.askquestion(title="Question", message=message)
def warning_message(message):
    messagebox.showinfo(title="WARNING", message=message)
def notification(parent=None, message=""):
    try:
        if parent:
            parent.after(0, lambda: messagebox.showinfo(title="Notification", message=message))
        else:
            messagebox.showinfo(title="Notification", message=message)
    except:
        pass

def error_message(message):
    messagebox.showinfo(title="ERROR", message=message)

def clear_widgets(root):
    for widget in root.winfo_children():
        widget.pack_forget()

def create_button_icon(frame = None, command=None, image=None, side=None, width=60):
    button = ctk.CTkButton( master=frame, text="", command=command, image=image, width=width)
    if side:
        button.pack(side=side, padx=0, pady=0)
    else:    
        button.pack(padx=0, pady=0)
    return button

def create_button(frame = None, text="", command=None, width=width_window, compound="left", anchor="center", image=None, side=None, pady=pady, padx=padx):
    button = ctk.CTkButton(master=frame, text=text, command=command, image=image, width=width, height= height_element, compound=compound, anchor=anchor, )
    if side:
        button.pack(side=side, pady=pady, padx=padx)
    else:    
        button.pack(pady=pady, padx=padx)
    return button

def create_label(frame=None, text="", compound="center", anchor="w", width=width_window, height=height_element, wraplength=None, side=None):
    if not width:
        width = width
    wraplength = width - 20
    label = ctk.CTkLabel(master=frame, text=text, width=width, height= height_element, wraplength=wraplength, anchor=anchor, compound=compound)
    if side:
        label.pack(side=side, pady=pady, padx=padx)
    else:
        label.pack(pady=pady, padx=padx)
    return label

def create_frame(frame, fill='x', side=None):
    frame = ctk.CTkFrame(master=frame, height=height_element*0.9)
    frame.pack(padx=padx, pady=pady, fill=fill, side=side)
    return frame

def create_text_input(frame, width=width_window, placeholder=None, side="right", default="", is_password=False):
    if not width:
        width = width
    if is_password:
        text_input = ctk.CTkEntry(master=frame, width=width, height=height_element*0.8, placeholder_text=placeholder, textvariable=default, show="*")
    else:
        text_input = ctk.CTkEntry(master=frame, width=width, height=height_element*0.8, placeholder_text=placeholder, textvariable=default)
    text_input.pack(pady=pady, padx=padx, side=side)
    return text_input

def create_combobox(frame, values=None, variable=None, side=RIGHT, width=width_window, height=height_element):
    val=None
    if variable:
        val = ctk.StringVar(value=str(variable))

    combobox = ctk.CTkComboBox(master=frame, values=values, variable=val, width=width, height=height)
    combobox.pack(side=side, padx=padx, pady=pady)
    return combobox

def create_frame_label_and_progress_bar(frame, text="", width=width_window, left=left, right=right):
    label = create_label(frame=frame, text=text, side=LEFT, width=width*left, compound=LEFT)
    processbar = create_progress_bar(frame=frame, width=width*right, side=RIGHT)
    return frame, processbar

def create_progress_bar(frame=None, width=width_window):
    processbar = ctk.CTkProgressBar(master=frame, width=width)
    processbar.pack(padx=padx, pady=pady)
    return processbar

def create_frame_label_input_input(root, text="", place_holder1=None, place_holder2=None, width=width_window, left=0.25, mid=0.56, right=0.19):
    frame = create_frame(root)
    label = create_label(frame=frame, text=text, side=LEFT, width=width*left, compound=LEFT, anchor='w')
    entry1 = create_text_input(frame=frame, width=width*mid, placeholder=place_holder1, side=RIGHT)
    entry2 = create_text_input(frame=frame, width=width*right, placeholder=place_holder2)
    return entry1, entry2

def create_frame_label_and_input(root, text="", place_holder=None, width=width_window, left=left, right=right, is_password=False):
    frame = create_frame(root)
    label = create_label(frame=frame, text=text, side=LEFT, width=width*left, compound=LEFT, anchor='w')
    entry = create_text_input(frame=frame, width=width*right, placeholder=place_holder, is_password=is_password)

    return entry

def create_frame_button_input_input(root,text, width=width_window, place_holder1=None, place_holder2=None, command=None, left=0.25, mid=0.56, right=0.19):
    frame = create_frame(root)
    button = create_button(frame=frame, text=text, width=width*left, side=LEFT, command=command)
    entry1 = create_text_input(frame, width=width*mid, placeholder=place_holder1, side=RIGHT)
    entry2 = create_text_input(frame, width=width*right, placeholder=place_holder2)
    return entry1, entry2

def create_frame_button_and_input(root, text, width=width_window, place_holder=None, command=None, left=left, right=right):
    frame = create_frame(root)
    button = create_button(frame=frame, text=text, width=width*left, side=LEFT, command=command)
    entry = create_text_input(frame, width=width*right, placeholder=place_holder)
    return entry

def create_frame_button_and_combobox(root, text, command=None, width=width_window, values=None, variable=None, left=left, right=right):
    frame = create_frame(root)
    button = create_button(frame=frame, text=text, width=width*left, side=LEFT, command=command)
    combobox = create_combobox(frame, width=width*right, side=RIGHT, values=values, variable=variable)
    return combobox

def create_frame_button_and_button(root, text1, text2, command1=None, command2=None, width=width_window, left=left, right=right):
    frame = create_frame(root)
    button1 = create_button(frame=frame, text=text1, width=width*left , side=LEFT, command=command1)
    button2 = create_button(frame=frame, text=text2, width=width*right -15, side=RIGHT, command=command2)
    return button1, button2

#----------------------edit video/ audio--------------------------------

def sleep_random(from_second=1, to_second=5):
    sleep(random.uniform(from_second, to_second))

def run_command_ffmpeg(command, hide=True):
    try:
        if hide:
            subprocess.run(command, check=True, text=True, encoding='utf-8', stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.run(command, check=True, text=True, encoding='utf-8', stdout=subprocess.DEVNULL)
        return True
    except:
        getlog()
        return False

def run_command_with_progress(command, duration):
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        encoding='utf-8',
    )

    current_time = 0.0
    check=False
    for line in process.stdout:
        if 'out_time_ms=' in line:
            match = re.search(r'out_time_ms=(\d+)', line)
            if match:
                out_time_ms = int(match.group(1))
                current_time = out_time_ms / 1000000.0
                percent_complete = (current_time / duration) * 100
                sys.stdout.write(f'\rƒê√£ x·ª≠ l√Ω: {percent_complete:.2f}%')
                sys.stdout.flush()
                check = True
    process.wait()
    return check

def get_video_info(input_file):
    try:
        cmd = [
            'ffprobe',
            '-v', 'error',
            '-select_streams', 'v:0',
            '-show_entries', 'stream=width,height,r_frame_rate,duration',
            '-of', 'json',
            input_file
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, encoding='utf-8')
        info = json.loads(result.stdout)
        video_info = info['streams'][0]
        width = video_info['width']
        height = video_info['height']
        duration = video_info['duration']
        r_frame_rate = video_info.get('r_frame_rate', '0/1')
        numerator, denominator = map(int, r_frame_rate.split('/'))
        fps = numerator / denominator if denominator != 0 else 0
        return {
            'width': width,
            'height': height,
            'fps': fps,
            'duration': duration
        }
    except:
        try:
            clip = VideoFileClip(input_file)
            video_info = {}
            width, height = clip.size
            duration = clip.duration
            fps = clip.fps
            clip.close()
            return {
                'width': width,
                'height': height,
                'fps': fps,
                'duration': duration
            }
        except:
            return None

def get_audio_info(audio_path):
    cmd = ["ffprobe", "-v", "quiet", "-print_format", "json", "-show_format", "-show_streams", audio_path]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
    info = json.loads(result.stdout)
    streams_info = info.get("streams", [])
    if not streams_info:
        print(f"L·ªói: Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin c·ªßa audio {audio_path}")
        return None
    streams_info = streams_info[0]
    return streams_info

def get_image_info(image_path):
    try:
        with Image.open(image_path) as img:
            width, height = img.size
            return width, height
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ·∫£nh t·ª´ {image_path}: {e}")
        return {'width': 0, 'height': 0}
    
def cut_video_by_timeline_use_ffmpeg(input_video_path, segments, is_connect='no', is_delete=False, fast_cut=True, get_audio=False):
    ti = time()
    if fast_cut:
        print("..........................")
        print("B·∫Øt ƒë·∫ßu c·∫Øt nhanh video...")
    else:
        print("B·∫Øt ƒë·∫ßu c·∫Øt video...")
    try:
        output_folder, file_name = get_output_folder(input_video_path, output_folder_name='cut_video')
        output_file_path = os.path.join(output_folder, file_name)
        temp_list_file = os.path.join(output_folder, "temp_list.txt")
        remove_file(temp_list_file)
        combine_videos = []
        video_info = get_video_info(input_video_path)
        if not video_info:
            return None, f"Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin video {input_video_path}"
        duration = float(video_info['duration'])
        end = "0"
        try:
            segments = segments.split(',')
        except:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt l√† start-end v·ªõi start,end l√† hh:mm:ss ho·∫∑c mm:ss ho·∫∑c ss")
            return None, "C√≥ l·ªói khi c·∫Øt video"
        for i, segment in enumerate(segments, start=0):
            segment = segment.strip()
            if i==0 and '-' not in segment:
                start, end = "0", segment
            elif '-' not in segment:
                start = str(end)
                end = segment
            else:
                start, end = segment.split('-')
            start = convert_time_to_seconds(start)
            end = convert_time_to_seconds(end)
            if start is None or end is None:
                print("Th·ªùi gian c·∫Øt kh√¥ng h·ª£p l·ªá.")
                return
            if end > duration:
                end = duration
            base_name = file_name.split('.mp4')[0]
            index = 1
            if len(segments) == 1:
                segment_file_path = os.path.join(output_folder, file_name)
                if os.path.exists(segment_file_path):
                    segment_file_path = os.path.join(output_folder, f"{base_name}_{index}.mp4")
            else:
                segment_file_path = os.path.join(output_folder, f"{base_name}_{index}.mp4")
            while True:
                if os.path.exists(segment_file_path):
                    index +=1
                    segment_file_path = os.path.join(output_folder, f"{base_name}_{index}.mp4")
                else:
                    break

            if fast_cut:
                command = [
                    'ffmpeg', '-progress', 'pipe:1', '-accurate_seek', '-ss', str(start), '-i', input_video_path,
                    '-to', str(end - start), '-c:v', 'copy', '-c:a', 'copy', '-fps_mode', 'cfr',
                    '-y', segment_file_path, '-loglevel', 'quiet'
                ]
            else:
                command = [
                    'ffmpeg', '-progress', 'pipe:1', '-i', input_video_path, '-ss', str(start), '-to', str(end), '-c:v', 'libx264', '-c:a', 'aac', '-strict', 'experimental', '-b:a', '128k', '-y', segment_file_path, '-loglevel', 'quiet'
                ]
            run_command_with_progress(command, duration)

            if get_audio:
                download_folder = os.path.join(output_folder, "extracted_audio")
                os.makedirs(download_folder, exist_ok=True)
                extract_audio_ffmpeg(video_path=segment_file_path, download_folder=download_folder)
            if is_connect:
                combine_videos.append(segment_file_path)


        if is_connect != 'no' and len(combine_videos) > 1:
            with open(temp_list_file, 'w', encoding= 'utf-8') as f:
                for video in combine_videos:
                    f.write(f"file '{video}'\n")
            command = connect_video(temp_list_file, output_file_path, fast_connect=is_connect == 'fast connect')
            run_command_ffmpeg(command)
            try:
                for video in combine_videos:
                    remove_file(video)
                remove_file(temp_list_file)
            except:
                pass
        cat = time() - ti
        print(f'---> Th·ªùi gian c·∫Øt video {input_video_path} l√† {int(cat)}s')
        return True, None
    except:
        return False, "C√≥ l·ªói trong qu√° tr√¨nh c·∫Øt video!!!"



def merge_videos_use_ffmpeg(videos_folder, file_name=None, is_delete=False, videos_path=None, fast_combine=True, output_folder=None, hide=True):
    try:
        print("B·∫Øt ƒë·∫ßu n·ªëi video...")
        temp_file_path = os.path.join(videos_folder, "temp.txt")
        max_fps = 24
        if not videos_path:
            videos = get_file_in_folder_by_type(videos_folder)
            if not videos:
                print(f"Kh√¥ng t√¨m th·∫•y video trong th∆∞ m·ª•c {videos_folder}")
                return False
            if len(videos) <= 1:
                print("Ph·∫£i c√≥ √≠t nh·∫•t 2 video trong videos folder")
                return False
            videos_path = []
            with open(temp_file_path, 'w', encoding='utf-8') as f:
                for video in videos:
                    if video.endswith('.mp4'):
                        video_path = os.path.join(videos_folder, video)
                        video_info = get_video_info(video_path)
                        if not video_info:
                            print(f"D·ª´ng g·ªôp video v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ video {video_path}")
                            return False
                        fps = video_info['fps']
                        if fps > max_fps:
                            max_fps = fps
                        f.write(f"file '{video_path}'\n")
                        videos_path.append(video_path)
        else:
            with open(temp_file_path, 'w') as f:
                for video_path in videos_path:
                    video_info = get_video_info(video_path)
                    if not video_info:
                        print(f"D·ª´ng g·ªôp video v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ video {video_path}")
                        return False
                    fps = video_info['fps']
                    if fps > max_fps:
                        max_fps = fps
                    if video_path.endswith('.mp4'):
                        f.write(f"file '{video_path}'\n")
        if not output_folder:
            output_folder = f"{videos_folder}\\merge_videos"
        os.makedirs(output_folder, exist_ok=True)
        if file_name:
            file_path = f"{output_folder}\\{file_name}.mp4"
        else:
            file_path = f"{output_folder}\\merge_video.mp4"
        command = connect_video(temp_file_path, file_path, fast_connect=fast_combine, max_fps=max_fps)
        if not run_command_ffmpeg(command, hide):
            print(f"{thatbai} G·ªôp video th·∫•t b·∫°i")
            return False
        try:
            remove_file(temp_file_path)
            if is_delete:
                for video_path in videos_path:
                    remove_file(video_path)
        except:
            pass
        print(f"G·ªôp video th√†nh c√¥ng v√†o file {file_path}")
        return True
    except:
        getlog()
        return False, "C√≥ l·ªói trong qu√° tr√¨nh g·ªôp video"

def merge_audio_use_ffmpeg(audios_folder, file_name=None, fast_combine=True, file_start_with="", output_folder=None):
    print("B·∫Øt ƒë·∫ßu n·ªëi audio...")
    temp_file_path = os.path.join(audios_folder, "temp.txt")
    audios = get_file_in_folder_by_type(audios_folder, file_type=".mp3", start_with=file_start_with) or []
    if len(audios) == 0:
        audios = get_file_in_folder_by_type(audios_folder, file_type=".wav", start_with=file_start_with) or []
        if len(audios) == 0:
            return
    if len(audios) <= 1:
        return False, "Ph·∫£i c√≥ √≠t nh·∫•t 2 video trong videos folder"
    file_type = audios[0].split('.')[-1]
    with open(temp_file_path, 'w') as f:
        for audio in audios:
            audio_path = os.path.join(audios_folder, audio)
            f.write(f"file '{audio_path}'\n")
    if not output_folder:
        output_folder = f"{audios_folder}\\merge_audios"
    os.makedirs(output_folder, exist_ok=True)
    if file_name:
        file_path = f"{output_folder}\\{file_name}.{file_type}"
    else:
        file_path = f"{output_folder}\\merge_audio.{file_type}"
    command = connect_audio(temp_file_path, file_path, fast_connect=fast_combine)
    try:
        if run_command_ffmpeg(command, False):
            try:
                remove_file(temp_file_path)
            except:
                pass
            return True, f"G·ªôp audio th√†nh c√¥ng v√†o file {file_path}"
    except:
        getlog()
    return False, "C√≥ l·ªói khi g·ªôp audio"


def connect_video(temp_file_path, output_file_path, fast_connect=True, max_fps=None):
    print("---> ƒëang n·ªëi video...")
    if fast_connect:
        command = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, 
            '-vf', 'fps=25', '-c:v', 'libx264', '-crf', '23', '-preset', 'veryfast', 
            '-c:a', 'aac', '-b:a', '128k', '-movflags', '+faststart', '-y', output_file_path
        ]
        # if torch.cuda.is_available():
        #     print("---> D√πng GPU ƒë·ªÉ n·ªëi video...")
        #     command = [
        #         "ffmpeg", "-f", "concat", "-safe", "0", "-i", temp_file_path,
        #         "-vf", "fps=25",
        #         "-c:v", "h264_nvenc",  # S·ª≠ d·ª•ng GPU
        #         "-cq", "23",  # Ch·∫•t l∆∞·ª£ng t∆∞∆°ng ƒë∆∞∆°ng CRF 23
        #         "-preset", "medium",  # Thay th·∫ø "veryfast" b·∫±ng preset t·ªëi ∆∞u cho NVENC
        #         "-pix_fmt", "yuv420p",  # ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng pixel ph·ªï bi·∫øn
        #         "-c:a", "aac", "-b:a", "128k",
        #         "-movflags", "+faststart", "-y", output_file_path
        #     ]
    else:
        if max_fps:
            command = [
                'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, '-c:v', 'libx264', '-c:a', 'aac', '-r', f'{max_fps}', '-y', output_file_path
            ]
        else:
            command = [
                'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, '-c:v', 'libx264', '-c:a', 'aac', '-y', output_file_path
            ]
    return command

def connect_audio(temp_file_path, output_file_path, fast_connect=True):
    if fast_connect:
        print("---> ƒëang n·ªëi audio...")
        command = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, 
            '-c:a', 'libmp3lame', '-b:a', '128k', '-y', output_file_path, '-loglevel', 'quiet'
        ]
    else:
        print("---> ƒëang n·ªëi audio...")
        command = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', temp_file_path, 
            '-c:a', 'libmp3lame', '-b:a', '128k', '-y', output_file_path, '-loglevel', 'quiet'
        ]
    return command
    
def add_watermark_by_ffmpeg(video_width, video_height, horizontal_watermark_position, vertical_watermark_position):
    try:
        if horizontal_watermark_position == 'center':
            horizontal_watermark_position = 50
        elif horizontal_watermark_position == 'left':
            horizontal_watermark_position = 0
        elif horizontal_watermark_position == 'right':
            horizontal_watermark_position = 100
        else:
            try:
                horizontal_watermark_position = float(horizontal_watermark_position)
                if horizontal_watermark_position > 100:
                    horizontal_watermark_position = 100
                elif horizontal_watermark_position < 0:
                    horizontal_watermark_position = 0
            except:
                horizontal_watermark_position = 50
        if vertical_watermark_position == 'center':
            vertical_watermark_position = 50
        elif vertical_watermark_position == 'top':
            vertical_watermark_position = 0
        elif vertical_watermark_position == 'bottom':
            vertical_watermark_position = 100
        else:
            try:
                vertical_watermark_position = float(vertical_watermark_position)
                if vertical_watermark_position > 100:
                    vertical_watermark_position = 100
                elif vertical_watermark_position < 0:
                    vertical_watermark_position = 0
            except:
                vertical_watermark_position = 50
        watermark_x = int(video_width * horizontal_watermark_position / 100)
        watermark_y = int(video_height * vertical_watermark_position / 100)
        return watermark_x, watermark_y
    except:
        return None, None


def get_and_adjust_resolution_from_clip(clip, scale_factor=0.997):
    width = int(clip.size[0] * scale_factor)
    height = int(clip.size[1] * scale_factor)
    resized_video = clip.resize((width, height))
    return resized_video

def check_vietnamese_characters(filename):
    vietnamese_pattern = re.compile(
        r'[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë'
        r'√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê]'
    )
    return bool(vietnamese_pattern.search(filename))

def edit_audio_ffmpeg(input_audio_folder, start_cut="0", end_cut="0", pitch_factor=None, speed=None, cut_silence=False, aecho=None, flanger='8', chorus='0.05'):
    try:
        speed = get_float_data(speed)
        if not speed:
            speed = 1
        if aecho:
            aecho = get_float_data(aecho)
            if not aecho:
                print("Th·ªùi gian thi·∫øt l·∫≠p t·∫°o ti·∫øng vang cho audio kh√¥ng h·ª£p l·ªá --> Kh√¥ng √°p d·ª•ng t·∫°o ti·∫øng vang")
        pitch_factor = get_float_data(pitch_factor)
        if not pitch_factor:
            print("Cao ƒë·ªô kh√¥ng h·ª£p l·ªá --> ƒê·∫∑t v·ªÅ 1")
            pitch_factor = 1.0
        try:
            start_cut = float(start_cut)
            end_cut = float(end_cut)
        except:
            print("Gi√° tr·ªã c·ªßa start_cut v√† end_cut kh√¥ng h·ª£p l·ªá. ƒê·∫∑t v·ªÅ 0.")
            start_cut = end_cut = 0

        import tempfile
        audios = get_file_in_folder_by_type(input_audio_folder, ".mp3")
        if not audios:
            return
        for audio in audios:
            input_audio_path = os.path.join(input_audio_folder, audio)
            audio_info = get_audio_info(input_audio_path)
            if not audio_info:
                return
            duration = float(audio_info.get("duration", 0))
            if start_cut + end_cut >= duration:
                print("Th·ªùi gian c·∫Øt kh√¥ng h·ª£p l·ªá. ƒê·∫£m b·∫£o r·∫±ng start_cut v√† end_cut kh√¥ng l·ªõn h∆°n th·ªùi gian c·ªßa audio.")
                return
            cut_duration = duration - start_cut - end_cut
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_audio_file:
                temp_audio_path = temp_audio_file.name
            ffmpeg_cmd_cut = [
                "ffmpeg", "-y",
                '-loglevel', 'quiet',
                "-ss", str(start_cut),
                "-i", input_audio_path,
                "-t", str(cut_duration),
                "-c:a", "copy",
                temp_audio_path
            ]
            if not run_command_ffmpeg(ffmpeg_cmd_cut):
                print(f"L·ªói khi x·ª≠ l√Ω audio {input_audio_path}!")
                return
            streams_info = get_audio_info(temp_audio_path)
            if not streams_info:
                return
            output_audio_folder, file_name = get_output_folder(input_audio_path, output_folder_name="edited_audios")
            output_audio_path = os.path.join(output_audio_folder, file_name)
            metadata = {"artist": "None", "album": "None", "title": "None", "encoder": "FFmpeg 6.0"}
            original_sample_rate = int(streams_info.get("sample_rate", 0))
            sample_rate = 24000  # ƒê·∫£m b·∫£o t·∫ßn s·ªë l·∫•y m·∫´u l√† 24 kHz cho hu·∫•n luy·ªán
            original_bitrate = streams_info.get("bit_rate", "128k")
            bitrate = "192k" if original_bitrate == "192000" else "128k"
            channels = 1  # Chuy·ªÉn th√†nh mono (1 k√™nh)
            volume = "4dB"
            eq_adjust = "equalizer=f=120:width_type=h:width=300:g=7, equalizer=f=1000:width_type=h:width=300:g=-1"
            ffmpeg_cmd_adjust = ["ffmpeg", '-loglevel', 'quiet', "-y", "-i", temp_audio_path]
            for key, value in metadata.items():
                ffmpeg_cmd_adjust += ["-metadata", f"{key}={value}"]
            ffmpeg_cmd_adjust += ["-ar", str(sample_rate), "-b:a", bitrate, "-ac", str(channels)]
            filters = [f"volume={volume}", eq_adjust]
            if speed != 1.0:
                filters.append(f"atempo={speed}")
            if cut_silence:
                filters.append("silenceremove=start_periods=1:start_silence=0.1:start_threshold=-50dB")
            # √Åp d·ª•ng hi·ªáu ·ª©ng t√πy ch·ªçn
            if pitch_factor != 1.0:
                filters.append(f"rubberband=pitch={pitch_factor}")
            if flanger:
                filters.append(f"flanger=delay={flanger}:depth=3:regen=-9:width=77:speed=0.7")
            if aecho:
                filters.append(f"aecho=0.8:0.9:{aecho}:0.2")
            if chorus:
                filters.append(f"chorus=0.8:0.9:50:{chorus}:{chorus}:3")

            if filters:
                ffmpeg_cmd_adjust += ["-af", ",".join(filters)]
            # ƒê·∫£m b·∫£o xu·∫•t audio v·ªõi ƒë·ªãnh d·∫°ng chu·∫©n cho hu·∫•n luy·ªán
            ffmpeg_cmd_adjust += ["-sample_fmt", "s16", "-c:a", "pcm_s16le", output_audio_path]
            if run_command_ffmpeg(ffmpeg_cmd_adjust):
                print(f"Ch·ªânh s·ª≠a th√¥ng tin audio th√†nh c√¥ng: {output_audio_path}")
            else:
                print(f"L·ªói khi thay ƒë·ªïi th√¥ng tin audio !!!")
            os.remove(temp_audio_path)
    except:
        print("C√≥ l·ªói trong qu√° tr√¨nh ch·ªânh s·ª≠a audio !!!")


def extract_audio_ffmpeg(audio_path=None, video_path=None, video_url=None, video_folder=None, segments=None, download_folder=None, file_type='wav', speed='1.0'):
    try:
        if not segments:
            segments = "0-999999999999"
        try:
            segments = segments.split(',')
        except:
            print("ƒê·ªãnh d·∫°ng th·ªùi gian c·∫Øt l√† start-end v·ªõi start,end l√† hh:mm:ss ho·∫∑c mm:ss ho·∫∑c ss")
            return
        try:
            speed = float(speed)
        except:
            speed = 1.0

        if video_url:
            video_path = download_video_by_url(video_url, download_folder, return_file_path=True)
            print(video_path)

        for segment in segments:
            segment = segment.strip()
            start, end = segment.split('-')
            start = convert_time_to_seconds(start)
            if start is None:
                return
            end = convert_time_to_seconds(end)
            if end is None:
                return
            target_paths = []
            if audio_path:
                target_path = audio_path
            elif video_path:
                target_path = video_path
            elif video_folder:
                videos =  get_file_in_folder_by_type(video_folder, ".mp4")   
                if not videos:
                    return
                for video in videos:
                    video_path = os.path.join(video_folder, video)
                    target_paths.append(video_path)
            else:
                warning_message("Vui l√≤ng ch·ªçn ngu·ªìn ƒë·ªÉ edit video")
                return
            if video_url or audio_path or video_path:
                target_paths.append(target_path)

            output_folder = os.path.join(os.path.dirname(target_path), 'extract_audios')
            os.makedirs(output_folder, exist_ok=True)
            for target_path in target_paths:
                video_clip = None
                if '.wav' in target_path or '.mp3' in target_path:
                    audio_clip = AudioFileClip(target_path)
                else:
                    video_clip = VideoFileClip(target_path)
                    audio_clip = video_clip.audio
                duration = audio_clip.duration
                if end > duration:
                    end = duration
                file_name = os.path.basename(target_path)
                audio_name = file_name.split('.')[0]
                cnt_cut = 1
                while True:
                    output_audio_path = f'{output_folder}/{audio_name}_{cnt_cut}.{file_type}'
                    if os.path.exists(output_audio_path):
                        cnt_cut += 1
                    else:
                        break
                try:
                    ffmpeg_cmd = [ "ffmpeg", "-y", "-i", target_path, "-ss", str(start), "-to", str(end), "-ac", "1", "-ar", "24000", "-filter:a", f"atempo={speed}", "-sample_fmt", "s16", output_audio_path ]
                    run_command_ffmpeg(ffmpeg_cmd)
                except:
                    getlog()
                    print(f'C√≥ l·ªói trong khi tr√≠ch xu·∫•t audio')
                    
                if audio_clip:
                    audio_clip.close()
                if video_clip:
                    video_clip.close()
                print(f"  --> Tr√≠ch xu·∫•t th√†nh c√¥ng audio t·ª´ video {target_path}")
        if video_url:
            remove_file(video_path)
    except:
        getlog()
        print("C√≥ l·ªói trong qu√° tr√¨nh tr√≠ch xu·∫•t audio !!!")


def text_to_audio_with_xtts(xtts, text, output_path, language="vi", speed_talk=1.0, split_sentences=False):
    try:
        if not text:
            return False
        if not xtts:
            return False
        speaker_wav = get_ref_speaker_by_language(language)
        text = cleaner_text(text, language=language)
        xtts.tts_to_file(text=text, speaker_wav=speaker_wav, language=language, speed=speed_talk, file_path=output_path, split_sentences=split_sentences)
        return True
    except:
        getlog()
        return False


def change_audio_speed(input_audio, output_audio, speed=1.0, hide=True):
    if speed != 1.0:
        try:
            codec = "pcm_s16le" if input_audio.endswith(".wav") else "aac"
            command = [ "ffmpeg", "-y", "-i", input_audio, "-filter:a", f"atempo={speed}", "-c:a", codec, output_audio ]
            run_command_ffmpeg(command, hide=hide)
            return True
        except:
            getlog()
            print(f"Kh√¥ng th·ªÉ tƒÉng t·ªëc audio {input_audio} v·ªõi t·ªëc ƒë·ªô {speed}")
    return False

def split_images(image_folder=None, chapter_folder=None, output_folder=None, min_space_height=70, threshold_value=230):
    try:
        if not output_folder or not os.path.isdir(output_folder):
            output_folder = os.path.join(image_folder, 'split_images')
        os.makedirs(output_folder, exist_ok=True)

        image_paths = []
        if image_folder:
            images = get_file_in_folder_by_type(image_folder, '.jpg', noti=False) or []
            if not images:
                images = get_file_in_folder_by_type(image_folder, '.png', noti=False) or []
            if not images:
                print(f'{thatbai} Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c {image_folder}')
                return
            for img in images:
                image_path = os.path.join(image_folder, img)
                image_paths.append(image_path)
        elif chapter_folder:
            image_folders = get_file_in_folder_by_type(chapter_folder, file_type='', start_with='chuong') or None
            if not image_folders:
                print(f'{thatbai} Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c n√†o b·∫Øt ƒë·∫ßu b·∫±ng "chuong" trong th∆∞ m·ª•c {chapter_folder}')
                return
            for image_folder in image_folders:
                image_folder = os.path.join(chapter_folder, image_folder)
                images = get_file_in_folder_by_type(image_folder, '.jpg', noti=False) or []
                if not images:
                    images = get_file_in_folder_by_type(image_folder, '.png', noti=False) or []
                if not images:
                    print(f'{thatbai} Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c {image_folder}')
                    return
                for img in images:
                    image_path = os.path.join(image_folder, img)
                    image_paths.append(image_path)
        else:
            print(f'{thatbai} Ph·∫£i ch·ªçn th∆∞ m·ª•c ch·ª©a ch∆∞∆°ng truy·ªán ho·∫∑c ch·ª©a ·∫£nh')
            return

        def find_blocks(gray_img, condition_fn, min_height):
            """T√¨m c√°c block (v√πng li√™n ti·∫øp) th·ªèa ƒëi·ªÅu ki·ªán d√≤ng."""
            row_avg = np.mean(gray_img, axis=1)
            lines = np.where(condition_fn(row_avg))[0]
            blocks = []
            for k, g in groupby(enumerate(lines), lambda ix: ix[0] - ix[1]):
                block = list(map(itemgetter(1), g))
                if len(block) >= min_height:
                    blocks.append((block[0], block[-1]))
            return blocks

        for image_path in image_paths:
            img = cv2.imread(image_path)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            img_height = img.shape[0]
            prev_cut = 0
            count = 1

            # ∆Øu ti√™n c·∫Øt theo v√πng tr·∫Øng (d√≤ng r·∫•t s√°ng)
            white_blocks = find_blocks(gray, lambda row: row > 245, min_space_height)

            if white_blocks:
                print(f"üü® C·∫Øt theo v√πng tr·∫Øng: {os.path.basename(image_path)}")
                for top, bottom in white_blocks:
                    middle = (top + bottom) // 2
                    if middle - prev_cut > 200:
                        crop = img[prev_cut:middle, :]
                        out_path = get_next_filename('1', output_folder, 'jpg')
                        cv2.imwrite(out_path, crop)
                        print(f"‚úÖ ƒê√£ l∆∞u: {out_path}")
                        count += 1
                        prev_cut = middle
            else:
                # N·∫øu kh√¥ng c√≥ v√πng tr·∫Øng, c·∫Øt theo v√πng ƒëen (d√≤ng t·ªëi)
                print(f"‚¨õ C·∫Øt theo v√πng ƒëen: {os.path.basename(image_path)}")
                black_blocks = find_blocks(gray, lambda row: row < 40, min_space_height)
                for top, bottom in black_blocks:
                    middle = (top + bottom) // 2
                    if middle - prev_cut > 200:
                        crop = img[prev_cut:middle, :]
                        out_path = get_next_filename('1', output_folder, 'jpg')
                        cv2.imwrite(out_path, crop)
                        print(f"‚úÖ ƒê√£ l∆∞u: {out_path}")
                        count += 1
                        prev_cut = middle

            # C·∫Øt ph·∫ßn c√≤n l·∫°i n·∫øu v·∫´n c√≤n d∆∞ ph√≠a d∆∞·ªõi
            if img_height - prev_cut > 200:
                crop = img[prev_cut:, :]
                out_path = get_next_filename('1', output_folder, 'jpg')
                cv2.imwrite(out_path, crop)
                print(f"‚úÖ ƒê√£ l∆∞u: {out_path}")

        print(f"{tot} Ho√†n t·∫•t c·∫Øt ·∫£nh.")
    except Exception as e:
        getlog()
# def split_images(image_folder=None, chapter_folder=None, output_folder=None, min_space_height=80, threshold_value=230):
#     try:
#         if not output_folder or not os.path.isdir(output_folder):
#             output_folder = os.path.join(image_folder, 'split_images')
#         os.makedirs(output_folder, exist_ok=True)
#         image_paths = []
#         if image_folder:
#             images = get_file_in_folder_by_type(image_folder, '.jpg', noti=False) or []
#             if not images:
#                 images = get_file_in_folder_by_type(image_folder, '.png', noti=False) or []
#             if not images:
#                 print(f'{thatbai} Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c {image_folder}')
#                 return
#             for img in images:
#                 image_path = os.path.join(image_folder, img)
#                 image_paths.append(image_path)
#         elif chapter_folder:
#             image_folders = get_file_in_folder_by_type(chapter_folder, file_type='', start_with='chuong') or None
#             if not image_folders:
#                 print(f'{thatbai} Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c n√†o b·∫Øt ƒë·∫ßu b·∫±ng "chuong" trong th∆∞ m·ª•c {chapter_folder}')
#                 return
#             for image_folder in image_folders:
#                 image_folder = os.path.join(chapter_folder, image_folder)
#                 images = get_file_in_folder_by_type(image_folder, '.jpg', noti=False) or []
#                 if not images:
#                     images = get_file_in_folder_by_type(image_folder, '.png', noti=False) or []
#                 if not images:
#                     print(f'{thatbai} Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c {image_folder}')
#                     return
#                 for img in images:
#                     image_path = os.path.join(image_folder, img)
#                     image_paths.append(image_path)
#         else:
#             print(f'{thatbai} Ph·∫£i ch·ªçn th∆∞ m·ª•c ch·ª©a ch∆∞∆°ng truy·ªán ho·∫∑c ch·ª©a ·∫£nh')
#             return

#         for image_path in image_paths:
#             # ƒê·ªçc ·∫£nh v√† chuy·ªÉn sang ·∫£nh x√°m
#             img = cv2.imread(image_path)
#             gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#             # Nh·ªã ph√¢n h√≥a ·∫£nh tr·∫Øng ƒëen
#             _, binary = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)
#             # T√≠nh trung b√¨nh ƒë·ªô s√°ng theo t·ª´ng d√≤ng
#             row_avg = np.mean(binary, axis=1)
#             # T√¨m c√°c d√≤ng c√≥ ƒë·ªô tr·∫Øng g·∫ßn nh∆∞ tuy·ªát ƒë·ªëi
#             white_lines = np.where(row_avg > 245)[0]
#             # Gom c√°c d√≤ng tr·∫Øng li√™n ti·∫øp th√†nh c√°c c·ª•m
#             white_blocks = []
#             for k, g in groupby(enumerate(white_lines), lambda ix: ix[0] - ix[1]):
#                 block = list(map(itemgetter(1), g))
#                 if len(block) >= min_space_height:
#                     white_blocks.append((block[0], block[-1]))
#             # C·∫Øt h√¨nh t·∫°i v·ªã tr√≠ trung t√¢m c·ªßa m·ªói v√πng tr·∫Øng
#             img_height = img.shape[0]
#             prev_cut = 0
#             count = 1
#             for top, bottom in white_blocks:
#                 middle = (top + bottom) // 2
#                 # Ki·ªÉm tra n·∫øu v√πng c·∫Øt ƒë·ªß l·ªõn ƒë·ªÉ kh√¥ng b·ªã c·∫Øt tr√∫ng ch·ªØ
#                 if middle - prev_cut > 200:
#                     crop = img[prev_cut:middle, :]
#                     # out_path = os.path.join(output_folder, f"{os.path.basename(image_path).split('.')[0]}_part_{count}.png")
#                     out_path = get_next_filename('1', output_folder, 'jpg')
#                     cv2.imwrite(out_path, crop)
#                     print(f"‚úÖ ƒê√£ l∆∞u: {out_path}")
#                     count += 1
#                     prev_cut = middle
#             # C·∫Øt ph·∫ßn c√≤n l·∫°i n·∫øu v·∫´n c√≤n d∆∞ d∆∞·ªõi
#             if img_height - prev_cut > 200:
#                 crop = img[prev_cut:, :]
#                 out_path = get_next_filename('1', output_folder, 'jpg')
#                 cv2.imwrite(out_path, crop)
#                 print(f"‚úÖ ƒê√£ l∆∞u: {out_path}")

#         print(f"{tot} Ho√†n t·∫•t c·∫Øt ·∫£nh.")
#     except:
#         getlog()

def merge_images(image_folder, output_folder=None, target_height="2000"):
    try:
        target_height = int(target_height) if target_height.isdigit() else 2000
        image_files = get_file_in_folder_by_type(image_folder, '.jpg')
        if not image_files:
            image_files = get_file_in_folder_by_type(image_folder, '.png')
        if not image_files:
            print(f'Kh√¥ng t√¨m th·∫•y file ·∫£nh (jpg, png) trong th∆∞ m·ª•c {image_folder}')
            return
        if not output_folder:
            output_folder = os.path.join(image_folder, 'merge_images')
        os.makedirs(output_folder, exist_ok=True)
        group_idx = 0  # ƒê·∫øm nh√≥m
        current_height = 0  # T·ªïng chi·ªÅu cao hi·ªán t·∫°i
        images_to_merge = []  # Danh s√°ch ·∫£nh cho m·ªôt nh√≥m

        for img_file in image_files:
            img = Image.open(os.path.join(image_folder, img_file))
            img_height = img.height

            # Ki·ªÉm tra t·ªïng chi·ªÅu cao hi·ªán t·∫°i
            if current_height + img_height > target_height:
                save_merged_images(images_to_merge, output_folder)
                group_idx += 1
                current_height = 0
                images_to_merge = []
            images_to_merge.append(img)
            current_height += img_height
        # G·ªôp c√°c ·∫£nh c√≤n l·∫°i
        if images_to_merge:
            save_merged_images(images_to_merge, output_folder)

    except Exception as e:
        print(f"L·ªói: {e}")
        getlog()
    
def save_merged_images(images, output_folder):
    try:
        total_width = max(img.width for img in images)
        total_height = sum(img.height for img in images)
        merged_image = Image.new('RGB', (total_width, total_height))
        y_offset = 0
        for img in images:
            merged_image.paste(img, (0, y_offset))
            y_offset += img.height

        # ƒê·∫∑t t√™n file theo t√™n ·∫£nh ƒë·∫ßu v√† cu·ªëi
        first_image_name = os.path.splitext(os.path.basename(images[0].filename))[0]
        last_image_name = os.path.splitext(os.path.basename(images[-1].filename))[0]
        output_name = f"{first_image_name}_to_{last_image_name}.jpg"

        # L∆∞u ·∫£nh g·ªôp
        output_path = os.path.join(output_folder, output_name)
        merged_image.save(output_path, format='JPEG')
        print(f"{thanhcong} ƒê√£ l∆∞u ·∫£nh: {output_path}")

    except Exception as e:
        print(f"L·ªói khi l∆∞u ·∫£nh g·ªôp: {e}")
# def merge_images(image_folder, number_image_per_file="200", direction='vertical'):
#     try:
#         number_image_per_file = int(number_image_per_file) if number_image_per_file.isdigit() else 100
#         # L·∫•y danh s√°ch file ·∫£nh trong th∆∞ m·ª•c
#         image_files = get_file_in_folder_by_type(image_folder, '.jpg')
#         if not image_files:
#             image_files = get_file_in_folder_by_type(image_folder, '.png')
#         if not image_files:
#             print(f'Kh√¥ng t√¨m th·∫•y file ·∫£nh (jpg, png) trong th∆∞ m·ª•c {image_folder}')
#             return
#         output_folder = os.path.join(image_folder, 'merge_images')
#         # T√≠nh s·ªë file g·ªôp t√πy thu·ªôc v√†o t·ªïng s·ªë ·∫£nh
#         total_images = len(image_files)
#         num_files = math.ceil(total_images / number_image_per_file)

#         # Chia danh s√°ch ·∫£nh th√†nh c√°c nh√≥m
#         group_size = math.ceil(total_images / num_files)  # S·ªë ·∫£nh m·ªói nh√≥m
#         groups = [image_files[i:i + group_size] for i in range(0, total_images, group_size)]
        
#         for group_idx, group in enumerate(groups):
#             images = [Image.open(os.path.join(image_folder, img)) for img in group]
            
#             # T·∫°o ·∫£nh g·ªôp cho t·ª´ng nh√≥m
#             if direction == 'vertical':
#                 total_width = max(img.width for img in images)
#                 total_height = sum(img.height for img in images)
#                 merged_image = Image.new('RGB', (total_width, total_height))
#                 y_offset = 0
#                 for img in images:
#                     merged_image.paste(img, (0, y_offset))
#                     y_offset += img.height
#             elif direction == 'horizontal':
#                 total_width = sum(img.width for img in images)
#                 total_height = max(img.height for img in images)
#                 merged_image = Image.new('RGB', (total_width, total_height))
#                 x_offset = 0
#                 for img in images:
#                     merged_image.paste(img, (x_offset, 0))
#                     x_offset += img.width
            
#             # L∆∞u ·∫£nh g·ªôp cho t·ª´ng nh√≥m
#             output_path = os.path.join(image_folder, f'merged_group_{group_idx + 1}.jpg')
#             merged_image.save(output_path, format='JPEG')
#             print(f"ƒê√£ l∆∞u ·∫£nh g·ªôp c·ªßa nh√≥m {group_idx + 1} t·∫°i: {output_path}")

#     except Exception as e:
#         print(f"L·ªói: {e}")
#         getlog()
# def merge_images(image_folder, direction='vertical'):
#     try:
#         image_files = get_file_in_folder_by_type(image_folder, '.jpg')
#         if not image_files:
#             image_files = get_file_in_folder_by_type(image_folder, '.png')
#         if not image_files:
#             print(f'Kh√¥ng t√¨m th·∫•y file ·∫£nh(jpg, png) trong th∆∞ m·ª•c {image_folder}')
#             return
#         output_path = os.path.join(image_folder, 'merge_imange.jpg')
#         images = [Image.open(os.path.join(image_folder, img)) for img in image_files]
#         if direction == 'vertical':
#             total_width = max(img.width for img in images)
#             total_height = sum(img.height for img in images)
#             merged_image = Image.new('RGB', (total_width, total_height))
#             y_offset = 0
#             for img in images:
#                 merged_image.paste(img, (0, y_offset))
#                 y_offset += img.height  # Di chuy·ªÉn v·ªã tr√≠ d·ªçc theo chi·ªÅu cao c·ªßa ·∫£nh hi·ªán t·∫°i
#         elif direction == 'horizontal':
#             total_width = sum(img.width for img in images)
#             total_height = max(img.height for img in images)
#             merged_image = Image.new('RGB', (total_width, total_height))
#             x_offset = 0
#             for img in images:
#                 merged_image.paste(img, (x_offset, 0))
#                 x_offset += img.width  # Di chuy·ªÉn v·ªã tr√≠ ngang theo chi·ªÅu r·ªông c·ªßa ·∫£nh hi·ªán t·∫°i
#         merged_image.save(output_path, format='JPEG')
#         print(f"ƒê√£ l∆∞u ·∫£nh g·ªôp t·∫°i: {output_path}")
#         return output_path
#     except:
#         getlog()

def add_subtitle_into_video(video_path, subtitle_file, lang='vi', pitch=1.0, speed=1.0, speed_talk="1.0"):
    try:
        current_folder, file_name = get_current_folder_and_basename(video_path)
        output_video_folder = os.path.join(current_folder, 'output_videos')
        temp_audio_folder = os.path.join(current_folder, 'temp_audios')
        temp_audios = []
        output_video_path = os.path.join(output_video_folder, file_name)
        os.makedirs(output_video_folder, exist_ok=True)
        os.makedirs(temp_audio_folder, exist_ok=True)
        file_list_path = os.path.join(current_folder, "filelist.txt")
        with open(file_list_path, "w") as f:
            with open(subtitle_file, "r", encoding="utf-8") as infile:
                lines = infile.readlines()
                idx, cnt = 0, 0
                while idx < len(lines):
                    if lines[idx].strip().isdigit():
                        idx += 1
                    if '-->' in lines[idx]:
                        start_time_str, end_time_str = lines[idx].strip().split('-->')
                        start_time = convert_time_to_seconds(start_time_str.strip()) or 0
                        end_time = convert_time_to_seconds(end_time_str.strip()) or 0
                        if end_time > start_time:
                            idx += 1
                            content = lines[idx].strip()
                            cnt += 1
                            temp_audio_path = os.path.join(temp_audio_folder, f'{cnt}.wav')
                            text_to_audio_with_xtts(content, temp_audio_path, lang, speed_talk=speed_talk)
                            f.write(f"file '{temp_audio_path}'\n")
                            temp_audios.append(temp_audio_path)
                    idx += 1

        concatenated_audio = os.path.join(current_folder, 'final_audio.wav')
        run_command_ffmpeg(['ffmpeg', '-y', '-f', 'concat', '-safe', '0', '-i', 'filelist.txt', '-c', 'copy', concatenated_audio])
        if pitch != 1.0 or speed != 1.0:
            adjusted_audio = os.path.join(current_folder, 'adjusted_audio.wav')
            audio_filters = []
            if speed != 1.0:
                audio_filters.append(f"atempo={speed}")
            if pitch != 1.0:
                audio_filters.append(f"rubberband=pitch={pitch}")
            run_command_ffmpeg(['ffmpeg', '-y', '-i', concatenated_audio, '-filter:a', ",".join(audio_filters), adjusted_audio])
            concatenated_audio = adjusted_audio

        video_duration = float(subprocess.check_output(['ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', video_path]))
        audio_duration = float(subprocess.check_output(['ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', concatenated_audio]))
        adjusted_video = None
        final_adjusted_audio = None
        if speed != 1.0 or audio_duration > video_duration:
            speed_factor = video_duration / audio_duration
            adjusted_video = os.path.join(current_folder, 'adjusted_video.mp4')
            run_command_ffmpeg(['ffmpeg', '-y', '-i', video_path, '-filter:v', f"setpts={1/speed_factor}*PTS", adjusted_video])
            video_path = adjusted_video
        else:
            speed_factor = audio_duration / video_duration
            final_adjusted_audio = os.path.join(current_folder, 'final_adjusted_audio.wav')
            run_command_ffmpeg(['ffmpeg', '-y', '-i', concatenated_audio, '-filter:a', f"atempo={speed_factor}", final_adjusted_audio])
            concatenated_audio = final_adjusted_audio
        run_command_ffmpeg([
            'ffmpeg', '-y', '-i', video_path, '-i', concatenated_audio,
            '-c:v', 'copy', '-map', '0:v:0', '-map', '1:a:0', '-shortest', output_video_path
        ])
        
        remove_file(file_list_path)
        if adjusted_video:
            remove_file(adjusted_video)
        if final_adjusted_audio:
            remove_file(final_adjusted_audio)
        for temp_audio in temp_audios:
            remove_file(temp_audio)
        print(f" --> Th√™m ph·ª• ƒë·ªÅ v√† chuy·ªÉn thanh gi·ªçng n√≥i th√†nh c√¥ng --> {output_video_path}")
    except:
        print("C√≥ l·ªói khi th√™m ph·ª• ƒë·ªÅ v√† chuy·ªÉn th√†nh gi·ªçng n√≥i !!!")

def get_ref_speaker_by_language(language):
    if language == 'vi': 
        speaker_wav = os.path.join(current_dir, "models\\ref_data\\vi.wav")
    elif language == 'en':
        speaker_wav = os.path.join(current_dir, "models\\ref_data\\en.wav")
    elif language == 'zh':
        speaker_wav = os.path.join(current_dir, "models\\ref_data\\zh.wav")
    else:
        print(f'{thatbai} Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {language}')
        return None
    return speaker_wav

def split_text_into_chunks(text, max_length):
    chunks = []
    while len(text) > max_length:
        mid_point = max_length // 2
        before_mid = text[:max_length]

        # T√¨m d·∫•u "," g·∫ßn nh·∫•t v·ªõi mid_point
        split_point = before_mid.rfind(",", 0, mid_point + (max_length // 4))
        if split_point == -1:
            split_point = before_mid.rfind(" ", 0, mid_point + (max_length // 4))
            if split_point == -1:
                split_point = max_length  # Chia t·∫°i max_length

        first_text = text[:split_point].strip()
        chunks.append(f'{first_text}.')
        text = text[split_point + 1:].strip()

    if text:
        if not text.endswith('.'):
            chunks.append(f'{text}.')
        else:
            chunks.append(f'{text}')
    
    return chunks

def get_next_filename(name="1", save_folder=".", img_type="png"):
    try:
        file_name = int(name)
    except:
        file_name = 1
    file_path = os.path.join(save_folder, f"{file_name}.{img_type}")
    while os.path.exists(file_path):
        file_name += 1
        file_path = os.path.join(save_folder, f"{file_name}.{img_type}")
    return file_path

# def capture_region(x1, y1, x2, y2, save_folder, name, img_type):
#     bbox = (min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2))
#     img = ImageGrab.grab(bbox)
#     file_path = get_next_filename(name=name, save_folder=save_folder, img_type=img_type)
#     img.save(file_path)
#     print(f"‚úÖ ƒê√£ l∆∞u ·∫£nh: {file_path}")
def capture_region(x1, y1, x2, y2, save_folder, name, img_type='png'):
    # ƒê·∫£m b·∫£o t·ªça ƒë·ªô n·∫±m ƒë√∫ng th·ª© t·ª±
    left, top = min(x1, x2), min(y1, y2)
    right, bottom = max(x1, x2), max(y1, y2)

    # Ch·ª•p v√πng ·∫£nh m√†n h√¨nh
    img = ImageGrab.grab(bbox=(left, top, right, bottom))

    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    os.makedirs(save_folder, exist_ok=True)

    # L∆∞u ·∫£nh v·ªõi ch·∫•t l∆∞·ª£ng cao
    save_path = get_next_filename(name=name, save_folder=save_folder, img_type=img_type)
    if img_type.lower() == 'jpg' or img_type.lower() == 'jpeg':
        img = img.convert("RGB")
        img.save(save_path, format='JPEG', quality=100, subsampling=0)
    else:
        img.save(save_path, format=img_type.upper())

    print(f"{thanhcong} ·∫¢nh ƒë√£ l∆∞u t·∫°i: {save_path}")

def take_screenshot(save_folder="screenshots", name="1", img_type='png'):
    if not check_folder(save_folder):
        return

    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")

    app = ctk.CTk()
    app.withdraw()  # ·∫®n c·ª≠a s·ªï ch√≠nh

    def select_area():
        try:
            top = ctk.CTkToplevel(app)
            top.attributes("-fullscreen", True)
            top.attributes("-alpha", 0.3)
            top.configure(bg='black')
            top.attributes("-topmost", True)

            canvas = ctk.CTkCanvas(top, bg='black', highlightthickness=0)
            canvas.pack(fill="both", expand=True)
            canvas.configure(cursor="cross")

            start = {'x': 0, 'y': 0}
            rect = [None]

            def on_mouse_down(event):
                start['x'], start['y'] = event.x, event.y
                rect[0] = canvas.create_rectangle(start['x'], start['y'], start['x'], start['y'], outline='red', width=2)

            def on_mouse_move(event):
                if rect[0]:
                    canvas.coords(rect[0], start['x'], start['y'], event.x, event.y)

            def on_mouse_up(event):
                top.destroy()
                capture_region(start['x'], start['y'], event.x, event.y, save_folder, name, img_type)

            canvas.bind("<ButtonPress-1>", on_mouse_down)
            canvas.bind("<B1-Motion>", on_mouse_move)
            canvas.bind("<ButtonRelease-1>", on_mouse_up)
        except:
            getlog()

    print("üì∏ Ch·∫ø ƒë·ªô ch·ª•p ·∫£nh ƒë√£ b·∫≠t. Nh·∫•n chu·ªôt ph·∫£i ƒë·ªÉ b·∫Øt ƒë·∫ßu. Ctrl + Q ƒë·ªÉ tho√°t.")

    def loop_check():
        if mouse.is_pressed(button="right"):
            select_area()
            while mouse.is_pressed(button="right"):
                sleep(0.2)
        if keyboard.is_pressed("ctrl+q"):
            print("üõë Tho√°t ch·ª©c nƒÉng ch·ª•p ·∫£nh.")
            app.quit()
        else:
            app.after(100, loop_check)

    app.after(100, loop_check)
    app.mainloop()

def number_to_vietnamese_with_units(text):
    # B·∫£n ƒë·ªì ƒë∆°n v·ªã v√† c√°ch ƒë·ªçc
    unit_mapping = {
        "h": "gi·ªù",
        "m": "m√©t",
        "cm": "xen ti m√©t",
        "mm": "mi li m√©t",
        "km": "ki l√¥ m√©t",
        "s": "gi√¢y",
        "ms": "mi li gi√¢y"
    }

    # H√†m chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ
    def number_to_vietnamese(number):
        if not (0 <= number < 1_000_000_000_000_000):
            return "S·ªë n·∫±m ngo√†i ph·∫°m vi h·ªó tr·ª£."
        words = {
            0: "kh√¥ng",
            1: "m·ªôt",
            2: "hai",
            3: "ba",
            4: "b·ªën",
            5: "nƒÉm",
            6: "s√°u",
            7: "b·∫£y",
            8: "t√°m",
            9: "ch√≠n"
        }
        units = ["", "ngh√¨n", "tri·ªáu", "t·ª∑", "ngh√¨n t·ª∑", "tri·ªáu t·ª∑"]

        def read_three_digits(num, is_end):
            hundreds = num // 100
            tens = (num % 100) // 10
            ones = num % 10
            result = []
            # ƒê·ªçc h√†ng trƒÉm
            if hundreds > 0:
                result.append(f"{words[hundreds]} trƒÉm")
            elif not is_end and (tens > 0 or ones > 0):
                result.append("kh√¥ng trƒÉm")
            # ƒê·ªçc h√†ng ch·ª•c v√† h√†ng ƒë∆°n v·ªã
            if tens > 1:
                result.append(f"{words[tens]} m∆∞∆°i")
                if ones == 1:
                    result.append("m·ªët")
                elif ones == 5:
                    result.append("lƒÉm")
                elif ones > 0:
                    result.append(words[ones])
            elif tens == 1:
                result.append("m∆∞·ªùi")
                if ones > 0:
                    result.append(words[ones])
            elif tens == 0:
                if ones > 0:
                    if hundreds > 0 or (hundreds == 0 and not is_end):
                        result.append("linh")
                    result.append(words[ones])

            return " ".join(result)

        parts = []
        idx = 0
        while number > 0:
            num_part = number % 1000
            if num_part > 0:
                if number < 1000:
                    part = read_three_digits(num_part, is_end=True)
                else:
                    part = read_three_digits(num_part, is_end=False)
                if idx > 0:
                    part += f" {units[idx]}"
                parts.append(part)
            number //= 1000
            idx += 1

        return " ".join(reversed(parts))

    # H√†m x·ª≠ l√Ω t·ª´ng c·ª•m s·ªë v√† ƒë∆°n v·ªã
    def convert(match):
        number = int(match.group(1))
        unit = match.group(2)
        if unit:
            unit_word = unit_mapping.get(unit, unit)
            return f"{number_to_vietnamese(number)} {unit_word}"
        return number_to_vietnamese(number)

    # Bi·ªÉu th·ª©c ch√≠nh quy t√¨m s·ªë v√† s·ªë k√®m ƒë∆°n v·ªã
    pattern = r"\b(\d+)(h|m|cm|mm|km|s|ms)?\b"
    return re.sub(pattern, convert, text)

def number_to_english(number):
    words = {
        0: "zero", 1: "one", 2: "two", 3: "three", 4: "four", 5: "five",
        6: "six", 7: "seven", 8: "eight", 9: "nine", 10: "ten",
        11: "eleven", 12: "twelve", 13: "thirteen", 14: "fourteen",
        15: "fifteen", 16: "sixteen", 17: "seventeen", 18: "eighteen",
        19: "nineteen", 20: "twenty", 30: "thirty", 40: "forty",
        50: "fifty", 60: "sixty", 70: "seventy", 80: "eighty", 90: "ninety"
    }
    units = ["", "thousand", "million", "billion", "trillion"]

    def read_three_digits(num):
        hundreds = num // 100
        tens = (num % 100) // 10
        ones = num % 10
        result = []

        if hundreds > 0:
            result.append(f"{words[hundreds]} hundred")

        if tens >= 2:
            result.append(words[tens * 10])
            if ones > 0:
                result.append(words[ones])
        elif tens == 1 or ones > 0:
            result.append(words[tens * 10 + ones])

        return " ".join(result)

    if number == 0:
        return "zero"

    parts = []
    idx = 0
    while number > 0:
        num_part = number % 1000
        if num_part > 0:
            part = read_three_digits(num_part)
            if idx > 0:
                part += f" {units[idx]}"
            parts.append(part)
        number //= 1000
        idx += 1

    return " ".join(reversed(parts))

# √Ånh x·∫° ƒë∆°n v·ªã
unit_mapping = {
    "km": "kilometers", "m": "meters", "cm": "centimeters", "mm": "millimeters",
    "h": "hours", "s": "seconds", "ms": "milliseconds", "%": "percent"
}

def process_fractions(text):
    # X·ª≠ l√Ω ph√¢n s·ªë (v√≠ d·ª•: 444/7000)
    def convert_fraction(match):
        numerator = int(match.group(1))
        denominator = int(match.group(2))
        return f"{number_to_english(numerator)} over {number_to_english(denominator)}"
    
    return re.sub(r"(\d+)/(\d+)", convert_fraction, text)

def process_decimals(text):
    # X·ª≠ l√Ω s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: 55.65)
    def convert_decimal(match):
        integer_part = int(match.group(1))
        decimal_part = match.group(2)
        decimal_words = " ".join([number_to_english(int(digit)) for digit in decimal_part])
        return f"{number_to_english(integer_part)} point {decimal_words}"
    
    return re.sub(r"(\d+)\.(\d+)", convert_decimal, text)

def process_units(text):
    # X·ª≠ l√Ω s·ªë c√≥ ƒë∆°n v·ªã (v√≠ d·ª•: 5649km ‚Üí "five thousand six hundred forty-nine kilometers")
    def convert_units(match):
        number = int(match.group(1))
        unit = match.group(2)
        unit_word = unit_mapping.get(unit, unit)
        return f"{number_to_english(number)} {unit_word}"
    
    return re.sub(r"(\d+)(km|m|cm|mm|h|s|ms|%)\b", convert_units, text)

def process_integers(text):
    # X·ª≠ l√Ω s·ªë nguy√™n (v√≠ d·ª•: 5649 ‚Üí "five thousand six hundred forty-nine")
    def convert_integer(match):
        return number_to_english(int(match.group(0)))
    
    return re.sub(r"\b\d+\b", convert_integer, text)

def number_to_english_with_units(text):
    text = process_fractions(text)  # Chuy·ªÉn ƒë·ªïi ph√¢n s·ªë tr∆∞·ªõc
    text = process_decimals(text)   # Chuy·ªÉn ƒë·ªïi s·ªë th·∫≠p ph√¢n
    text = process_units(text)      # Chuy·ªÉn ƒë·ªïi s·ªë c√≥ ƒë∆°n v·ªã
    text = process_integers(text)   # Cu·ªëi c√πng, chuy·ªÉn ƒë·ªïi s·ªë nguy√™n
    return text

def merge_txt_files(input_dir, output_dir=None, group_file=50):
    try:
        txt_files = get_file_in_folder_by_type(input_dir, '.txt') or []
        if len(txt_files) < 2:
            print(f'Ph·∫£i c√≥ √≠t nh·∫•t 2 file .txt trong th∆∞ m·ª•c {input_dir} ƒë·ªÉ g·ªôp file')
            return
        if not output_dir:
            output_dir = os.path.join(input_dir, 'output')
            os.makedirs(output_dir, exist_ok=True)
        step_count = min(len(txt_files), group_file)
        # Chia danh s√°ch file th√†nh t·ª´ng nh√≥m step_count file
        for i in range(0, len(txt_files), step_count):
            batch_files = txt_files[i:i+step_count]
            merged_content = ""
            
            for file in batch_files:
                with open(os.path.join(input_dir, file), 'r', encoding='utf-8') as f:
                    merged_content += f.read() + '\n'
                    
            
            # T·∫°o t√™n file ƒë·∫ßu ra t·ª´ file ƒë·∫ßu v√† cu·ªëi trong batch
            first_file_name = os.path.splitext(batch_files[0])[0]
            last_file_name = os.path.splitext(batch_files[-1])[0]
            output_filename = f'{first_file_name} - {last_file_name}.txt'
            output_path = os.path.join(output_dir, output_filename)
            # merged_content = cleaner_text(merged_content, language='en')
            # Ghi n·ªôi dung ƒë√£ gh√©p v√†o t·ªáp m·ªõi
            with open(output_path, 'w', encoding='utf-8') as out_file:
                out_file.write(merged_content)
            
            print(f"ƒê√£ t·∫°o {output_filename}")
    except:
        getlog()


def errror_handdle_with_temp_audio(input_folder, file_start_with='temp_audio', speed=1.1, img_path="", file_name="1", output_audio_path=None, output_video_path=None):
    try:
        if not output_audio_path:
            merge_audio_path = os.path.join(input_folder, "merge_audios", f"{file_name}.wav")
            if not output_video_path:
                output_video_path = os.path.join(input_folder, f"{file_name}.mp4")
            merge_audio_use_ffmpeg(input_folder, file_name, file_start_with=file_start_with)
            output_audio_path = os.path.join(input_folder, "merge_audios", f"{file_name}_speed.wav")
            command_audio = [ 'ffmpeg', '-i', merge_audio_path, '-filter:a', f"atempo={speed},volume={1}", '-vn', output_audio_path, '-y' ]
            run_command_ffmpeg(command_audio, False)

        if not output_video_path:
            basename = os.path.basename(output_audio_path)
            file_name = basename.split('.')[0]
            output_video_path = os.path.join(input_folder, f'{file_name}.mp4')
        if os.path.exists(output_audio_path):
            print("‚úÖ √Çm thanh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω xong!")
            if torch.cuda.is_available():
                print("---> D√πng GPU ƒë·ªÉ xu·∫•t video...")
                command = [ "ffmpeg", "-y", "-loop", "1", "-i", img_path, "-i", output_audio_path, "-c:v", "h264_nvenc", "-cq", "23", "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k", "-shortest", "-threads", "4", output_video_path ]
            else:
                command = f'ffmpeg -y -loop 1 -i "{img_path}" -i "{output_audio_path}" -c:v libx264 -tune stillimage -c:a aac -b:a 128k -shortest -threads 4 "{output_video_path}"'
            if run_command_ffmpeg(command, False):
                print("‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
            else:
                print(f'{thatbai} T·∫°o video th·∫•t b·∫°i')
        else:
            print("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω √¢m thanh!")
    except:
        getlog()

def process_image_to_video_with_movement(img_path, audio_path, output_video_path, fps=25, zoom_factor=1.2, movement_speed=0.6, hide=False, subtitle_text=None):
    try:
        # Ki·ªÉm tra ·∫£nh t·ªìn t·∫°i
        if not os.path.exists(img_path):
            print("File ·∫£nh kh√¥ng t·ªìn t·∫°i!")
            return False

        # M·∫∑c ƒë·ªãnh th·ªùi l∆∞·ª£ng l√† 1 gi√¢y n·∫øu kh√¥ng c√≥ audio
        duration = 1.0
        has_audio = audio_path and os.path.exists(audio_path)

        if has_audio:
            # L·∫•y th·ªùi l∆∞·ª£ng audio n·∫øu c√≥
            audio_info = get_audio_info(audio_path)
            duration = audio_info.get('duration', None)
            if not duration:
                print("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin file √¢m thanh.")
                return False

        total_frames = int(fps * float(duration))

        img, height, width = get_image_size_by_cv2(img_path)
        if height > 2000:
            scale_ratio = 700 / width
            width = 700
            height = int(height * scale_ratio)
            img = cv2.resize(img, (width, height))

        temp_video_path = "temp_video.mp4"
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(temp_video_path, fourcc, fps, (width, height))

        current_zoom_factor = zoom_factor
        offset_x, offset_y = 0, 0
        movement_types = ['down', 'up', 'zoom_in', 'zoom_out']
        if width > height:
            movement_types += ['left', 'right']
        movement_type = random.choice(movement_types)

        if height > 2000:
            movement_type = 'up'
            movement_speed = 1.5
            print(f'{canhbao} ·∫¢nh {img_path} c√≥ chi·ªÅu cao l·ªõn h∆°n 2000')

        print(f'movement_type: {movement_type}')
        if movement_type == 'down':
            offset_y = 0
            offset_x = (int(width * current_zoom_factor) - width) // 2
        elif movement_type == 'up':
            offset_y = int(height * current_zoom_factor) - height
            offset_x = (int(width * current_zoom_factor) - width) // 2
        elif movement_type == 'right':
            offset_x = int(width * current_zoom_factor) - width
        elif movement_type == 'left':
            pass

        for frame_idx in range(total_frames):
            if movement_type == 'right':
                offset_x += movement_speed
                if offset_x + width >= int(width * current_zoom_factor):
                    offset_x = int(width * current_zoom_factor) - width
                offset_y = (int(height * current_zoom_factor) - height) // 2
            elif movement_type == 'left':
                offset_x -= movement_speed
                if offset_x <= 0:
                    offset_x = 0
                offset_y = (int(height * current_zoom_factor) - height) // 2
            elif movement_type == 'down':
                offset_y += movement_speed
                if offset_y + height >= int(height * current_zoom_factor):
                    offset_y = int(height * current_zoom_factor) - height
                offset_x = (int(width * current_zoom_factor) - width) // 2
            elif movement_type == 'up':
                offset_y -= movement_speed
                if offset_y <= 0:
                    offset_y = 0
                offset_x = (int(width * current_zoom_factor) - width) // 2
            elif movement_type == 'zoom_in':
                current_zoom_factor += 0.001
                if current_zoom_factor > zoom_factor * 1.2:
                    current_zoom_factor = zoom_factor * 1.2
            elif movement_type == 'zoom_out':
                current_zoom_factor -= 0.001
                if current_zoom_factor < 0.7:
                    current_zoom_factor = 0.7

            while int(height * current_zoom_factor) < height or int(width * current_zoom_factor) < width:
                current_zoom_factor += 0.01
            zoomed_width = int(width * current_zoom_factor)
            zoomed_height = int(height * current_zoom_factor)

            while zoomed_width < width or zoomed_height < height:
                current_zoom_factor += 0.01
                zoomed_width = int(width * current_zoom_factor)
                zoomed_height = int(height * current_zoom_factor)

            zoomed_img = cv2.resize(img, (zoomed_width, zoomed_height))

            if offset_x + width > zoomed_width:
                offset_x = zoomed_width - width
            if offset_y + height > zoomed_height:
                offset_y = zoomed_height - height

            cropped_frame = zoomed_img[int(offset_y):int(offset_y + height), int(offset_x):int(offset_x + width)]
            if subtitle_text:
                font_scale = 1.0
                font_thickness = 2
                font = cv2.FONT_HERSHEY_SIMPLEX
                text_size, _ = cv2.getTextSize(subtitle_text, font, font_scale, font_thickness)
                text_x = (width - text_size[0]) // 2
                text_y = height - 50
                cv2.putText(cropped_frame, subtitle_text, (text_x, text_y), font, font_scale, (255, 255, 255), font_thickness + 2, cv2.LINE_AA)
                cv2.putText(cropped_frame, subtitle_text, (text_x, text_y), font, font_scale, (0, 0, 0), font_thickness, cv2.LINE_AA)

            out.write(cropped_frame)
        out.release()

        # Gh√©p √¢m thanh n·∫øu c√≥, n·∫øu kh√¥ng th√¨ ch·ªâ t·∫°o video kh√¥ng √¢m
        if has_audio:
            if torch.cuda.is_available():
                command = [
                    "ffmpeg", "-y", "-i", temp_video_path, "-i", audio_path,
                    "-c:v", "h264_nvenc", "-cq", "23", "-preset", "p4", "-pix_fmt", "yuv420p",
                    "-c:a", "aac", "-b:a", "128k", "-r", str(fps), "-threads", "4", output_video_path
                ]
            else:
                command = [
                    "ffmpeg", "-y", "-i", temp_video_path, "-i", audio_path,
                    "-c:v", "libx264", "-tune", "stillimage", "-pix_fmt", "yuv420p",
                    "-c:a", "aac", "-b:a", "128k", "-r", str(fps), "-threads", "4", output_video_path
                ]
        else:
            # N·∫øu kh√¥ng c√≥ audio, ch·ªâ gi·ªØ l·∫°i video
            command = [
                "ffmpeg", "-y", "-i", temp_video_path,
                "-c:v", "libx264", "-pix_fmt", "yuv420p", "-r", str(fps),
                "-an",  # kh√¥ng th√™m √¢m thanh
                output_video_path
            ]

        if not run_command_ffmpeg(command, hide):
            return False

        if os.path.exists(temp_video_path):
            os.remove(temp_video_path)
        return True
    except:
        getlog()
        return False
    
# def process_image_to_video_with_movement(img_path, audio_path, output_video_path, fps=25, zoom_factor=1.2, movement_speed=0.6, hide=False, subtitle_text=None):
#     try:
#         # Ki·ªÉm tra file ƒë·∫ßu v√†o
#         if not os.path.exists(img_path) or not os.path.exists(audio_path):
#             print("File ·∫£nh ho·∫∑c √¢m thanh kh√¥ng t·ªìn t·∫°i!")
#             return False
        
#         # L·∫•y th·ªùi l∆∞·ª£ng audio
#         audio_info = get_audio_info(audio_path)
#         duration = audio_info.get('duration', None)
#         if not duration:
#             print("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin file √¢m thanh.")
#             return False
#         total_frames = int(fps * float(duration))

#         img, height, width = get_image_size_by_cv2(img_path)
#         if height > 2000:
#             scale_ratio = 700 / width
#             width = 700
#             height = int(height * scale_ratio)
#             img = cv2.resize(img, (width, height))

#         temp_video_path = "temp_video.mp4"
#         fourcc = cv2.VideoWriter_fourcc(*'mp4v')
#         out = cv2.VideoWriter(temp_video_path, fourcc, fps, (width, height))

#         current_zoom_factor = zoom_factor
#         offset_x, offset_y = 0, 0
#         movement_types = ['down', 'up', 'zoom_in', 'zoom_out']
#         if width > height:
#             movement_types = ['down', 'up', 'zoom_in', 'zoom_out', 'left', 'right']
#         movement_type = random.choice(movement_types)
#         if height > 2000:
#             movement_type = 'up'
#             movement_speed = 1.5
#             print(f'{canhbao} ·∫¢nh {img_path} c√≥ chi·ªÅu cao l·ªõn h∆°n 2000')

#         print(f'movement_type: {movement_type}')
#         if movement_type == 'down':
#             offset_y = 0
#             offset_x = (int(width * current_zoom_factor) - width) // 2
#         elif movement_type == 'up':
#             offset_y = int(height * current_zoom_factor) - height
#             offset_x = (int(width * current_zoom_factor) - width) // 2
#         elif movement_type == 'right':
#             offset_x = int(width * current_zoom_factor) - width
#         elif movement_type == 'left':
#             pass

#         for frame_idx in range(total_frames):
#             # C·∫≠p nh·∫≠t chuy·ªÉn ƒë·ªông ch·ªâ khi frame n·∫±m trong chu k·ª≥ movement_step
#             if movement_type == 'right':
#                 offset_x += movement_speed
#                 if offset_x + width >= int(width * current_zoom_factor):  # Gi·ªõi h·∫°n chi·ªÅu ngang
#                     offset_x = int(width * current_zoom_factor) - width
#                 # ƒê·∫∑t ·∫£nh theo ph∆∞∆°ng d·ªçc ·ªü trung t√¢m
#                 offset_y = (int(height * current_zoom_factor) - height) // 2
#             elif movement_type == 'left':
#                 offset_x -= movement_speed
#                 if offset_x <= 0:  # Gi·ªõi h·∫°n chi·ªÅu ngang (tr√°i)
#                     offset_x = 0
#                 # ƒê·∫∑t ·∫£nh theo ph∆∞∆°ng d·ªçc ·ªü trung t√¢m
#                 offset_y = (int(height * current_zoom_factor) - height) // 2
#             elif movement_type == 'down':
#                 offset_y += movement_speed
#                 if offset_y + height >= int(height * current_zoom_factor):
#                     offset_y = int(height * current_zoom_factor) - height
#                 # ƒê·∫∑t ·∫£nh theo ph∆∞∆°ng ngang ·ªü trung t√¢m
#                 offset_x = (int(width * current_zoom_factor) - width) // 2
#             elif movement_type == 'up':
#                 offset_y -= movement_speed
#                 if offset_y <= 0:
#                     offset_y = 0
#                 # ƒê·∫∑t ·∫£nh theo ph∆∞∆°ng ngang ·ªü trung t√¢m
#                 offset_x = (int(width * current_zoom_factor) - width) // 2
#             elif movement_type == 'zoom_in':
#                 current_zoom_factor += 0.001  # TƒÉng d·∫ßn h·ªá s·ªë zoom
#                 if current_zoom_factor > zoom_factor*1.2:  # Gi·ªõi h·∫°n zoom in t·ªëi ƒëa
#                     current_zoom_factor = zoom_factor*1.2
#             elif movement_type == 'zoom_out':
#                 current_zoom_factor -= 0.001  # Gi·∫£m d·∫ßn h·ªá s·ªë zoom
#                 if current_zoom_factor < 0.7:  # Gi·ªõi h·∫°n zoom out t·ªëi thi·ªÉu
#                     current_zoom_factor = 0.7

#             while int(height * current_zoom_factor) < height or int(width * current_zoom_factor) < width:
#                 current_zoom_factor += 0.01  # TƒÉng nh·∫π h·ªá s·ªë zoom
#             zoomed_width = int(width * current_zoom_factor)
#             zoomed_height = int(height * current_zoom_factor)
#             # Ki·ªÉm tra v√† ƒëi·ªÅu ch·ªânh n·∫øu k√≠ch th∆∞·ªõc zoom nh·ªè h∆°n k√≠ch th∆∞·ªõc g·ªëc
#             while zoomed_width < width or zoomed_height < height:
#                 current_zoom_factor += 0.01  # TƒÉng h·ªá s·ªë zoom nh·∫π
#                 zoomed_width = int(width * current_zoom_factor)
#                 zoomed_height = int(height * current_zoom_factor)
#             # Resize ·∫£nh theo k√≠ch th∆∞·ªõc zoom
#             zoomed_img = cv2.resize(img, (zoomed_width, zoomed_height))
#             # Ki·ªÉm tra t·ªça ƒë·ªô c·∫Øt ·∫£nh
#             if offset_x + width > zoomed_width:
#                 offset_x = zoomed_width - width  # ƒêi·ªÅu ch·ªânh offset_x
#             if offset_y + height > zoomed_height:
#                 offset_y = zoomed_height - height  # ƒêi·ªÅu ch·ªânh offset_y
#             # C·∫Øt ·∫£nh theo v·ªã tr√≠ offset
#             cropped_frame = zoomed_img[int(offset_y):int(offset_y + height), int(offset_x):int(offset_x + width)]
#             if subtitle_text:
#                 font_scale = 1.0
#                 font_thickness = 2
#                 font = cv2.FONT_HERSHEY_SIMPLEX
#                 text_size, _ = cv2.getTextSize(subtitle_text, font, font_scale, font_thickness)
#                 text_x = (width - text_size[0]) // 2
#                 text_y = height - 50  # 50px c√°ch m√©p d∆∞·ªõi
#                 cv2.putText(cropped_frame, subtitle_text, (text_x, text_y), font, font_scale, (255, 255, 255), font_thickness + 2, cv2.LINE_AA)  # vi·ªÅn ƒëen
#                 cv2.putText(cropped_frame, subtitle_text, (text_x, text_y), font, font_scale, (0, 0, 0), font_thickness, cv2.LINE_AA)  # text tr·∫Øng
#             out.write(cropped_frame)
#         # Gi·∫£i ph√≥ng t√†i nguy√™n
#         out.release()

#         # Gh√©p √¢m thanh v√†o video b·∫±ng ffmpeg
#         if torch.cuda.is_available():
#             command = ["ffmpeg", "-y", "-i", temp_video_path, "-i", audio_path, "-c:v", "h264_nvenc", "-cq", "23", "-preset", "p4", "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k", "-r", str(fps), "-threads", "4", output_video_path]
#         else:
#             command = ["ffmpeg", "-y", "-i", temp_video_path, "-i", audio_path, "-c:v", "libx264", "-tune", "stillimage", "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k", "-r", str(fps) , "-threads", "4", output_video_path]
#         if not run_command_ffmpeg(command, hide):
#             return False

#         # X√≥a file t·∫°m
#         if os.path.exists(temp_video_path):
#             os.remove(temp_video_path)
#         return True
#     except:
#         getlog()
#         return False

# def process_image_to_video_with_movement(img_path, audio_path, output_video_path, fps=60, zoom_factor=1.2, hide=False, subtitle_text=None):
#     try:
#         if not os.path.exists(img_path) or not os.path.exists(audio_path):
#             print("File ·∫£nh ho·∫∑c √¢m thanh kh√¥ng t·ªìn t·∫°i!")
#             return False
        
#         audio_info = get_audio_info(audio_path)
#         duration = audio_info.get('duration', None)
#         if not duration:
#             print("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin file √¢m thanh.")
#             return False
#         total_frames = int(fps * float(duration))

#         img, height, width = get_image_size_by_cv2(img_path)
#         if width < 600:
#             scale_ratio = 700 / width
#             width = 700
#             height = int(height * scale_ratio)
#             img = cv2.resize(img, (width, height))

#         frame_height = 1080
#         frame_width = width

#         total_scroll_pixels = height - frame_height
#         if total_scroll_pixels <= 0:
#             print("·∫¢nh kh√¥ng ƒë·ªß cao ƒë·ªÉ l∆∞·ªõt.")
#             return False

#         pixels_per_frame = int(total_scroll_pixels / total_frames)

#         temp_video_path = "temp_video.mp4"
#         fourcc = cv2.VideoWriter_fourcc(*'mp4v')
#         out = cv2.VideoWriter(temp_video_path, fourcc, fps, (frame_width, frame_height))

#         for frame_idx in range(total_frames):
#             float_offset_y = frame_idx * pixels_per_frame
#             offset_y = int(round(float_offset_y))
#             offset_y = min(offset_y, total_scroll_pixels)

#             cropped_frame = img[offset_y:offset_y + frame_height, 0:frame_width]

#             if subtitle_text:
#                 font_scale = 1.0
#                 font_thickness = 2
#                 font = cv2.FONT_HERSHEY_SIMPLEX
#                 text_size, _ = cv2.getTextSize(subtitle_text, font, font_scale, font_thickness)
#                 text_x = (frame_width - text_size[0]) // 2
#                 text_y = frame_height - 50
#                 cv2.putText(cropped_frame, subtitle_text, (text_x, text_y), font, font_scale, (255, 255, 255), font_thickness + 2, cv2.LINE_AA)
#                 cv2.putText(cropped_frame, subtitle_text, (text_x, text_y), font, font_scale, (0, 0, 0), font_thickness, cv2.LINE_AA)

#             out.write(cropped_frame)

#         out.release()

#         if torch.cuda.is_available():
#             command = ["ffmpeg", "-y", "-i", temp_video_path, "-i", audio_path,
#                        "-c:v", "h264_nvenc", "-cq", "23", "-preset", "p4",
#                        "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k",
#                        "-r", str(fps), "-threads", "4", output_video_path]
#         else:
#             command = ["ffmpeg", "-y", "-i", temp_video_path, "-i", audio_path,
#                        "-c:v", "libx264", "-tune", "stillimage",
#                        "-pix_fmt", "yuv420p", "-c:a", "aac", "-b:a", "128k",
#                        "-r", str(fps), "-threads", "4", output_video_path]

#         if not run_command_ffmpeg(command, hide):
#             return False

#         remove_file(temp_video_path)
#         remove_file(audio_path)
#         return True

#     except Exception as e:
#         print(f"L·ªói: {e}")
#         return False
    
def get_image_size_by_cv2(path):
    try:
        pil_img = Image.open(path).convert("RGB")
        cv_img = cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)
        height, width = pil_img.size[1], pil_img.size[0]
        return cv_img, height, width
    except Exception as e:
        print(f"Error: {e}")
        return None, None, None
    
def split_txt_by_chapter(input_file, max_chapters_per_file="50", start_text='ch∆∞∆°ng'):
    if not start_text:
        print(f'H√£y nh·∫≠p t·ª´ kh√≥a b·∫Øt ƒë·∫ßu ƒë·ªÉ l√†m m·ªëc t√°ch file.')
        return
    if not max_chapters_per_file:
        print(f'H√£y nh·∫≠p s·ªë ch∆∞∆°ng trong 1 file.')
        return
    if not input_file:
        print(f'H√£y ch·ªçn file txt ch·ª©a c√°c ch∆∞∆°ng truy·ªán.')
        return
    try:
        max_chapters_per_file = int(max_chapters_per_file) if max_chapters_per_file.isdigit() else None
        if not max_chapters_per_file:
            print(f'{thatbai} S·ªë ch∆∞∆°ng {max_chapters_per_file} kh√¥ng h·ª£p l·ªá!')
            return
        output_folder = os.path.dirname(input_file)
        with open(input_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
        lines = [llll.strip() for llll in lines if llll.strip()]
        chapter_count = 0
        contents = []
        start_chapter = None
        before_chapter = 0
        skip_char = ['ch·ªØ', 'ch∆∞∆°ng n√†y', 'ti·∫øp t·ª•c', 'c√°c b·∫°n', 'ƒë·ªçc', 'truy·ªán', 'th∆∞·ªüng', 'phi·∫øu', 'x·∫øp h·∫°ng', 'v√© th√°ng', 's√°ch', 'v·ªã tr√≠']
        for idx, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
            is_true = line.lower().strip().startswith(start_text)
            if start_text=='ch∆∞∆°ng' or start_text=='chuong':
                is_true = line.lower().startswith("ch∆∞∆°ng") or line.lower().startswith("chuong")
            if is_true:
                chuong = line.split(' ')[1].lower()
                if ':' in chuong:
                    chuong = chuong.split(':')[0]
                elif '-' in chuong:
                    chuong = chuong.split('-')[0]
                chuong_int = int(chuong) if chuong.isdigit() else 0
                if chuong_int == 0:
                    number_in_text = ['m·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 's√°u', 'b·∫£y', 't√°m', 'ch√≠n', 'm∆∞·ªùi', 'th·ª©']
                    if chuong not in number_in_text:
                        if not chuong[0].isdigit():
                            continue
                        if ',' in chuong:
                            continue
                        is_next = any(word.lower() in line.lower() for word in skip_char)
                        if is_next:
                            continue
                try:
                    is_next_false = lines[idx+1].lower().startswith("ch∆∞∆°ng") or lines[idx+1].lower().startswith("chuong")
                except:
                    is_next_false = True
                if is_next_false:
                    continue 
                chapter_count += 1
                # if chuong_int != before_chapter + 1:
                #     print(f'{thatbai} khong tim thay chuong {before_chapter + 1}')
                if start_chapter is None:
                    start_chapter = chapter_count
                # before_chapter = chuong_int
                
                if chapter_count > 1 and (chapter_count - start_chapter + 1) > max_chapters_per_file:
                    output_file = os.path.join(output_folder, f"{start_chapter} - {chapter_count-1}.txt")
                    with open(output_file, "w", encoding="utf-8") as out_f:
                        for content in contents:
                            out_f.writelines(f"{content}\n")
                    contents = []
                    start_chapter = chapter_count
            contents.append(line)
        if contents:
            output_file = os.path.join(output_folder, f"{start_chapter} - {chapter_count}.txt")
            with open(output_file, "w", encoding="utf-8") as out_f:
                for line in contents:
                    out_f.writelines(f"{line}\n")
        
        print("T√°ch file ho√†n t·∫•t.")
    except:
        getlog()
        print(f'C√≥ l·ªói khi t√°ch file {input_file}')
#------------------------------------------------commond--------------------------------------------------

def get_custom_model(folder):
    custom_model = os.path.join(folder, 'model.pth')
    if os.path.exists(custom_model):
        return custom_model
    custom_model = os.path.join(folder, 'best_model.pth')
    if os.path.exists(custom_model):
        return custom_model
    models = get_file_in_folder_by_type(folder, '.pth', start_with='best_model_', noti=False) or []
    if len(models) > 0:
        return os.path.join(folder, models[-1])
    models = get_file_in_folder_by_type(folder, '.pth', start_with='checkpoint_') or []
    if len(models) > 0:
        return os.path.join(folder, models[-1])
    return None


def load_config():
    if os.path.exists(config_path):
        config = get_json_data(config_path)
        if 'output_folder' not in config:
            config['output_folder'] = ""
        if 'folder_story' not in config:
            config['folder_story'] = ""
    else:
        config = {
            "download_folder":"",
            "auto_start": False,
            "is_delete_video": False,
            "is_move": False,
            "show_browser": False,
            "time_check_auto_upload": "0",
            "time_check_status_video": "0",
            "download_by_video_url": "",

            "file_name": "",
            "start_index": "1",
            "videos_edit_folder": "",
            "first_cut": "0",
            "end_cut": "0",
            "is_delete_original_audio": False,
            "background_music_path": "",
            "background_music_volume": "",
            "speed_up": "1.05",
            "max_zoom_size": "1.1",
            "is_random_zoom": False,
            "vertical_position": 'center',
            "horizontal_position": 'center',
            "flip_video": False,
            "water_path": "",
            "watermark_scale": "1,1",
            "vertical_watermark_position": "50",
            "horizontal_watermark_position": "50",
            "top_bot_overlay": "0,0",
            "left_right_overlay": "0,0",

            "audios_edit_folder": "",
            "audio_speed": "1", 
            "pitch_factor": "1",
            "cut_silence": False,
            "aecho": "100",

            "audio_edit_path": "", 
            "convert_multiple_record": False, 
            "video_get_audio_path": "", 
            "video_get_audio_url": "",

            "language_tts": "vi",
            "speed_talk": "1.1",
            "folder_story": "",
            "output_folder": "",
            "current_channel": "Ti√™n Gi·ªõi Audio",
            "channels": ["Ti√™n Gi·ªõi Audio"]
        }
    save_to_json_file(config, config_path)
    return config

supported_languages = {
      "cn": "Chinese",
      "en1": "English",
      "en2": "English",
      "vi": "Vietnamese"
}


special_word = {
    "******":"",
    "*****":"",
    "****":"",
    "***":"",
    "**":"",
    "*":"",
    "<>>":"",
    "<‚óÜ>":"",
    "‚óÜ":"",
    "<>":"",
    "‚û°":"",
    "‚úì‚úì‚úì":"",
    "‚úì‚úì":"",
    "‚úì":"",
    "‚ô£ ‚ô£ ‚ô£ ‚ô£ ‚ô£ ‚ô£":"",
    "‚ô£ ‚ô£ ‚ô£ ‚ô£ ‚ô£":"",
    "‚ô£ ‚ô£ ‚ô£ ‚ô£":"",
    "‚ô£ ‚ô£ ‚ô£":"",
    "‚ô£ ‚ô£":"",
    "‚ô£":"",
    "^":"",
    "++++++":"",
    "+++++":"",
    "++++":"",
    "+++":"",
    "++":"",
    " +":" c·ªông ",
    "+":"",
    "~~~~~~":"",
    "~~~~~":"",
    "~~~~":"",
    "~~~":"",
    "~~":"",
    "~":"",
    "(": ".",
    ")": ".",
    "}": ".",
    "{": ".",
    "[": " ",
    "]": " ",
    "|": " ",
    "„Äê": " ",
    "„Äë": " ",
    ";": ".",
    "------": "",
    "-----": "",
    "----": "",
    "---": "",
    "--": "",
    "-": " ",
    "_": " ",
    ":": ".",
    "......": "",
    "...": ".",
    "..": ".",
    ",,,": ",",
    ",,": ",",
    "', ": ", ",
    "',": ",",
    "'. ": ".",
    "'.": ".",
    "  .": ".",
    " .": ".",
    "  ,": ",",
    " ,": ",",
    ",'": ",",
    ".'": ".",
    " '": " ",
    "' ": " ",
    " ,. ": ".",
    ",. ": ",",
    ",.": ",",
    ",  .": ",",
    ", .": ",",
    ".  ,": ".",
    ". ,": ".",
    ".,": ".",
    ",.": ".",
    "...": ".",
    "..": ".",
    "‚Ä¶": "",
    "‚Äú": "",
    "‚Äù": "",
    "‚Äò": "",
    "‚Äô": "",
    "\"": "",
    "@@novelbin@@": "",
    "@": "",
    "#": "",
    "   ": " ",
    "  ": " ",
    "¬´":"",
    "¬ª":"",
    "`":"",
    "(Œ©–îŒ©)":"",
    "Œ©–îŒ©":"",
    "======":"",
    "=====":"",
    "====":"",
    "===":"",
    "==":"",
    "":"",
    "‚úî":"",
    "en thunderscans.com":"",
    "thunderscans.com":"",
    "vng.com":"",
    "ng.com":"",
    "‚ô°":"",
    "‚ô•":"",
    "‚òÜ‚òÜ‚òÜ":"",
    "‚òÜ‚òÜ":"",
    "‚òÜ":"",
    "‚òë":"",
    "‚ñº":"",
    "‚Üê":"",
    "‚òÜ":"",
    "!?":".",
    "?!":".",
    "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî":" ",
    "‚Äî‚Äî‚Äî‚Äî‚Äî":" ",
    "‚Äî‚Äî‚Äî‚Äî":" ",
    "‚Äî‚Äî‚Äî":" ",
    "‚Äî‚Äî":" ",
    " ‚Äî ": " ",
    "‚Äî ":" ",
    "‚Äî":"-",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":""
}

loai_bo_tieng_anh = {
    "???": "?",
    "??": "?",
    " ?": "?",
    "?.": "?",
    "!.": ".",
    "!!!!": "!",
    "!!!": "!",
    "!!": "!",
    " !": "!",
    "Enhance your reading experience by removing ads for as low as $1!": "",
    "20 chapters ahead on my patreon: /David_Lord": "",
    "20 chapters ahead on patreon: /David_Lord": "",
    "15 chapters ahead on my patreon: /David_Lord": "",
    "15 chapters ahead on <a>patreon: /David_Lord": "",
    "https://novelbin.me/":"",
    "T/L: Please support me here:  ]":"",
    "T/L: Subscribe for a membership on my Buy Me a Coffee page and receive 15 extra chapters upon joining, along with daily updates of one chapter:":"",
    "If anyone is facing the issue of payment on Ko-Fi, please contact me on":"",
    "T/L: Please support me and read further chapters here here:":"",
    "T/L: Please support me AND read further chapters here:":"",
    "Additional Info:":"",
    "/revengerscans":"",
    "So... How is the first chapter?": "",
    "Discord Server:": "",
    "https://discord.gg/hPxxHTeyFy": "",
    "Do you like his decision?": "",
    "https://discord.gg/Qv4K3rZv": "",
    ".gg/hPxxHTeyFy": "",
    "You can support me and read additional chapters (15 chapters ahead) on my /David_Lord": "",
    "Thanks :D": "",
    ":D": "",
    ":c": "",
    "TL: Hanguk": "",
    "Review the novel on novelupdate:": "",
    "/series/creating-heavenly-laws/": "",
    "When we reach 5 reviews, I will upload a bonus chapter!!": "",
    "(Health lol haha :D)": "",
    "I need POWAAAA :D": "",
    "Help me buy a new computer :D /DavidLord": "",
    "15 chapters ahead on patreon: /David_Lord": "",
    "Guys I uploaded the chapters even in the summer, don't I deserve a reward?": "",
    "Kidding, jokes aside can you help me buy a new computer? It has been months, but I still don't have enough money T.T I'm embarassed": "",
    "Well, if you want to donate here's the link: /DavidLord": "",
    "You've been reborn as a primordial":"",
    "You've succeeded in completing the quest.":"",
    "Apologies for the shorter chapter, I've decided to cut some content to make the story flow better.":"",
    "www":"",
    "Translator:":"",
    "549690339":"",
    "LV. ":"level ",
    "To be continued":"",
    "FOR THE FASTEST RELEASES":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "/":" over ",
    "%":" percent"
}

loai_bo_tieng_viet = {
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "???": ".",
    "??": ".",
    " ?": ".",
    "?": ".",
    "?.": ".",
    "!!!!": ".",
    "!!!": ".",
    "!!": ".",
    "!.": ".",
    " !": ".",
    "!": ".",
    "NPC": "n·ªù p√™ x√™",
    " nit∆° ": " ni t∆° ",
    "gentoons.com": "",
    "con toons.com": "",
    "(1/2)": "",
    "(2/2)": "",
    " +": " c·ªông ",
    "T√¨m ki·∫øm m√†u xanh da tr·ªùi, c√≥ th·ªÉ ƒë·ªçc ch∆∞∆°ng ti·∫øp theo nhanh nh·∫•t": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "t r u y e n f u l l.": "",
    "t r u y e n f u l l": "",
    "/": " ",
    "$": " ƒë√¥",
    "vnƒë": "ƒë·ªìng",
    "%": " ph·∫ßn trƒÉm",
    "&": " v√† ",
    " = ": " b·∫±ng ",
    " > ": " l·ªõn h∆°n ",
    " < ": " b√© h∆°n ",
    "ch·∫•m c.o.m":"",
    "No√£n T√¢m r∆°i v√†o v√≤ng xo√°y y√™u, h·∫≠n, d√¢y d∆∞a kh√¥ng d·ª©t gi·ªØa thi√™n ƒë√†ng v√† ƒë·ªãa c√πng Ho·∫Øc Thi√™n K√¨nh": "",
    "Minh Hoa Th∆∞·ªùng m∆° th·∫•y m√¨nh l√† thi√™n kim gi·∫£, li·ªÅn n·ªó l·ª±c l·∫•y l√≤ng huynh tr∆∞·ªüng tr√™n danh nghƒ©a c·ªßa m√¨nh": "",
    "L√¢m Kh√™ xuy√™n v·ªÅ 30 nƒÉm tr∆∞·ªõc trong 1 ti·ªÉu vi·ªán ·ªçp ·∫πp, b·ªóng d∆∞ng c√≥ th√™m 1 ng∆∞·ªùi ch·ªìng, th√¢n m·∫∑c qu√¢n trang, √°nh m·∫Øt nh√¨n c√¥ ch·ª©a s·ª± gh√©t b·ªè": "",
    "Th·ª© tr∆∞·ªüng n·ªØ √în gia √°c ƒë·ªôc tr√®o ƒë∆∞·ª£c l√™n gi∆∞·ªùng c·ªßa Th√°i T·ª≠, nh∆∞ng m√† kh√¥ng ng·ªù ƒë∆∞·ª£c h·∫Øn c√†ng ng·ªß c√†ng hƒÉng": "",
    "TRUY·ªÜN TRANH ƒêANG HOT": "",
    "Ph·∫ø v·∫≠t? R√°c r∆∞·ªüi? Ch·ªâ c·∫ßn ƒëi theo b·∫£n t·ªça, t·∫•t c·∫£ s·∫Ω tr·ªü th√†nh anh h√πng th·∫ø gian!": "",
    "H·∫Øn xuy√™n qua v√† b∆∞·ªõc v√†o th·∫ø gi·ªõi 10.000 nƒÉm sau, nh√¢n lo·∫°i di·ªát vong, v√µ h·ªçc l√™n ƒë·∫øn ƒë·ªânh cao, m√† h·∫Øn l√† tia l·ª≠a duy nh·∫•t!": "",
    "M·ªôt ƒë·∫°i ma ho√†ng ƒë·∫ßy th·ªß ƒëo·∫°n t√†n ƒë·ªôc, s·∫Ω l√†m th·∫ø n√†o ƒë·ªÉ khi·∫øn cho m·ªôt gia t·ªôc nh·ªè b√© tr·ªü m√¨nh th√†nh m·ªôt gia t·ªôc ƒë·ª©ng tr√™n t·∫•t c·∫£?": "",
    "Th·ªÉ ch·∫•t b√¨nh th∆∞·ªùng? Th·∫ßn th√¥ng kh√≥ luy·ªán? ƒê·ªën ng·ªô li·ªÅn xong vi·ªác!": "",
    "b·∫°n ƒëang ƒë·ªçc truy·ªán copy t·∫°i":"",
    "b·∫°n ƒëang ƒë·ªçc chuy·ªán t·∫°i":"",
    "b·∫°n ƒëang ƒë·ªçc truy·ªán t·∫°i":"",
    "b·∫°n ƒëang xem t·∫°i":"",
    "text ƒë∆∞·ª£c l·∫•y t·∫°i":"",
    "ngu·ªìn t·∫°i http://":"",
    "ngu·ªìn http":"",
    "b·∫°n ƒëang xem truy·ªán ƒë∆∞·ª£c sao ch√©p t·∫°i":"",
    "ƒë·ªçc truy·ªán online m·ªõi nh·∫•t ·ªü":"",
    "xem t·∫°i truyenfull.vn":"",
    "ngu·ªìn truyenfull.vn":"",
    "truyenfull.vn":"",
    "truy·ªán full":"",
    "truy·ªán ƒë∆∞·ª£c l·∫•y t·∫°i":"",
    "truy·ªán ƒë∆∞·ª£c copy t·∫°i":"",
    "truy·ªán copy t·∫°i":"",
    "--- o ---":"",
    "-- o --":"",
    "www.":"",
    "www":"",
    "'": "",
    "nh√≥m d·ªãch:":"",
    "friendship":"",
    "truyenyy.xyz":"",
    "(conduongbachu.net l√† web ch√≠nh ch·ªß duy nh·∫•t c·ªßa truy·ªán...)":"",
    "t. r. u. y. ·ªá. n. y.": "",
    "t. r. u. y. ·ªá. n. y": "",
    "t.r.u.y.·ªá.n.y.": "",
    "t.r.u.y.·ªá.n.y": "",
    "b·∫°n ƒëang ƒë·ªçc truy·ªán copy t·∫°i": "",
    "truy·ªán ƒëƒÉng nhanh nh·∫•t v√† n mi·ªÖn ph√≠ t·∫°i": "",
    "truy·ªán ƒëƒÉng nhanh nh·∫•t v√† mi·ªÖn ph√≠ t·∫°i": "",
    "b·∫°n c√≥ th·ªÉ ƒë·ªçc ch∆∞∆°ng tr√™n": "",
    "truy·ªán ƒëƒÉng nhanh nh·∫•t v√†  mi·ªÖn ph√≠ t·∫°i": "",
    "c·∫≠p nh·∫≠t ch∆∞∆°ng m·ªõi s·ªõm nh·∫•t t·∫°i website": "",
    "truy c·∫≠p ngay truyenqqq.com ƒë·ªÉ √πng h·ªô nh√≥m d·ªãch": "",
    "truyen qqq ƒë·ªÉ ·ªßng h·ªô nh·ªõm d·ªãch": "",
    "qq ƒë·ªÉ ·ªßng h·ªô nh·ªõm d·ªãch": "",
    "tin t·ª©c v·ªÅ v∆∞∆°ng qu·ªëc webtoon": "",
    "webtoon kingdom th·ªè m·ªõi 468": "",
    "webtoon kingdom th·ªè m·ªõi": "",
    "trang web c√≥ v·∫•n ƒë·ªÅ ph·ªï bi·∫øn nh·∫•t webtoon kingdom": "",
    "webtoon kingdom newto": "",
    "truy c·∫≠p ng√†y truyengo to.com ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "truy c·∫≠p ngay truyengo to.com ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "web moon kingdom th·ªè m·ªõi": "",
    "trang web cung c·∫•p webtoon nhanh nh·∫•t towangguk view rabbit 468": "",
    "trang web cung c·∫•p webtoon nhanh nh·∫•t towangguk view rabbit": "",
    "trang web cung c·∫•p webtoon nhanh nh·∫•t": "",
    "trang web cung c·∫•p webtoon nhanh": "",
    "wtok3468.com ho·∫∑c": "",
    "truy c·∫≠p ngay truyenco": "",
    "c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "trang web cung c·∫•p toon m√πa xu√¢n nhanh nh·∫•t": "",
    "toon kingdom th·ªè m·ªõi 468": "",
    "toon kingdom th·ªè m·ªõi": "",
    "trang web b√≥i to√°n c√≥ th·ªÉ webtoon kingdom new rabbit 468": "",
    "trang web b√≥i to√°n c√≥ th·ªÉ webtoon kingdom new rabbit": "",
    "truy c·∫≠p ngay truy·ªáng qto.com ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "truy c·∫≠p ngay truy·ªán qto.com ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "qto.com ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "nh√† cung c·∫•p webtoon nhanh nh·∫•t": "",
    "c√≥ th·ªÉ trang web h√∫t webtoon kingdom new rabbit 468": "",
    "c√≥ th·ªÉ trang web h√∫t webtoon kingdom new rabbit": "",
    "trang web c√≥ v·∫•n ƒë·ªÅ": "",
    "webtoon kingdom new togae 468": "",
    "webtoon kingdom new togae": "",
    "trang web b√≥i to√°n c√≥ th·ªÉ": "",
    "v∆∞∆°ng qu·ªëc webtoon ryu tokki": "",
    "webtoon kingdom ryu tokki 468": "",
    "webtoon kingdom ryu tokki": "",
    "https. nertoktale cou": "",
    "https. nertoktale": "",
    "https.nertoktale": "",
    "trang web vi·ªác l√†m nhanh nh·∫•t": "",
    "trang web b√≥i to√°n": "",
    "webtoon kingdom v√πng ƒë·∫•t m·ªõi": "",
    "truy c·∫≠p ngay truyenq": "",
    "v∆∞∆°ng qu·ªëc new rabbit 468": "",
    "v∆∞∆°ng qu·ªëc new rabbit": "",
    "to.com ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t v·ªÅ truy·ªán": "",
    "truy c·∫≠p ngay truyengo": "",
    "trang web c√≥ nhi·ªÅu v·∫•n ƒë·ªÅ nh·∫•t": "",
    "truy c·∫≠p ngay": "",
    "jun kingdom th·ªè m·ªõi 468": "",
    "jun kingdom th·ªè m·ªõi": "",
    "qq ƒë·ªÉ ·ªßng h·ªô nh√≥m d·ªãch": "",
    "∆∞∆°ng qu·ªëc webtoon": "",
    "trang web l·ªõn": "",
    "ttps. netoki": "",
    "amentok1468": "",
    "vua truy·ªán tranh m·ªõi c·ªßa webtoon 468": "",
    "vua truy·ªán tranh m·ªõi c·ªßa webtoon": "",
    "qt ƒë ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "v∆∞∆°ng qu·ªëc webtoon": "",
    "trang web giao h√†ng t·∫≠n nh√† nhanh nh·∫•t": "",
    "s kentokia68.co": "",
    "truyeng qto ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "nttps. kiaar com": "",
    "webtoon v∆∞∆°ng qu·ªëc th·ªè 468": "",
    "webtoon v∆∞∆°ng qu·ªëc th·ªè": "",
    "loki m·ªõi 468": "",
    "loki m·ªõi": "",
    "truyen go to ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "trang web xem b√≥i ƒë·∫øm s·ªë": "",
    "web moon kingdom 1468": "",
    "web moon kingdom": "",
    "trang web ki·∫øm thu·∫≠t nhanh nh·∫•t": "",
    "vƒÉn b·∫£n g·ªëc kingdom": "",
    "trang web b√≥i to√°n h√∫t m√°u ·∫£o,": "",
    "trang web b√≥i to√°n h√∫t m√°u ·∫£o": "",
    "webtoon kingdom hai ch√∫ th·ªè 468": "",
    "webtoon kingdom hai ch√∫ th·ªè": "",
    "c√≥ th·ªÉ trang web b√≥i to√°n h√∫t": "",
    "trang web gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ ng·∫Øn nh·∫•t": "",
    "c√≥ th·ªÉ trang web b√≥i to√°n": "",
    "ftps. newtoki 68.cov": "",
    "ƒë·ªÉ c·∫≠p nh·∫≠t c√°c th√¥ng tin m·ªõi nh·∫•t": "",
    "webtoon vua jinyu rabbit": "",
    "trang web ƒëi·ªán tho·∫°i c√≥ v·∫•n ƒë·ªÅ nhanh nh·∫•t": "",
    "moon kingdom th·ªè m·ªõi 468": "",
    "moon kingdom th·ªè m·ªõi": "",
    "c√≥ th·ªÉ new rabbit 468": "",
    "c√≥ th·ªÉ new rabbit": "",
    "truy·ªán tranh vua th·ªè 468": "",
    "truy·ªán tranh vua th·ªè": "",
    "trang web gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ nhanh nh·∫•t": "",
    "vua truy·ªán tranh tr√™n web": "",
    "c√≥ th·ªÉ trang web vƒÉn b·∫£n nhanh,": "",
    "c√≥ th·ªÉ trang web vƒÉn b·∫£n nhanh": "",
    "v∆∞∆°ng qu·ªëc web th·ªè m·ªõi 468": "",
    "v∆∞∆°ng qu·ªëc web th·ªè m·ªõi": "",
    "trang web ch√≠nh c√≥ th·ªÉ": "",
    "truy c·∫≠p ng√†y truyen go to com ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "r·∫•t mong ƒë∆∞·ª£c gi√∫p ƒë·ª° buyengqto.—Å–æ–º": "",
    "truy c·∫≠p ng√†y truyenqgto ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "trang web gari golden fortune": "",
    "v∆∞∆°ng qu·ªëc l·ªõn th·ªè m·ªõi 468": "",
    "v∆∞∆°ng qu·ªëc l·ªõn th·ªè m·ªõi": "",
    "m·ªôt trang web gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ v·ªÅ ph·ª• √¢m,": "",
    "m·ªôt trang web gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ v·ªÅ ph·ª• √¢m": "",
    "ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn nh·∫•t ƒë·ªÉ ki·ªÉm tra v√† giao h√†ng,": "",
    "ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn nh·∫•t ƒë·ªÉ ki·ªÉm tra v√† giao h√†ng": "",
    "vua truy·ªán tranh jinuyuromi468": "",
    "s. nent x1468,com": "",
    "truy c·∫≠p ng√†y truyendoto com ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "trang web kh·∫Øc ch·ªØ nhanh nh·∫•t": "",
    "v∆∞∆°ng qu·ªëc ryutoki 468": "",
    "v∆∞∆°ng qu·ªëc ryutoki": "",
    "web sunguk new rabbit 468": "",
    "web sunguk new rabbit": "",
    "trang web xem b√≥i nhanh nh·∫•t new rabbit 468": "",
    "trang web xem b√≥i nhanh nh·∫•t new rabbit": "",
    "trang web xem b√≥i nhanh nh·∫•t": "",
    "ƒë∆∞·ª£c cung c·∫•p b·ªüi site": "",
    "vua truy·ªán tranh m·ªõi c·ªßa webtoon 468": "",
    "vua truy·ªán tranh m·ªõi c·ªßa webtoon": "",
    "trang web nhanh nh·∫•t": "",
    "trang web cung c·∫•p webtoon ƒë∆∞·ª£c y√™u th√≠ch": "",
    "truy c·∫≠p ng√†y truy·ªán goto ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "truy c·∫≠p ng√†y truyenggo to. c√≤m ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "truyen qoto com ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "ƒë·ªÉ c·∫≠p truyen goto to com ƒë·ªÉ c·∫≠p n nh·∫≠t": "",
    "v∆∞∆°ng qu·ªëc th·ªè ƒë·∫•t 468": "",
    "v∆∞∆°ng qu·ªëc th·ªè ƒë·∫•t": "",
    "truyen goto ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "truy c·∫≠p ng√†y truyengqto ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "qto ƒë·ªÉ c·∫≠p nh·∫≠t": "",
    "c√°c trang web cung c·∫•p webtoon kh√°c": "",
    "th·ªè v∆∞∆°ng qu·ªëc thu·∫ßn khi·∫øt 468": "",
    "th·ªè v∆∞∆°ng qu·ªëc thu·∫ßn khi·∫øt": "",
    "fff": "",
    "fff": "",
    "ntps.": "",
    "tm": "",
    "truyen qto": "",
    "s. newkh com": "",
    "ruyenqqto.co": "",
    "ruyenqqto": "",
    "krrrr.": "",
    "s. new468.co": "",
    "ftps. kimsr com": "",
    "ph·ªï bi·∫øn nh·∫•t s.": "",
    "tenok1468.": "",
    "mentok1468 com": "",
    "truyenqqq": "",
    "https. newtoki468": "",
    "https. nentokias": "",
    "https.nentokias": "",
    "nentokias": "",
    "https.newtoki468": "",
    "newtoki468": "",
    "tuyenggo": "",
    "webtoon kingdom": "",
    "https. newtok1468": "",
    "https.newtok1468": "",
    "newtok1468": "",
    "https. nento": "",
    "https.nento": "",
    "ftps. newtoki": "",
    "https. newtorim": "",
    "https. ewtok1468": "",
    "https.newtorim": "",
    "https. nentoka": "",
    "https.nentoka": "",
    "struyengoto": "",
    "truyengoto": "",
    "kentom 468": "",
    "s nentoki68": "",
    "tps. nemtok1468": "",
    "nemtok1468": "",
    "https newto": "",
    "ewtok1468": "",
    "autengoto": "",
    "newto": "",
    "nento": "",
    "wtok3468": "",
    "newtorim": "",
    "nentoka": "",
    "truyenoo": "",
    "s trentokm88": "",
    "new rabbit 468": "",
    "new rabbit": "",
    "s. netok1": "",
    "s. netoki": "",
    "s mentormse.con": "",
    "th·ªè qu·ªëc gia 468": "",
    "th·ªè qu·ªëc gia": "",
    "trang web ·∫£o": "",
    "th·ªè m·ªõi 468": "",
    "th·ªè m·ªõi": "",
    "th·ªè468": "",
    "tin t·ª©c 468": "",
    "truyenoto": "",
    "th·ªè m√¨ 468": "",
    "th·ªè m√¨": "",
    "truyencoto": "",
    "truyendoto": "",
    "tok1458": "",
    "s. mentok1468.": "",
    "s. tokiasr": "",
    "s. mentokia68": "",
    "s. ria": "",
    "k1468.": "",
    ".seongguk": "",
    "s. ni 68": "",
    "s. ni": "",
    "s. n468 com": "",
    "s. k1468 comi": "",
    "s. k1468": "",
    "s. k146r": "",
    "s. com": "",
    "s. neto": "",
    "nutoki 468": "",
    "nutoki": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "arghhh": "a",
    "s. n con": "",
    "s. nentsk": "",
    "s. ktass cou": "",
    "s 468 comi": "",
    "s. mentok1": "",
    "s newitoki 68": "",
    "s newitoki": "",
    "s. n458 ": "",
    "ttps.": "",
    "s. newfo1": "",
    "comi": "",
    "uyengoto": "",
    ".comi": "",
    "http": "",
    "468.com": "",
    "https.": "",
    ".com": "",
    "ftps.": "",
    "tps.": "",
    "s..co": "",
    "s. 0": "",
    "s. k3": "",
    "s. n1": "",
    "s. ki45": "",
    "s. kias": "",
    "s..": "",
    "s.": "",
}

skip_words = [
    'Êª¥',
    'Âä®',
    'Ë•ø',
    'Èöê',
    '‰Ωõ',
    'Âßö',
    "Ë†ï",
    "ÈöÜ",
    "ËÖæ",
    "Êîπ",
    "Èô¢",
    'Ê•ì',
    'Ê∏ó',
    'Âíª',
    'Âï™',
    'Âëº',
    'ËΩ¨',
    'Âè≤',
    'Ëûç',
    'Âê±',
    'ÏïÑ',
    'Âºπ',
    'Âìó',
    'ÁÜä',
    'ÁÜî',
    'Âóí',
    'Âõû',
    'Á∞å',
    'ÂìÅ',
    'Ìà¨',
    'Í∞Ä',
    'ÌãÄ',
    'Ìóâ',
    'ÌÑ∏',
    'Ïôï',
    'ÌÅ¨',
    'ÌÑ∞',
    'Ïõπ',
    'Í≥µ',
    'Ïø®',
    'Î¨∏',
    'Ïã†',
    'Á•û',
    'Ïûë',
    'Í∞Å',
    'Ï†ú',
    'Ïòà',
    'Ëªä',
    'Íµ≠',
    'Â∏ù',
    'ÁçÖ',
    'ÏÇº',
    'Áµ∂',
    'Îâ¥',
    'Ìïò',
    'Ï¥§',
    'Ìô±',
    'Ìòë',
    'ÏõÖ',
    'ÌÉÅ',
    'Ïã∏',
    'Ìùê',
    'ÎÜí',
    'Ìä∏',
    'Ìåå',
    'Ìó§',
    'Ìõó',
    'Ïä§',
    'Î∞©',
    'Î©à',
    'Îπ†',
    'ÌÅ∞',
    'ÏÜå',
    'ÎÇò',
    'ÎàÑ',
    'Ìåü',
    'ÌÉÄ',
    'ÌÜ†',
    'Îçú',
    'Î∂Ä',
    'Ïö∞',
    'Ï≤ô',
    'Ïö¥',
    'Ïûâ',
    'Ìà≠',
    'Áîü',
    'Îë•',
    'È≠î',
    'Ïßπ',
    'ÏÇ¨',
    'Î∞î',
    'Ï†Ä',
    'Ìûê',
    'Îã¨',
    'Ïß∏',
    'Îçï',
    'Ïø†',
    'Ïì∞',
    'ÌÑ±',
    'ÌõÑ',
    'ÎÜç',
    '„ÖÇ',
    'Î≤à',
    'Ïä•',
    'ÌÅ≠',
    'Ïóê',
    'Î∂ï',
    'Ìúò',
    'ÏõÄ',
    'ÏßÄ',
    'Ìé∏',
    'Ìîº',
    'Ìù†',
    'ÏæÖ',
    'Ìì®',
    'ÏõÉ',
    'Ìë∏',
    'Ïßà',
    'Í∏Å',
    'Îùº',
    'ÌõÖ',
    'Ïßú',
    'Ïûê',
    'Ìóõ',
    'ÎèÑ',
    'Îëê',
    'Î¶¨',
    'ÏΩú',
    'Ìò∏',
    'Î≤å',
    'Ê®ì',
    'Ë°Ä',
    'ËÅñ',
    'ÏØß',
    'Íæ∏',
    'Î•¥',
    'Ïûî',
    'Ïì±',
    'Ïò§',
    '„Ç≥',
    'Ìçº',
    'Ï©å',
    'ÂÆÆ',
    'Ê∞∑',
    'Ï£º',
    'Ïï°',
    'Îã∑',
    'ÌÉì',
    'ÌÅ¥',
    'Ï©ù',
    'Ê£ß',
    'Ïúº',
    'Îëë',
    'Îã§',
    'Ïî®',
    'Îøå',
    'ps.',
    'ÏÉà',
    'Íπú',
    'ÌÇ§',
    'ÎìØ',
    'Î≥¥',
    'Îçî',
    'Ïã±',
    'ÏôÄ',
    'ÎùΩ',
    'Í∏ã',
    'Ï©ê',
    'Î≤Ñ',
    'Ï§ë',
    'Îñ°',
    'Ìôî',
    'Ìï´',
    'Î∞ò',
    'Ìóà',
    'Ïùå',
    'Î∂Å',
    'Ïß†',
    '„Ç∑',
    'tm',
    '‰ªô',
    'ÿ®ÿß',
    'Ïò•',
    'Íº¨',
    'ÏΩ∞',
    'Í¥ë',
    'Í≥†',
    'Ìù•',
    'Ïπ¥',
    'ÏÉ•',
    'Ëó•',
    'œÑŒ±',
    'Ïö±',
    'ÌçΩ',
    'Îìù',
    'Ï≤†',
    'Ìè¨',
    'Îìú',
    'ÿ≥€í',
    'ÿ±',
    'Íπå',
    'Ïä¨',
    'Ïãú',
    'Ìôú',
    'ÍΩâ',
    'ÎÅº',
    'Î∏î',
    'Ï∞®',
    '„Å§',
    'Ïª§',
    'Ïñµ',
    'Â∞è',
    'Î≤Ö',
    'Ïïº',
    'Ï∞î',
    'Íµ¨',
    'Ïù¥',
    'Îπô',
    'Í∑º',
    '◊°◊°',
    'Îã•',
    'Î•µ',
    'Êää',
    'ÌÇ¨',
    'Ïª•',
    'Ï≤ò',
    'Ïñ¥',
    'ÎÖ∏',
    'Â§©',
    'ÂçÉ',
    'Î™®',
    '·üñ',
    'ÂÆÅ',
    '‰ªä',
    'ÏúΩ',
    'Ï±ô',
    'Ìûù',
    'Ìåç',
    'ÍøÄ',
    'Á§æ',
    'ÌÉà',
    'Ïπ´',
    'Ï°∏',
    'Ï±Ñ',
    'ÏïÖ',
    'Î∞ß',
    'Âêà',
    'Ê∞¥',
    'Ïøµ',
    'Ïó≠',
    'Â±±',
    'Âàù',
    'ËÄå',
    'Ïà†',
    'Ìú¥',
    '„ÅÑ',
    'È•≠',
    'Êùæ',
    'ËßÅ',
    'Ïï†',
    'Î¶≠',
    '„Åç',
    'Î∞ï',
    'Í≥Ω',
    'Ìëπ',
    'ÏÇ≠',
    'ÏùÑ',
    'Ï∞©',
    'Èõ∑',
    'Îáå',
    'ÌÉ±',
    '„Éà',
    '‰ª¨',
    '◊î',
    'È§®',
    '‡∏ó',
    'Ìúô',
    'Ïùµ',
    'ÏÇ¥',
    'ÌÉï',
    'Ïªπ',
    'Ï∞å',
    'Í±±',
    '„Éè',
    'Ìïè',
    'Êöó',
    'Ï†ï',
    'Ìéò',
    'Áªì',
    'Îù†',
    'Îî©',
    'Í∑∏',
    'Ïó¨',
    'Ïâ¨',
    'Ïµú',
    '„Åó',
    'Ê≠¶',
    'Îî±',
    'ÿß',
    'ÌâÅ',
    '‚úì',
    'ÿßŸá',
    '„É™',
    'Ïèô',
    'œÄ',
    '‚ñº',
    'Íøà',
    '‚òë',
    '¬°¬ø',
    'Ìè≠',
    'Ï≠à',
    'Íπ°',
    '‚Üê',
    'Îßà',
    'ÌÜ°',
    'Ìõå',
    'Ïç©',
    'Ìåî',
    '‡Æµ',
    'Ï¢Ö',
    'Ìïë',
    'Îπº',
    'Í≥∞',
    '‚òÜ',
    'Ïöî',
    'ŸÑŸà',
    'Ïπµ',
    'Ïïô',
    'Í≥º',
    'Í≥º',
    'ÏßÅ',
    'Ÿ©',
    '„ÅÆ',
    '„Öã',
    'ÏΩ©',
    'Áéã',
    'Î∞±',
    'ÏΩ∏',
    'Êàë',
    'Âàª',
    '‡∏á',
    'ÎÅù',
    'Ïòπ',
    '„Ç§',
    'ÿØ',
    'Îî∏',
    '„É¨',
    '^^',
    'ËÇñ',
    'Ïùë',
    '„ÅÆ',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff',
    'ffffff'
    ]

viet_tat = {
    " ID ": " ai ƒëi ",
    " IP ": " ai pi ",
    " ADN ": " √¢y ƒëi en ",
    " AND ": " √¢y ƒëi en ",
    " DNA ": " ƒëi en √¢y ",
    " IT ": " ai ti ",
    " AI ": " √¢y ai ",
    " VPN ": " vi pi en ",
    " WHO ": " v√™ k√©p h√°t √¥ ",
    " GDP ": " gi ƒëi pi ",
    " CPI ": " xi pi ai ",
    " IPO ": " ai pi √¥ ",
    " KPI ": " c√¢y pi ai ",
    " GPS ": " gi pi ·∫øch ",
    " USB ": " diu ·∫øch bi ",
    " API ": " √¢y pi ai ",
    " GPT ": " gi pi ti ",
    " QR ": " qui r·ªù ",
    " UBND ": " ·ªßy ban nh√¢n d√¢n ",
    " HƒêND ": " h·ªôi ƒë·ªìng nh√¢n d√¢n ",
    " MTTQ ": " m·∫∑t tr·∫≠n t·ªï qu·ªëc ",
    " KT-XH ": " kinh t·∫ø x√£ h·ªôi ",
    " ƒêBQH ": " ƒë·∫°i bi·ªÉu qu·ªëc h·ªôi ",
    " THCS ": " trung h·ªçc c∆° s·ªü ",
    " THPT ": " trung h·ªçc ph·ªï th√¥ng ",
    " KH-CN ": " khoa h·ªçc c√¥ng ngh·ªá ",
    " TCKT ": " t√†i ch√≠nh k·∫ø to√°n ",
    " KHKT ": " khoa h·ªçc k·ªπ thu·∫≠t ",
    " CNTT ": " c√¥ng ngh·ªá th√¥ng tin ",
    " CNPM ": " c√¥ng ngh·ªá ph·∫ßn m·ªÅm ",
    " KH&CN ": " khoa h·ªçc v√† c√¥ng ngh·ªá ",
    " CTTƒêT ": " c·ªïng th√¥ng tin ƒëi·ªán t·ª≠ ",
    " MXH ": " m·∫°ng x√£ h·ªôi ",
    " GPLX ": " gi·∫•y ph√©p l√°i xe ",
    " STK ": " s·ªë t√†i kho·∫£n ",
    " Nƒê-CP ": " n·ªù ƒë√™ x√™ p√™ ",
    " fff ": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": "",
    "fff": ""
}

loi_chinh_ta = {
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "fff":"",
    "ti√™u ƒë·ªÅ (·∫©n)":"",
    " audio ":" au ƒëi √¥ ",
    " id ": " ai ƒëi ",
    " adn ": " √¢y ƒëi en ",
    " and ": " √¢y ƒëi en ",
    " dna ": " ƒëi en √¢y ",
    " vpn ": " vi pi en ",
    " https ": " h√°t t√™ t√™ p√™ ·∫øch ",
    " http ": " h√°t t√™ t√™ p√™ ",
    " who ": " v√™ k√©p h√°t √¥ ",
    " gdp ": " gi ƒëi pi ",
    " cpi ": " xi pi ai ",
    " ipo ": " ai pi √¥ ",
    " kpi ": " c√¢y pi ai ",
    " gps ": " gi pi ·∫øch ",
    " usb ": " diu ·∫øch bi ",
    " api ": " √¢y pi ai ",
    " gpt ": " gi pi ti ",
    " qr ": " qui r·ªù ",
    " ubnd ": " ·ªßy ban nh√¢n d√¢n ",
    " hƒënd ": " h·ªôi ƒë·ªìng nh√¢n d√¢n ",
    " mttq ": " m·∫∑t tr·∫≠n t·ªï qu·ªëc ",
    " kt-xh ": " kinh t·∫ø x√£ h·ªôi ",
    " ƒëbqh ": " ƒë·∫°i bi·ªÉu qu·ªëc h·ªôi ",
    " thcs ": " trung h·ªçc c∆° s·ªü ",
    " thpt ": " trung h·ªçc ph·ªï th√¥ng ",
    " kh-cn ": " khoa h·ªçc c√¥ng ngh·ªá ",
    " tckt ": " t√†i ch√≠nh k·∫ø to√°n ",
    " khkt ": " khoa h·ªçc k·ªπ thu·∫≠t ",
    " cntt ": " c√¥ng ngh·ªá th√¥ng tin ",
    " cnpm ": " c√¥ng ngh·ªá ph·∫ßn m·ªÅm ",
    " kh&cn ": " khoa h·ªçc v√† c√¥ng ngh·ªá ",
    " cttƒët ": " c·ªïng th√¥ng tin ƒëi·ªán t·ª≠ ",
    " mxh ": " m·∫°ng x√£ h·ªôi ",
    " gplx ": " gi·∫•y ph√©p l√°i xe ",
    " stk ": " s·ªë t√†i kho·∫£n ",
    " nƒë-cp ": " n·ªù ƒë√™ x√™ p√™ ",
    "haizz":"hai da",
    "haiz":"hai da",
    "laser":"la gie",
    "lazer":"la gie",
    "laze":"la gie",
    "hongkong":"h·ªìng c√¥ng",
    "gps":"gi pi ·∫øch",
    "walter ppk":"qua t∆° pi pi c√¢y",
    "senan":"sen na",
    "takla makan":"ta la ma can",
    "benadar":"ben na ƒë√°t",
    "somalia":"s√¥ ma li a",
    "km" : "ki l√¥ m√©t",
    "cm" : "xen ti m√©t",
    "mm" : "mi li m√©t",
    "kickboxing": "k√≠t b·ªëc xing",
    "skill": "s·ªù kiu",
    "pro": "p·ªù r·ªì",
    "alo": "a l√¥",
    "out": "au",
    "solo": "s√¥ l√¥",
    "damge": "ƒëƒÉm",
    "studio": "s·ªù tiu ƒëi √¥",
    "ferari": "phe ra ri",
    "over": "ao v·ªù",
    "thinking": "thing king",
    "vali": "va li",
    "iphone": "ai ph√¥n",
    "video": "vi ƒë√™ √¥",
    "youtube": "diu t√∫p",
    "edit": "e ƒë√≠t",
    "viral": "vai r·ªì",
    "add": "√°t",
    "ok": "√¥ k√™",
    "zombie": "giom bi",
    "topping": "top ping",
    " full": " phun",
    "shipper": "s√≠p p∆°",
    "virus": "vi r√∫t",
    " app ": " √°p ",
    " iq ": "ai ki√™u",
    "email": "y meo",
    "game": "ghem",
    "himalaya": "hi ma lay a",
    "sexy": "s√©c xy",
    "album": "an bum",
    "icon": "ai k√¨nh",
    "online": "on lai",
    "offline": "·ªçp lai",
    "chat": "ch√°t",
    "carbon": "c√°c bon",
    "camera": "ca me ra",
    "manga": "man ga",
    "ninja": "ninh gia",
    "ship ": "s√≠p ",
    "baby":"b√¢y bi",
    "wow":"quau",
    "woa":"quoa",
    "internet":"in t∆° n√©t",
    "inter net":"in t∆° n√©t",
    "photo":"ph√¥ t√¥ ",
    "copy":"c√≥p pi",
    "blue":"b·ªù lu",
    "laptop": "l√°p t√≥p",
    "smartphone": "x·ªù m√°t ph√¥n",
    "usb": "diu √©t bi",
    "wi-fi": "quai phai",
    "app": "√°p",
    "chip": "ch√≠p",
    "fan": "phan",
    "monitor": "mo ni t∆°",
    "keyboard": "ki bo",
    "bmw": "bi em ƒë·∫Øp b·ªù liu",
    "bugatti": "bu ga ti",
    "lamborghini": "lam bo ghin ni",
    "ferrari": "phe ra ri",
    "mercedes": "m·∫πc x√™ ƒë√©t",
    "honda": "h√¥n ƒëa",
    "yamaha": "ya ma ha",
    "suzuki": "su zu ki",
    "bus": "xe bu√Ωt",
    "truck": "tr·∫Øc",
    "container": "con tai n∆°",
    "motorbike": "m√¥ t∆° bai",
    "t-shirt": "ti s·ªõt",
    "jeans": "gin",
    "makeup": "m·∫øch c·∫≠p",
    "mascara": "m√°t ca ra",
    "shampoo": "sam pu",
    "skincare": "s·ªù kin ke",
    "game": "gh√™m",
    "live stream": "lai s·ªù trim",
    "like": "lai",
    "comment": "c√≤m men",
    "follow": "pho l√¥",
    "post": "p·ªët",
    "pizza": "pi da",
    "burger": "b∆° g∆°",
    "hotdog": "h√≥t ƒëo√≥c",
    "coca": "c√¥ ca",
    "pepsi": "p√©p xi",
    "snack": "s·ªù n√°ch",
    "ceo": "xi i √¥",
    "manager": "ma ni d∆°",
    "leader": "li ƒë∆°",
    "startup": "s·ªù t√°t ·∫Øp",
    "deadline": "ƒë√©t lai",
    "meeting": "m√≠ tinh",
    "bonus": "b√¢u n·ªõt",
    "gim": "ghim",
    "gym": "ghim",
    "fitness": "ph√≠t n·ªãt",
    "yoga": "d√¥ ga",
    "cardio": "c√°c ƒëi √¥",
    "protein": "p·ªù r√¥ t√™ in",
    "shark":"c√° m·∫≠p",
    "tr√πm h·ª£p": "tr√πng h·ª£p",
    "ho√†ng th√†nh": "ho√†n th√†nh",
    "ƒë√πa d∆∞·ª°n": "ƒë√πa gi·ª°n",
    "x√°c h·∫°i": "s√°t h·∫°i",
    "x√°c th·ªß": "s√°t th·ªß",
    "xinh con": "sinh con",
    "danh con": "ranh con",
    "tr·∫ª danh": "tr·∫ª ranh",
    "nh√≥c danh": "nh√≥c ranh",
    "sinh ƒë·∫πp": "xinh ƒë·∫πp",
    "n·ªØ t·ª´": "n·ªØ t·ª≠",
    "s·∫Øc kh√≠": "s√°t kh√≠",
    "sui x·∫ªo": "xui x·∫ªo",
    "ch·∫≠m d√£i": "ch·∫≠m r√£i",
    "b·ªìn tr·ªìn": "b·ªìn ch·ªìn",
    "lan l√≥c": "lƒÉn l√≥c",
    "cu·ªët": "c√∫t",
    "c∆∞·ªùi ch·ª≠": "c∆∞·ªùi tr·ª´",
    "l·∫ßm b·∫©m": "l·∫©m b·∫©m",
    "tr√≥ng v√°ng": "cho√°ng v√°ng",
    "s√°t ch·∫øt": "x√°c ch·∫øt",
    "gi√≤ x√©t": "d√≤ x√©t",
    "√¢m d∆∞ng": "√¢m d∆∞∆°ng",
    "cao m√†y": "cau m√†y",
    "ch·∫•n an": "tr·∫•n an",
    "s·ª´ng s·ªët": "s·ª≠ng s·ªët",
    "r·ªó r√†nh": "d·ªó d√†nh",
    "v√πngc√°t": "v√πng c√°t",
    "huy·ªÅn ƒë·ªá": "huynh ƒë·ªá",
    "s·ªØa s·ªù": "s·ªØng s·ªù",
    "x·ª©ng s·ªù": "s·ªØng s·ªù",
    "run d·∫©y": "run r·∫©y",
    "tr√†o h·ªèi": "ch√†o h·ªèi",
    "huy√™n ƒë·ªá": "huynh ƒë·ªá",
    "s·ª©ng s·ªù": "s·ªØng s·ªù",
    "lia li·ªán": "lia l·ªãa",
    "r√°c r∆∞·ªùi": "r√°c r∆∞·ªüi",
    "thi·∫øu ra": "thi·∫øu gia",
    "m·ªß kh∆°i": "m√π kh∆°i",
    "sa t√≠t": "xa t√≠t",
    "vi·ªÅn v√¥ng": "vi·ªÖn v√¥ng",
    "tr√¢n √°i": "ch√¢n √°i",
    "cho ƒë√πa": "tr√≤ ƒë√πa",
    "r·ªìn d·∫≠p": "d·ªìn d·∫≠p",
    "s·ªØ ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "x·ªØ ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "ch·ª´ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "·∫©m √Ω": "·∫ßm ·ª∑",
    "d·ªó r·∫£nh": "d·ªó d√†nh",
    "ch·∫ø di·ªÖu": "ch·∫ø gi·ªÖu",
    "b√†m l·∫•y": "b√°m l·∫•y",
    "r≈© r·ªó": "d·ª• gi·ªó",
    "x·ªâ nh·ª•c": "s·ªâ nh·ª•c",
    "song l√™n": "x√¥ng l√™n",
    "ƒëu·ªïi √Ω": "ƒë·ªïi √Ω",
    "y t·ª©": "√Ω t·ª©",
    "to m√≤": "t√≤ m√≤",
    "kh√°ch gi√°o": "kh√°ch s√°o",
    "bƒÉng cua": "b√¢ng qu∆°",
    "chi k·ª∑": "tri k·ª∑",
    "c∆∞·ªùi kh·ªâ": "c∆∞·ªùi kh·∫©y",
    "nguy·ªÅn d√πa": "nguy·ªÅn r·ªßa",
    "ch·∫ø ri·ªÖu": "ch·∫ø gi·ªÖu",
    "mi·ªÉm mai": "m·ªâa mai",
    "binh v·ª±c": "b√™nh v·ª±c",
    "x√°o d·ªóng": "x√°o r·ªóng",
    "√¢m ·ª©c": "·∫•m ·ª©c",
    "x√≥t ra": "x√≥t xa",
    "v√∫t ve": "vu·ªët ve",
    "kh·∫Øc n√†o": "kh√°c n√†o",
    "ly x√¨": "l√¨ x√¨",
    "li x√¨": "l√¨ x√¨",
    "s·ªët s√°ng": "s·ªët s·∫Øng",
    "c·∫ßm mu·ªën": "c√¢m m·ªìm",
    "ma c·∫£ d√≤ng": "ma c√† r·ªìng",
    "h·ªçc t·ª≥": "h·ªçc t·ª∑",
    "quy·ªát": "qu·ªµt",
    "ch·ª´ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "s·∫Øp m·∫∑t": "s·∫Øc m·∫∑t",
    "l∆∞·ªõc x√©o": "li·∫øc x√©o",
    "r·ª•i m·∫Øt": "d·ª•i m·∫Øt",
    "ch√∫ ƒë√°o": "chu ƒë√°o",
    "th√¢n th·ª©c": "th·∫ßn th·ª©c",
    "t·ª± ch·ªçc": "t·ª± tr·ªçng",
    "l√™n l√∫t": "l√©n l√∫t",
    "nh·∫π nh√≥m": "nh·∫π nh√µm",
    "ƒë·ª•ng ch√∫ng": "ƒë·ª•ng tr√∫ng",
    "c√¢u m√†y": "cau m√†y",
    "th√†n th·ªü.": "than th·ªü.",
    "ƒë·ª©ng ph√°t d·∫≠y": "ƒë·ª©ng ph·∫Øt d·∫≠y",
    "n√≥ng gian": "n√≥ng ran",
    "may d√°m": "m√†y d√°m",
    "√°i tr·∫£": "√°i ch√†",
    "nghe th·∫ßy": "nghe th·∫•y",
    "d√†i nh√¢n": "giai nh√¢n",
    "ng∆∞·ª£c l√©p": "ng·ª±c l√©p",
    "trai d·ª±": "chai r∆∞·ª£u",
    "n·ª≠a h·ªç": "n·ª£ h·ªç",
    "c·ª±a ƒë·∫ßu": "g·∫≠t ƒë·∫ßu",
    "gi·ªù kh√≥c gi·ªù c∆∞·ªùi": "gi·ªü kh√≥c gi·ªü c∆∞·ªùi",
    "gi√≥ s∆∞": "gi√°o s∆∞",
    "thi·ªán tr√≠": "thi·ªán ch√≠",
    "can tin": "cƒÉn tin",
    "can t√≠n": "cƒÉn tin",
    "h·ªçc ƒë·ªÉ": "h·ªçc ƒë·ªá",
    "nh·ª±c": "nh∆∞·ª£c",
    "ch√∫t gi·∫≠n": "tr√∫t gi·∫≠n",
    "th·∫≥ng nhi√™n": "th·∫£n nhi√™n",
    "ch√¢m m·∫Øt": "tr∆° m·∫Øt",
    "bu·ªìn m√£": "bu·ªìn b√£",
    "senh": "xen",
    "ng·∫πn": "ngh·∫πn",
    "l·ª©c anh": "li·∫øc anh",
    "nghi·∫øn r·∫±ng": "nghi·∫øn rƒÉng",
    "d·ªó r·∫£nh": "d·ªó d√†nh",
    "t·ªça nguy·ªán": "to·∫°i nguy·ªán",
    "sang ng√£": "sa ng√£",
    "m·∫Øng nh·∫•t": "m·∫Øng nhi·∫øc",
    "ti√™n ƒë·ªìn": "tin ƒë·ªìn",
    "t·ª•t r·ªëc": "t·ª•t d·ªëc",
    "ng·ª´ng m·∫∑t": "ng·∫©ng m·∫∑t",
    "qu√™n bi·∫øt": "quen bi·∫øt",
    "c√¢n b·∫£n": "cƒÉn b·∫£n",
    "nh·ªõ m√†y": "nh√≠u m√†y",
    "·∫•m ·∫©m": "ng·∫•m ng·∫ßm",
    "ng·ªëc ng√°ch": "ng·ªëc ngh·∫øch",
    "l√© l√™n": "l√≥e l√™n",
    "t√≥t": "to√°t",
    "c∆∞∆°ng chi·ªÅu": "c∆∞ng chi·ªÅu",
    "ng·∫ßn ra": "ng·∫©n ra",
    "cao gi√°o": "cao r√°o",
    "ra t·ªôc": "gia t·ªôc",
    "d·ªü tr√≤": "gi·ªü tr√≤",
    "y√™u t√∫": "∆∞u t√∫",
    "ra th·∫ø": "gia th·∫ø",
    "th√¨ gia th·∫ø": "th√¨ ra th·∫ø",
    "th√†nh gia th·∫ø": "th√†nh ra th·∫ø",
    "h·ªìn h·ªÅn": "h·ªïn h·ªÉn",
    "t√°i nh·∫≠t": "t√°i nh·ª£t",
    "s√≥t ra": "x√≥t xa",
    "gi√°ng v·∫ª": "d√°ng v·∫ª",
    "thanh ch·ªët": "then ch·ªët",
    "k·∫øp tr∆∞·ªõc": "ki·∫øp tr∆∞·ªõc",
    "th·∫≠t th·ª©": "tha th·ª©",
    "g√¢y t·∫©m": "gh√™ t·ªüm",
    "ch·ªçng sinh": "tr·ªçng sinh",
    "√°i n√°i": "√°y n√°y",
    "√°i n√°y": "√°y n√°y",
    "s∆∞ng m√π": "s∆∞∆°ng m√π",
    "c∆∞·ªùi l·ªánh": "c∆∞·ªùi l·∫°nh",
    "ƒë√≥i l√†": "ƒë√≥i l√£",
    "li√™n g·ªçi": "li·ªÅn g·ªçi",
    "m√¥ thu·∫´n": "m√¢u thu·∫´n",
    "c∆∞·ªùi kh·ªèi": "c∆∞·ªùi kh·∫©y",
    "k√Ω t√∫c gi√°": "k√Ω t√∫c x√°",
    "k√Ω t√∫c xa": "k√Ω t√∫c x√°",
    "v√≥ng v·∫ª": "v·∫Øng v·∫ª",
    "ƒë√°y ng·ªô": "ƒë√£i ng·ªô",
    "h·ª≠ l·ªánh": "h·ª´ l·∫°nh",
    "ba l·ªì": "ba l√¥",
    "d·∫´n d·ªói": "gi·∫≠n d·ªói",
    "b·ªã ·ªën": "b·ªã ·ªëm",
    "∆∞u √°m": "u √°m",
    "ch·∫ßm t√≠nh": "tr·∫ßm t√≠nh",
    "·ªët ·ª©c": "u·∫•t ·ª©c",
    "h·ªçc t√¨": "h·ªçc t·ª∑",
    "h·ª´a l·∫°nh": "h·ª´ l·∫°nh",
    "nguy ngoai": "ngu√¥i ngoai",
    "ph·∫ßn n·ª≠a": "ph√¢n n·ª≠a",
    "chi·ªÅu tr·ª•ng": "chi·ªÅu chu·ªông",
    "ch√†n da": "tr√†n ra",
    "rƒÉng l√™n": "d√¢ng l√™n",
    "r·ªùi l·∫°i": "gi·ªù l·∫°i",
    "h√°n ta": "h·∫Øn ta",
    "h√†n ta": "h·∫Øn ta",
    "h·ªßng h·ªì": "hu·ªëng h·ªì",
    "rung n·∫°p": "dung n·∫°p",
    "sua tay": "xua tay",
    "ch·∫ßm m·∫∑t": "tr·∫ßm m·∫∑t",
    "ch√¢n nh√†": "tr·∫ßn nh√†",
    "m√¥ gi·∫•c": "m·ªôt gi·∫•c",
    "h·ªôi tr·∫ßn": "h·ªôi chu·∫©n",
    "tr√™n ng√†nh": "chuy√™n ng√†nh",
    "sen v√†o": "xen v√†o",
    "d√πng b·ªè": "ru·ªìng b·ªè",
    "gi√°ng v·∫ª": "d√°ng v·∫ª",
    "vu kh·ªïng": "vu kh·ªëng",
    "huy ch∆∞ng": "huy ch∆∞∆°ng",
    "d·∫°y r·ªó": "d·∫°y gi·ªó",
    "ch·∫ßm ng√¢m": "tr·∫ßm ng√¢m",
    "h·ª© l·∫°nh": "h·ª´ l·∫°nh",
    "c∆∞·ªõng r·∫Øn": "c·ª©ng r·∫Øn",
    "ch√†ng ph√°o": "tr√†n ph√°o",
    "b√† l√¥": "ba l√¥",
    "c·∫ßn nh·ªõ": "c·∫ßn nh·ªù",
    "t√πn t√¨m": "t·ªßm t·ªâm",
    "b·ªã ƒë·∫∑t": "b·ªãa ƒë·∫∑t",
    "ƒë·ªôc ƒëi·ªán": "ƒë·ªôc ƒë·ªãa",
    "tr√°nh gh√©t": "ch√°n gh√©t",
    "m·∫Øc c·∫•p": "max c·∫•p",
    "cao r·ªçng": "cao gi·ªçng",
    "tin nghƒ©a": "t√¨nh nghƒ©a",
    "lu·ªëng cu·ªën": "lu·ªëng cu·ªëng",
    "m√™ m·ª•i": "m√™ mu·ªôi",
    "c·ªë hi·ªÉu": "c·ªë h·ªØu",
    "th·∫ßm r√πa": "th·∫ßm r·ªßa",
    "b√†nh bao": "b·∫£nh bao",
    "t·ªßn t√¨m": "t·ªßm t·ªâm",
    "x√†i b∆∞·ªõc": "x·∫£i b∆∞·ªõc",
    "c·ª© ng·ª≠i": "c·ª©ng ng∆∞·ªùi",
    "ƒë∆∞·ª£c ƒë·ªëi": "tuy·ªát ƒë·ªëi",
    "ch·∫ßm ch·∫ßm": "ch·∫±m ch·∫±m",
    "ƒë√°y h·ªï": "ƒë√°y h·ªì",
    "b·ªô d·∫°o": "b·ªô d·∫°ng",
    "nghe song": "nghe xong",
    "l·ª•c ra": "l·ª•c gia",
    "ƒÉn ph·∫≠n": "an ph·∫≠n",
    "tr√≠ t√¥n": "ch√≠ t√¥n",
    "chi·∫øc d∆∞∆°ng": "chi·∫øc r∆∞∆°ng",
    "c√°i d∆∞∆°ng": "c√°i r∆∞∆°ng",
    "d·ªça ƒë·∫ßu": "d·∫°o ƒë·∫ßu",
    "chuy·ªÉn c√†nh": "chuy·ªÉn c·∫£nh",
    "ph·∫ßn n·ªô": "ph·∫´n n·ªô",
    "ƒë·∫°p vang": "ƒë·∫°p vƒÉng",
    "h·∫Øn tam": "h·∫Øn ta",
    "g√£√Ω": "g√£y",
    "·ªï ·∫°t": "·ªì ·∫°t",
    "xong l√™n": "x√¥ng l√™n",
    "s·ª£ √Ω": "s∆° √Ω",
    "s·∫Øt l·∫°nh": "s·∫Øc l·∫°nh",
    "s√°ng l·∫°m": "s√°ng l·∫°n",
    "ch√∫ t·ª©c": "chu t∆∞·ªõc",
    "ch∆∞ m·ªô": "chi√™u m·ªô",
    "t·ª≠ th∆∞": "ti·ªÉu th∆∞",
    "gi·ªõi ch·ª©ng": "d∆∞·ªõi tr∆∞·ªõng",
    "v·ª•i v√£": "v·ªôi v√£",
    "c·ªë ƒë·ªông": "c√¥ ƒë·ªçng",
    "song xu√¥i": "xong xu√¥i",
    "song sau": "xong sau",
    "song ƒëi": "xong ƒëi",
    "tr∆∞·ªüng l·ª±c": "ch∆∞·ªüng l·ª±c",
    "tr∆∞·ªüng th·∫≥ng": "ch∆∞·ªüng th·∫≥ng",
    "tr∆∞·ªùng m·∫°nh": "ch∆∞·ªüng m·∫°nh",
    "ch·ª©a th·∫≥ng": "chi·∫øu th·∫≥ng",
    "qu√° nh·∫≠t": "qu√°n nh·∫≠t",
    "tr∆∞·ªùng th·∫≥ng": "ch∆∞·ªüng th·∫≥ng",
    "c√∫c m√°y": "c√∫p m√°y",
    "nghi·∫øn giƒÉng": "nghi·∫øn rƒÉng",
    "tr∆∞ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "l·∫ßm b·∫ßm": "l·∫©m b·∫©m",
    "tri ti√™u": "chi ti√™u",
    "khoe mi·ªáng": "kh√≥e mi·ªáng",
    "b√∫ phim": "b√∫ ph√™m",
    "ch√†n ƒë·∫ßy": "tr√†n ƒë·∫ßy",
    "qua t·∫∑ng": "qu√† t·∫∑ng",
    "ng·∫°o nghƒ©a": "ng·∫°o ngh·ªÖ",
    "th√¢n h√†o": "th·∫ßn h√†o",
    "cao ·ªëm": "c√°o ·ªëm",
    "ch√∫t ƒë∆∞·ª£c": "tr√∫t ƒë∆∞·ª£c",
    "tue tue": "toe to√©t",
    "th·ªã x√°t": "th·ªã s√°t",
    "ƒë·∫•u tr∆∞·ªüng": "ƒë·∫•u tr∆∞·ªùng",
    "l·∫°nh lung": "l·∫°nh l√πng",
    "thi√™n th√≠t": "thin th√≠t",
    "l√°c ƒë·∫ßu": "l·∫Øc ƒë·∫ßu",
    "gi·∫•c l·ªùi": "d·ª©t l·ªùi",
    "s·ª©c kho√°t": "d·ª©t kho√°t",
    "nh√≤ nh√≤": "nho nh·ªè",
    "x·∫£y b∆∞·ªõc": "x·∫£i b∆∞·ªõc",
    "nh√† s·ª≠a": "nh√† x∆∞·ªüng",
    "l√≤ng vƒÉn": "long v√¢n",
    "ra c·ªë": "gia c·ªë",
    "ch·∫≠t nh·ªõ": "ch·ª£t nh·ªõ",
    "x√¥i n·ªïi": "s√¥i n·ªïi",
    "li·ªÅu c·ªè": "l·ªÅu c·ªè",
    "t√¢n qua": "t√¢n quan",
    "r√°ng v·∫ª": "d√°ng v·∫ª",
    "gi·ªØa tr·ª´ng": "gi·ªØa ch·ª´ng",
    "gi√°n ƒë·ªëc": "gi√°m ƒë·ªëc",
    "tr·∫£ h·ªèi": "ch√†o h·ªèi",
    "su n·ªãnh": "xu n·ªãnh",
    "g∆∞·ª£m": "g∆∞·ª£ng",
    "nh·ªõn m√†y": "nh∆∞·ªõng m√†y",
    "d√¢u t√≥c": "r√¢u t√≥c",
    "ng·ªüng ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "v·ª•i v√†ng": "v·ªôi v√†ng",
    "ƒë√°ng b·∫±ng": "ƒë√≥ng bƒÉng",
    "r·ª©t l·ªùi": "d·ª©t l·ªùi",
    "ch·∫•t l·∫∑ng": "ch·∫øt l·∫∑ng",
    "th√¢m nghƒ©": "th·∫ßm nghƒ©",
    "xa th·∫£i": "sa th·∫£i",
    "√∫t ·ª©c": "u·∫•t ·ª©c",
    "lan chuy·ªÉn": "lan truy·ªÅn",
    "m·ªùi tr√†o": "m·ªùi ch√†o",
    "lan s√≥ng": "l√†n s√≥ng",
    "tr√¢n th√†nh": "ch√¢n th√†nh",
    "ra nh·∫≠p": "gia nh·∫≠p",
    "t·∫≠p k·ªπ": "t·∫°p k·ªπ",
    "s·∫Ω s·ªë": "d√£y s·ªë",
    "tr·∫≠t nghƒ©": "ch·ª£t nghƒ©",
    "tr·∫ßn tr·ª´": "ch·∫ßn ch·ª´",
    "d·ªØng l·∫°i": "s·ªØng l·∫°i",
    "h√†ng gi√≤ng": "h√†ng rong",
    "ng∆∞∆°ng √°c": "ng∆° ng√°c",
    "ƒë√πi vi·ªác": "ƒëu·ªïi vi·ªác",
    "tr√¢m tr√¢m": "chƒÉm chƒÉm",
    "l√£o ra": "l√£o gia",
    "l√≤ng l·ª±c": "long l·ª±c",
    "th·ªß l√£o": "th·ª• l√£o",
    "truy·ªÅn h√≥a": "chuy·ªÉn h√≥a",
    "nh·∫°t nh·∫°t": "nh√†n nh·∫°t",
    "chu·ªói l·ªßi": "tr·ª•i l·ªßi",
    "bao tr√πng": "bao tr√πm",
    "cƒÉn c·ªói": "c·∫±n c·ªói",
    "ung t√πng": "um t√πm",
    "b·∫•t ch·∫≠t": "b·∫•t ch·ª£t",
    "tr·ª£ t·∫≠p": "tri·ªáu t·∫≠p",
    "cu·ªôc s√°ng": "c·ªôt s√°ng",
    "k·ªπ sƒ©": "k·ªµ sƒ©",
    "m√πi s·∫°c": "m√πi s·∫∑c",
    "s·∫∑c thu·ªëc d√πng": "s·∫∑c thu·ªëc s√∫ng",
    "t√¥n t√©p": "t√¥m t√©p",
    "l·ª£i l·ª•c": "l·ª£i l·ªôc",
    "ch·∫•p tay": "ch·∫Øp tay",
    "v·ª´a r·ª©t": "v·ª´a d·ª©t",
    "l√° tr·∫Øng": "l√° ch·∫Øn",
    "chi√™u t·ª©c": "chi√™u th·ª©c",
    "tr·ªãt ti√™u": "tri·ªát ti√™u",
    "tr·ªôt d·∫°": "ch·ªôt d·∫°",
    "l·ªõn d·ªçng": "l·ªõn gi·ªçng",
    "h√πng h√£n": "hung h√£n",
    "l√≤ng kh√≠": "long kh√≠",
    "gi√†nh d·ªói": "r·∫£nh r·ªói",
    "k·ª≥ sƒ©": "k·ªµ sƒ©",
    "gi·ª±c": "d·ª±c",
    "tr√≤ h·ªèi": "ch√†o h·ªèi",
    "ng∆∞∆°ng t·ª•": "ng∆∞ng t·ª•",
    "ch·ªØ l∆∞·ª£ng": "tr·ªØ l∆∞·ª£ng",
    "dao gam": "dao gƒÉm",
    "dung ƒë·ªông": "rung ƒë·ªông",
    "nh√°i m·∫Øt": "nh√°y m·∫Øt",
    "t∆° gi·∫•y": "t·ªù gi·∫•y",
    "d√™n d·ªâ": "r√™n r·ªâ",
    "t·ª≠ bi": "t·ª´ bi",
    "r√°ng xu·ªëng": "gi√°ng xu·ªëng",
    "x√¢m x√©t": "s·∫•m s√©t",
    "r·ªçng": "gi·ªçng",
    "nhi·ªÅu ƒë√¢y": "nhi√™u ƒë√¢y",
    "khi th·ª©c": "kh√≠ t·ª©c",
    "tr√≥i l·ªçt": "ch√≥i l·ªçi",
    "su tan": "xua tan",
    "li√™n th·∫•y": "li·ªÅn th·∫•y",
    "li√™n bi·∫øn": "li·ªÅn bi·∫øn",
    "li√™n cung k√≠nh": "li·ªÅn cung k√≠nh",
    "li√™n c∆∞·ªùi": "li·ªÅn c∆∞·ªùi",
    "t·ª´ ph·ªß": "t·ª≠ ph·ªß",
    "nh√¨n gia": "nh√¨n ra",
    "tr∆∞·ªùng gi√°o": "ch∆∞·ªüng gi√°o",
    "ch·∫≠m ch·∫ø": "ch·∫≠m tr·ªÖ",
    "ƒë√† k√≠ch": "ƒë·∫£ k√≠ch",
    "c·ª£t ƒë·∫ßu": "g·∫≠t ƒë·∫ßu",
    "m·∫•t m√°y": "m·∫Øp m√°y",
    "khi huy·∫øt": "kh√≠ huy·∫øt",
    "chuy·ªÉn t·ªëng": "truy·ªÅn t·ªëng",
    "ƒë·ªông t√°c m·ªü": "ƒë·ªông t√°c m·ªùi",
    "v·∫°n r·∫°m": "v·∫°n d·∫∑m",
    "tr·∫≠m gi√£i": "ch·∫≠m r√£i",
    "lu√¥ng kh√≠": "lu·ªìng kh√≠",
    "·∫•m ·∫•m": "·∫ßm ·∫ßm",
    "lu√©": "l√≥e",
    "li√™n xu·∫•t hi·ªán": "li·ªÅn xu·∫•t hi·ªán",
    "kh√≠ th·ª©c": "kh√≠ t·ª©c",
    "uy nhi√™m": "uy nghi√™m",
    "kh√¥ng chung": "kh√¥ng trung",
    "hi·ªán nhi√™n": "hi·ªÉn nhi√™n",
    "tu·∫ßn cha": "tu·∫ßn tra",
    "t√¥n t√¨": "t√¥n ti",
    "c√πng b·∫°o": "cu·ªìng b·∫°o",
    "tr√¥ng ƒë·ªëi": "ch·ªëng ƒë·ªëi",
    "d√≤ng d√≤ng": "r√≤ng r√≤ng",
    "kim ƒë√†n": "kim ƒëan",
    "b·ªÉ h·∫°": "b·ªá h·∫°",
    "uy nhi·ªÖm": "uy nghi√™m",
    "khi nh·ªùn": "khinh nh·ªùn",
    "c√¥ √Ω": "c·ªë √Ω",
    "r√†o ƒë·ªông": "dao ƒë·ªông",
    "xin th√†": "xin tha",
    "kh√≥ th√†": "kh√≥ tha",
    "qu·ª∑ l·∫°y": "qu·ª≥ l·∫°y",
    "c√πng k√≠nh": "cung k√≠nh",
    "·∫£o ·∫£o": "√†o √†o",
    "ch·ªâ ho√£n": "tr√¨ ho√£n",
    "c∆∞ ch√∫": "c∆∞ tr√∫",
    "tr∆∞·ªüng gi√°o": "ch∆∞·ªüng gi√°o",
    "nh∆∞ n·∫øu": "nh∆∞ng n·∫øu",
    "tr√≥ ng·ª£p": "cho√°ng ng·ª£p",
    "cao m·∫£nh": "cau m√†y",
    "quenh": "quen",
    "s·ªØng s·ªü": "s·ªØng s·ªù",
    "tr·∫≠t": "ch·ª£t",
    "nh√¨n xa qua": "nh√¨n s∆° qua",
    "ch·∫£y d√†i": "tr·∫£i d√†i",
    "c·ª≠ d∆∞∆°ng": "c·ª≠u d∆∞∆°ng",
    "tr·∫Øn ngang": "ch·∫Øn ngang",
    "tr√≥t v√≥t": "ch√≥t v√≥t",
    "v·∫°n r·∫∑m": "v·∫°n d·∫∑m",
    "t·ª©c ƒë·∫•t": "t·∫•c ƒë·∫•t",
    "th√¢n s·∫•m": "th·∫ßn s·∫•m",
    "khoa ch·∫∑t": "kh√≥a ch·∫∑t",
    "sau g√°i": "sau g√°y",
    "v·∫´n v·∫πo": "v·∫∑n v·∫πo",
    "h∆∞·ªõng th√∫": "h·ª©ng th√∫",
    "ƒëƒÉng ho√†nh": "ƒë·∫±ng ho√†nh",
    "c·ª° sao": "c·ªõ sao",
    "nh√≠u m·∫©y": "nh√≠u m√†y",
    "qu√¢n vi·ªát": "qu√¢n phi·ªát",
    "chung kh·ªßng b·ªë": "tr√πm kh·ªßng b·ªë",
    "onza": "oan gia",
    "ƒë√¥ l√†": "ƒë√¥ la",
    "ch·ªçn t·ªôi": "tr·ªçng t·ªôi",
    "ngu c∆∞∆°ng": "ng√¥ c∆∞∆°ng",
    "tv": "ti vi",
    "h√≤a l·ª±c": "h·ªèa l·ª±c",
    "·ªßng ph√≠": "u·ªïng ph√≠",
    "trong tr∆∞·ªõc m·∫Øt": "trong ch·ªõp m·∫Øt",
    "nguy trang": "ng·ª•y trang",
    "ch·∫ßm m·∫∑c": "tr·∫ßm m·∫∑t",
    "v·ª´a v·∫´n": "v·ª´a v·∫∑n",
    "nh·∫•t kh√≥e mi·ªáng": "nh·∫øch kh√≥e mi·ªáng",
    "nh·∫•t mi·ªáng": "nh·∫øch mi·ªáng",
    "ti·ªÉu da": "ti·ªÉu gia",
    "ti·ªÉu ra": "ti·ªÉu gia",
    "d·∫´n gi·ªØ": "gi·∫≠n d·ªØ",
    "ch√∫ ·∫©n": "tr√∫ ·∫©n",
    "c√∫t m√°y": "c√∫p m√°y",
    "ch√¢u b√≤": "tr√¢u b√≤",
    "b√¨nh v∆∞∆°ng": "binh v∆∞∆°ng",
    "h·ªì to": "h√¥ to",
    "ng·∫≥ng ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "cho ch∆°i": "tr√≤ ch∆°i",
    "√¥ng ph√≥ng": "·ªëng ph√≥ng",
    "su·ªët ru·ªôt": "s·ªët ru·ªôt",
    "·ªïn ·∫£o": "·ªìn √†o",
    "kh√¥ng tr√πng": "kh√¥ng trung",
    "ch∆∞a k·ª≥": "ch∆∞a k·ªãp",
    "khi·∫øp s·ª±": "khi·∫øp s·ª£",
    "s·∫Øc h·ªì": "x√°c kh√¥",
    "co s√∫ng": "c√≤ s√∫ng",
    "ƒëinh cu·ªìng": "ƒëi√™n cu·ªìng",
    "t∆∞·ªùng lƒ©nh": "t∆∞·ªõng lƒ©nh",
    "ƒë√°nh ƒëau th√°ng ƒë√≥": "ƒë√°nh ƒë√¢u th·∫Øng ƒë√≥",
    "m·∫ßu ch·ªët": "m·∫•u ch·ªët",
    "h∆∞∆°ng ph·∫•n": "h∆∞ng ph·∫•n",
    "d√¢u dia": "r√¢u ria",
    "d∆° s√∫ng": "gi∆° s√∫ng",
    "b·∫Øt gi√°c": "b·∫•t gi√°c",
    "d√¢u r·∫≠m": "r√¢u r·∫≠m",
    "k√™u ng·∫°o": "ki√™u ng·∫°o",
    "m·ª•i": "mu·ªôi",
    "b·∫ßu v·ª±c": "b·ªù v·ª±c",
    "ra nghi·ªáp": "gia nghi·ªáp",
    "lo·∫°n tgi·ªçng": "lo·∫°n cho·∫°ng",
    "tgi·ªçng": "tr·ªçng",
    "·ªèn t√π": "o·∫ªn t√π",
    "l√πng c√¢y": "l√πm c√¢y",
    "n√∫p l√πng": "n√∫p l√πm",
    "h√† th·ªß √¢u": "h√† th·ªß √¥",
    "th·ªß y√™u": "th·ª• y√™u",
    "con tr·ªìn": "con ch·ªìn",
    "m·ªôt l√πn": "m·ªôt lu·ªìng",
    "ch·∫•p m·∫Øt": "ch·ªõp m·∫Øt",
    "s∆° s·∫£i": "s∆° x√†i",
    "x·∫£o qu·ªµt": "x·∫£o quy·ªát",
    "d·ª° th·ªß ƒëo·∫°n": "gi·ª° th·ªß ƒëo·∫°n",
    "v√µ c√¢y": "v·ªè c√¢y",
    "dƒ©a c√¢y": "r·ªÖ c√¢y",
    "t·∫° kh√≠": "t√† kh√≠",
    "tr·ª±c h·ªìi": "tri·ªáu h·ªìi",
    "giang b·ªôc": "r√†ng bu·ªôc",
    "n√∫t ch·ª´ng": "nu·ªët ch·ª≠ng",
    "xi·∫øt ch·∫∑t": "si·∫øt ch·∫∑t",
    "v√πng tay": "vung tay",
    "h·∫øt l·ªõn": "h√©t l·ªõn",
    "t√≠ch ch·ªØ": "t√≠ch tr·ªØ",
    "rung nham": "dung nham",
    "tr√πng k√≠n": "tr√πm k√≠n",
    "e r√®": "e d√®",
    "qu·ª≥ d·∫°p": "qu·ª≥ r·∫°p",
    "gi·ªØ t∆∞·ª£ng": "d·ªØ t·ª£n",
    "d∆° b√†n ch√¢n": "gi∆° b√†n ch√¢n",
    "tho·∫£ m√£n": "th·ªèa m√£n",
    "r√∫t l·ªùi": "d·ª©t l·ªùi",
    "s√¥ng th·∫≥ng": "x√¥ng th·∫≥ng",
    "h√≥a th√†nh cho": "h√≥a th√†nh tro",
    "h√†n h√©": "h·∫Øn h√©",
    "ph·∫≥ng ph·∫•t": "ph·∫£ng ph·∫•t",
    "ta kh√≠": "t√† kh√≠",
    "r·ªìi r√†o": "d·ªìi d√†o",
    "l∆∞·ªõt m·∫Øt": "li·∫øc m·∫Øt",
    "xu√¢n sao": "x√¥n xao",
    "ch∆°i m√°": "tr·ªùi m√°",
    "c√≥ ƒëu√¥i ch√≥": "c·ªè ƒëu√¥i ch√≥",
    "mi·∫øu mi·ªáng": "m·∫øu mi·ªáng",
    "ca c·ª±c": "c√° c∆∞·ª£c",
    "d√°m ƒë·ªãnh": "gi√°m ƒë·ªãnh",
    "s·ª£ h√°i": "s·ª£ h√£i",
    "h·∫°o nam nhi": "h·∫£o nam nhi",
    "v·∫∑t √°o": "v·∫°t √°o",
    "s·∫£o tr√°": "x·∫£o tr√°",
    "xem tr√∫t": "xem ch√∫t",
    "ru·ªìn d·∫©y": "run r·∫©y",
    "th·∫≠t hay ƒë·ªß": "th·∫≠t hay ƒë√πa",
    "ƒëan r·ªõi": "ƒëan gi·ªõi",
    "r√°ng r·ª°": "r·∫°ng r·ª°",
    "mi√™u m√°u": "m·∫øu m√°o",
    "g·∫∑m m·∫∑t": "g·∫±m m·∫∑t",
    "ta√Ω": "tay",
    "t·ª©c kh√°c": "t·ª©c kh·∫Øc",
    "√°t s·∫Ω": "·∫Øt s·∫Ω",
    "ƒë∆°n th√∫c": "ƒë∆°n thu·ªëc",
    "c√≥ th·ªß t·∫•t b√°o": "c√≥ th√π t·∫•t b√°o",
    "b·ªè x√≥t": "b·ªè s√≥t",
    "tr·ª•c s·ª©c": "tr·ª•c xu·∫•t",
    "kho√°i tr√≠": "kho√°i ch√≠",
    "rang c√°nh": "dang c√°nh",
    "ph√∫ ch·ªëc": "ph√∫t ch·ªëc",
    "s√°ng tr√≥i": "s√°ng ch√≥i",
    "s√†nh ch√≠nh": "s·∫£nh ch√≠nh",
    "gia tr·ªß": "gia ch·ªß",
    "ti·ªÉu t·ª´": "ti·ªÉu t·ª≠",
    "ly l·∫Ω": "l√Ω l·∫Ω",
    "ph·ªëi ƒë·ªï": "ph·ªëi ƒë·ªì",
    "cam ph·∫´n": "cƒÉm ph·∫´n",
    "kinh t·∫ßm": "kinh t·ªüm",
    "cho c∆∞·ªùi": "tr√≤ c∆∞·ªùi",
    "tr·∫ª chung": "tr·∫ª trung",
    "nga√Ω": "ngay",
    "v·ªù k·ªãch": "v·ªü k·ªãch",
    "·ªü s√†nh": "·ªü s·∫£nh",
    "l∆° l·∫£": "l∆° l√†",
    "√¥n ch·∫∑t": "√¥m ch·∫∑t",
    "c·∫ßy x·∫•y": "c·∫ßy s·∫•y",
    "h√°c t√†": "h·∫Øc t√†",
    "nh∆∞·ª£c bang": "nh∆∞·ª£c bƒÉng",
    "la h·∫øt": "la h√©t",
    "trong th·∫•y": "tr√¥ng th·∫•y",
    "c√¢y rau": "c√¢y dao",
    "cua c·∫≠u": "cu c·∫≠u",
    "ƒë∆∞·ªùng rau": "ƒë∆∞·ªùng dao",
    "gi·ª±t l·ª≠a": "r·ª±c l·ª≠a",
    "gi·∫≠n d√≤": "d·∫∑n d√≤",
    "n√©m th·ª≠": "n·∫øm th·ª≠",
    "r·ªï tr√≤": "gi·ªü tr√≤",
    "ch√©n gi·∫øt": "ch√©m gi·∫øt",
    "nh√¨n h√°n": "nh√¨n h·∫Øn",
    "c√∫ c·∫≠u": "cu c·∫≠u",
    "t√≠ch t√°c": "t√≠ch t·∫Øc",
    "c√°i n·ªïi": "c√°i n·ªìi",
    "ho√°c m·ªìm": "ngo√°c m·ªìm",
    "ƒë·ªô ma": "ƒë·∫≠u m√°",
    "ƒë·ªù m∆°": "ƒë·ªù m·ªù",
    "t·ªï chuy·ªÉn": "t·ªï truy·ªÅn",
    "l√πng mi·∫øng": "l√πm m√≠a",
    "nha c∆∞∆°ng": "nha c∆∞ng",
    "ph√°t x·ªët": "ph√°t s·ªët",
    "ch·ªØ v·∫≠t": "tr·ªØ v·∫≠t",
    "ch√∫ m√†y": "ch√∫ng m√†y",
    "s·ªØa r·ª´ng s√¢u": "gi·ªØa r·ª´ng s√¢u",
    "ch·ªØ ƒë·ªì": "tr·ªØ ƒë·ªì",
    "h·ªì h·ªìi": "h·ªì h·ª°i",
    "nh·ªè r√£i": "nh·ªè d√£i",
    "cao c√≥": "cau c√≥",
    "nh√©t mi·ªáng": "nh·∫øch mi·ªáng",
    "ch∆∞a th·ª©c": "chi√™u th·ª©c",
    "ch∆°i s·ªè": "ch∆°i x·ªè",
    "m√π h·ªìi": "m·ªì h√¥i",
    "m√π h√¥i": "m·ªì h√¥i",
    "ng·∫ßm g·ª´": "g·∫ßm g·ª´",
    "thi chi·∫øn": "thi tri·ªÉn",
    "ph√πng ph√πng": "ph·ª´ng ph·ª´ng",
    "ch∆∞ng ra": "tr∆∞ng ra",
    "nh·∫±m hi·ªÉm": "nham hi·ªÉm",
    "nh·∫Øc b·ªïng": "nh·∫•c b·ªïng",
    "k√™u g·∫°o": "k√™u g√†o",
    "m√≥c m√≥c": "ngo·∫Øc ngo·∫Øc",
    "s·∫°c s·ª•a": "s·∫∑c s·ª•a",
    "g·∫°o th√©t": "g√†o th√©t",
    "th·∫ª l∆∞·ª°i": "th√® l∆∞·ª°i",
    "tr·ª£n ch√°o": "tr·ª£n tr√°o",
    "t·ªõi nguy·ªát": "tu·∫ø nguy·ªát",
    "ch√°n tr∆∞·ªùng": "ch√°n ch∆∞·ªùng",
    "thi chi·ªÉn": "thi tri·ªÉn",
    "v√≤ v√®": "vo ve",
    "x√≥t l·∫°i": "s√≥t l·∫°i",
    "g√¢y gu·ªôc": "g·∫ßy gu·ªôc",
    "rƒÉng b·∫´y": "giƒÉng b·∫´y",
    "t√≠nh k√™": "t√≠nh k·∫ø",
    "rang tay": "giang tay",
    "r√¥ng d√†i": "d√¥ng d√†i",
    "ch·∫Øn n·∫£n": "ch√°n n·∫£n",
    "√¢n k√Ω": "·∫•n k√Ω",
    "trinh l·ªách": "ch√™nh l·ªách",
    "ch∆∞∆°ng kh√≠": "ch∆∞·ªõng kh√≠",
    "ch·∫Øn gh√©t": "ch√°n gh√©t",
    "ph√¢n y√™u": "ph√¢n ∆∞u",
    "ngu d·∫ßn": "ngu xu·∫©n",
    "t∆∞ di·ªát": "ti√™u di·ªát",
    "ngu·ªìn lo√†i": "mu√¥n lo√†i",
    "ch√≠nh m√πi": "ch√≠n m√πi",
    "nh√°ch mi·ªáng": "nh·∫øch mi·ªáng",
    "mau ch√≥": "m√°u ch√≥",
    "ngu r·ªët": "ngu d·ªët",
    "may m·∫Øn th·∫ßy": "may m·∫Øn thay",
    "tr·ªãu h·ªìi": "tri·ªáu h·ªìi",
    "ch·ª©a d·ªça": "chi·∫øu r·ªçi",
    "l√πn ki·∫øm kh√≠": "lu·ªìng ki·∫øm kh√≠",
    "r·ªìn l·∫°i": "d·ªìn l·∫°i",
    "r·ªìn n√©n": "d·ªìn n√©n",
    "run r·∫£y": "run r·∫©y",
    "gƒÉng g∆∞·ª£ng": "g·∫Øng g∆∞·ª£ng",
    "d·ªØ r·ªìi": "d·ªØ d·ªôi",
    "r∆∞·ªõc kh·ªèi": "d·ª©t kh·ªèi",
    "n∆∞·ªõc n·∫£y": "n·ª©t n·∫ª",
    "x∆∞∆°ng h√πng": "x∆∞ng h√πng",
    "th√¢n s·∫Øc": "th√¢n x√°c",
    "r·∫≠m ch√¢n": "d·∫≠m ch√¢n",
    "l√πng t√† kh√≠": "lu·ªìng t√† kh√≠",
    "ƒë·ªách mi·ªáng": "ƒë·ªách m·ªãa",
    "l√≤ng m√¥n": "long m√¥n",
    "tr√∫c l√°t": "ch·ªëc l√°t",
    "con r√°n": "con d√°n",
    "m·∫∑t m√¢y": "m·∫∑t m√†y",
    "h√¨nh h·∫£i": "h√¨nh h√†i",
    "g√µi ch·∫øt": "c√µi ch·∫øt",
    "nh·∫π r·ªông": "nh·∫π gi·ªçng",
    "m·ª´ng d·ª°": "m·ª´ng r·ª°",
    "mi·∫øu m√°u": "m·∫øu m√°o",
    "t·ª≠ l·∫ßu": "t·ª≠u l·∫ßu",
    "chi·ªÅu m·∫øn": "tri·ªÅu m·∫øn",
    "trong tr√≥ng": "chong ch√≥ng",
    "ho h√°t": "ho h·∫Øt",
    "ch·∫ßm l·∫∑ng": "tr·∫ßm l·∫∑ng",
    "ƒë·ªï ƒÉn": "ƒë·ªì ƒÉn",
    "m√® nhau": "m√® nheo",
    "v·ªÅ ƒë∆∞·ªùng": "v·ªá ƒë∆∞·ªùng",
    "x·ªØa ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "li√™n nhƒ©": "li·ªÅn nghƒ©",
    "m√©o m√°u": "m·∫øu m√°o",
    "tr·ªëng c·∫ßm": "ch·ªëng c·∫±m",
    "trong quan": "tr√¥ng quen",
    "ch·∫ßm l·∫∑ng": "tr·∫ßm l·∫∑ng",
    "nh√¨n tay": "nh·ªÉnh tai",
    "t·ª•ng ba": "t·ª•m ba",
    "th·ª© gia": "thi·∫øu gia",
    "s√πa ƒëu·ªïi": "xua ƒëu·ªïi",
    "g·∫ßn r·ªông": "g·∫±n gi·ªçng",
    "r·∫Øn v·∫£i": "d√°ng v·∫ª",
    "c·∫ßm n·∫øn": "c√¢m n√≠n",
    "vu·ªët c·∫ßm": "vu·ªët c·∫±m",
    "ƒë√°nh c·ª±c": "ƒë√°nh c∆∞·ª£c",
    "vinh v√°o": "v√™nh v√°o",
    "c·ª±c xem": "c∆∞·ª£c xem",
    "ƒëan r·ª±c": "ƒëan d∆∞·ª£c",
    "t∆∞ t·ªânh": "t∆∞∆°i t·ªânh",
    "kh√≥i tr√≠": "kho√°i tr√≠",
    "v√°n c·ª±c": "v√°n c∆∞·ª£c",
    "hu·ª≥nh ph·∫©m": "huy·ªÅn ph·∫©m",
    "l·∫°ng ng∆∞·ªùi": "l·∫∑ng ng∆∞·ªùi",
    "c√° c·ª±c": "c√° c∆∞·ª£c",
    "√™ch": "·∫øch",
    "x√¥n sao": "x√¥n xao",
    "nh√† ho√†ng": "nha ho√†ng",
    "c√°i h·ª•t": "c√°i h·ªôp",
    "ƒëu√¥i cho": "ƒëu√¥i ch√≥",
    "chi·∫øc h·ª•t": "chi·∫øc h·ªôp",
    "trong h·ª•t": "trong h·ªôp",
    "l√™n r·ªông": "l√™n gi·ªçng",
    "nghi·ªám ƒë√†n": "nghi·ªám ƒëan",
    "l·ªó b·ªãch": "l·ªë b·ªãch",
    "ho√°i ngo√°c": "ngo√°i ngo√°c",
    "ƒë·ªÉ ph√≤ng": "ƒë·ªÅ ph√≤ng",
    "h·ªôp c·ªï": "h·ªôp g·ªó",
    "nh·∫øu m√†y": "nh√≠u m√†y",
    "ng√≥c mi·ªáng": "ngo√°c mi·ªáng",
    "nh√† ƒë·∫ßu": "nha ƒë·∫ßu",
    "ch·∫ßm t∆∞": "tr·∫ßm t∆∞",
    "di·ªÖu c·ªù": "gi·ªÖu c·ª£t",
    "ch√¢n chu": "tr∆°n tru",
    "ph·∫ßy tay": "ph·∫©y tay",
    "c·∫≠n b√£": "c·∫∑n b√£",
    "ƒëi·ªÅu c·ª±c": "ƒëi·ªÅu c∆∞·ª£c",
    "nh√°ch m√¥i": "nh·∫øch m√¥i",
    "ng∆∞∆°ng th·∫ßn": "ng∆∞ng th·∫ßn",
    "l√™n c·∫ßm": "l√™n c·∫±m",
    "x√¥i s·ª•c": "s√¥i s·ª•c",
    "m√† ƒëem": "m√†n ƒë√™m",
    "ra ch·ªß": "gia ch·ªß",
    "v√∫t v·ªÅ": "vu·ªët ve",
    "b·ªô d√¢u": "b·ªô r√¢u",
    "tr√≠ c·ª±c": "ch√≠ c·ª±c",
    "ph√¢n kh√≠ch": "ph·∫•n kh√≠ch",
    "thi·ªÅn ƒëan": "thi√™n ƒëan",
    "ƒë√† th√¥ng": "ƒë·∫£ th√¥ng",
    "trang khuy·∫øt": "trƒÉng khuy·∫øt",
    "tƒ©nh l·∫°ng": "tƒ©nh l·∫∑ng",
    "v∆°n m√¨nh": "v∆∞∆°n m√¨nh",
    "tr√≤n v√°ng": "cho√°ng v√°ng",
    "ng·∫£ ng∆∞·ªùi": "ng√£ ng∆∞·ªùi",
    "thu d·ªça": "thu d·ªçn",
    "l·∫ª l∆∞·ª°i": "l√® l∆∞·ª°i",
    "lan ƒë√πng": "lƒÉn ƒë√πng",
    "c√≥ ƒë·ªçc": "c√≥ ƒë·ªôc",
    "d∆° m·ªôt": "gi∆° m·ªôt",
    "ch·ªëng c·∫ßm": "ch·ªëng c·∫±m",
    "th·∫±ng th·ª±c": "th·∫≥ng th·ª±c",
    "d∆° tay": "gi∆° tay",
    "quy t·ªß": "quy t·ª•",
    "ngay ng∆∞·ªùi": "ng√¢y ng∆∞·ªùi",
    "ƒëang d∆∞·ª£c": "ƒëan d∆∞·ª£c",
    "k√≠nh c·∫ßn": "k√≠nh c·∫©n",
    "d·∫Øn ch·∫Øc": "r·∫Øn ch·∫Øc",
    "ƒëi·ªÅu kh√°c": "ƒëi√™u kh·∫Øc",
    "g·∫πo": "gh·∫πo",
    "t·ª•c tr∆∞·ªüng": "t·ªôc tr∆∞·ªüng",
    "c·∫ßm qu·ªëc": "c·∫ßm cu·ªëc",
    "phi·ªÅn r·ªëi": "phi·ªÅn r·ªìi",
    "nghi√™m tr√¨nh": "nghi√™m ch·ªânh",
    "ganh ƒë√πa": "ganh ƒëua",
    "ng∆∞·ªùi tr·ªã t·ªët": "ng∆∞·ªùi ch·ªã t·ªët",
    "chi kh√≠": "ch√≠ kh√≠",
    "kh√¥ng mang nguy hi·ªÉm": "kh√¥ng m√†ng nguy hi·ªÉm",
    "b·ªôi ch·∫°y": "v·ªôi ch·∫°y",
    "ti√™n xin": "ti√™n sinh",
    "chua s√≥t": "chua x√≥t",
    "l·∫°i xe": "l√°i xe",
    "th·ª©c d·∫≠n": "t·ª©c gi·∫≠n",
    "c·∫°p ƒë√†o": "c·∫∑p ƒë√†o",
    "bi·∫øt ch·ª©c": "bi·∫øt tr∆∞·ªõc",
    "ng∆∞ ng√°c": "ng∆° ng√°c",
    "kh√¥ng m·∫£ng": "kh√¥ng m√†ng",
    "d√™ x·ªìn": "d√™ x·ªìm",
    "s·ª± h√£i": "s·ª£ h√£i",
    "kh√°ch ti·∫øng": "kh√©t ti·∫øng",
    "qu·∫•y d·ªëi": "qu·∫•y r·ªëi",
    "qu·ª∑ xu·ªëng": "qu·ª≥ xu·ªëng",
    "h·ªèa l·ªõn": "h·ªèi l·ªõn",
    "ch·ªù m√¨nh": "tr·ªü m√¨nh",
    "ch√¥ng ch·ª´ng": "tr√¥ng ch·ª´ng",
    "ch·ªß s·ªü": "tr·ª• s·ªü",
    "r√¢m r·ªõm": "r∆°m r·ªõm",
    "cha nam": "tra nam",
    "li·∫øm c·∫ßu": "li·∫øm c·∫©u",
    "ti·ªÅn h√≥a": "ti·∫øn h√≥a",
    "v√£i tr∆∞·ªüng": "v√£i ch∆∞·ªüng",
    "c√†i qu√°i": "c√°i qu√°i",
    "d√¨ c∆°": "g√¨ c∆°",
    "l√™n may": "l√™n m√¢y",
    "ƒëang r√¨u": "ƒëang d√¨u",
    "trung quy·ªÅn": "trung nguy√™n",
    "th√¢n gi√°o": "th·∫ßn gi√°o",
    "tr√≥ng m·∫∑t": "ch√≥ng m·∫∑t",
    "khuya khu·∫•t": "khuya kho·∫Øc",
    "k√™ ƒë√°ng": "cay ƒë·∫Øng",
    "ch·∫°m ch√°n": "ch·∫°m tr√°n",
    "ph·ª•c h∆∞∆°ng": "ph·ª•c h∆∞ng",
    "ch·ªãu tr√πng": "ch·ªãu chung",
    "ph·∫Øn ƒëo√°n": "ph√°n ƒëo√°n",
    "l·∫•√Ω": "l·∫•y",
    "run d√†y": "run r·∫©y",
    "d√†i ngo√†n": "d√†i ngo·∫±n",
    "s√∫c tua": "x√∫c tua",
    "nh·∫Øt gan": "nh√°t gan",
    "b·ªã g√°i": "b·ªã g√£y",
    "ho√†ng s·ª£": "ho·∫£ng s·ª£",
    "t·ªï ch·ª©ng": "t·ªï tr·ª©ng",
    "r·ªìn r·∫≠p": "d·ªìn d·∫≠p",
    "l·ªìng c·ªìn": "l·ªìm c·ªìm",
    "m≈©i r√πi": "m≈©i d√πi",
    "v√≤ th·∫≥ng": "v·ªçt th·∫≥ng",
    "t·∫∑c t·ª´": "t·∫∑c t·ª≠",
    "tu√¥ng l·∫•y": "t√∫m l·∫•y",
    "ch·ªçc th∆∞∆°ng": "tr·ªçng th∆∞∆°ng",
    "b√†o v·ªá": "b·∫£o v·ªá",
    "r√∫t l√πi": "r√∫t lui",
    "h·ª´ l·ªánh": "h·ª´ l·∫°nh",
    "ƒë·ªông quang": "ƒë·ªôn quang",
    "ƒë·ªè gi·ª±t": "ƒë·ªè r·ª±c",
    "ƒëau kh√≠": "ƒëao kh√≠",
    "m≈©i ƒëau": "m≈©i ƒëao",
    "tan t·∫≠t": "t√†n t·∫≠t",
    "m·ª•c ki·∫øm": "m·ªôc ki·∫øm",
    "s·ª£ h·∫£i": "s·ª£ h√£i",
    "x·ª£ h√£i": "s·ª£ h√£i",
    "l√πn ma kh√≠": "lu·ªìng ma kh√≠",
    "c∆∞·ªùi ch·ª´": "c∆∞·ªùi tr·ª´",
    "kh√¥ng qu·∫£": "kh√¥ng qu·∫£n",
    "ch·ª© ƒë√£": "tr∆∞·ªõc ƒë√£",
    "d√™n l√™n": "r√™n l√™n",
    "t·ªè v·∫Ω": "t·ªè v·∫ª",
    "r√µ r·∫°c": "d√µng d·∫°c",
    "tr∆∞·ªüng m√¥n": "ch∆∞·ªüng m√¥n",
    "v√µ ƒë√†ng": "v√µ ƒëang",
    "b·ªô v·ªët": "b·ªô vu·ªët",
    "l√™n c·∫≥m": "l√™n c·∫±m",
    "h·∫øt l√™n": "h√©t l√™n",
    "h√≤a ra": "h√≥a ra",
    "oan ·ªßng": "oan u·ªïng",
    "d·∫°o d·ª±c": "r·∫°o r·ª±c",
    "r·ªùi s·∫Øc": "d·ªùi x√°c",
    "ta ma": "t√† ma",
    "kh√¥ qu√°t": "kh√¥ qu·∫Øt",
    "cao m√¢y": "cau m√†y",
    "nh√¢n nh√≥": "nhƒÉn nh√≥",
    "l·ª•c ƒëi·ªán": "l·ª•c ƒë·ªãa",
    "t·∫°m m√¥n": "t√† m√¥n",
    "tr·ª£t": "ch·ª£t",
    "qu√° l·ªõn": "qu√°t l·ªõn",
    "nh·∫•t b·ªèng": "nh·∫•c b·ªïng",
    "ph·ª• tri·ªán": "ph√π tri·ªán",
    "s∆° l√™n": "gi∆° l√™n",
    "h·ªç gieo": "h√≤ reo",
    "xo√°i kh√≠": "so√°i kh√≠",
    "d∆° b√†n tay": "gi∆° b√†n tay",
    "l√πn linh": "lu·ªìng linh",
    "nh·∫Øc mi·ªáng": "nh·∫øch mi·ªáng",
    "l·ªùi v·ª´a gi√∫p": "l·ªùi v·ª´a d·ª©t",
    "v√¥ t·ª©c": "v√¥ th·ª©c",
    "ng·ª£ ng√πng": "ng·∫°i ng√πng",
    "s·ªù so√£n": "s·ªù so·∫°n",
    "e th·∫πt": "e th·∫πn",
    "chi·∫øc gi∆∞∆°ng": "chi·∫øc r∆∞∆°ng",
    "b·ªì n∆∞·ªõc": "b·ªìn n∆∞·ªõc",
    "thu t√≠nh": "th√∫ t√≠nh",
    "run gi·∫£y": "run r·∫©y",
    "nh·ª•c tr√≠": "nh·ª•t ch√≠",
    "ch·∫ßm ng∆°m": "tr·∫ßm ng√¢m",
    "d√πng m√¨nh": "r√πng m√¨nh",
    "h·ªët h·ªèa": "h·ªët ho·∫£ng",
    "c√¥ng hi·∫øn": "c·ªëng hi·∫øn",
    "h·ªì ho√°n": "h√¥ ho√°n",
    "ngay th·∫•y": "nghe th·∫•y",
    "long lan": "long lanh",
    "b·ªô chuy·ªán": "b·ªô truy·ªán",
    "b·∫£n b·∫°c": "b√†n b·∫°c",
    "x√≥i ca": "so√°i ca",
    "r·∫Øn v·∫£y": "d√°ng v·∫ª",
    "ki·ªÉu thi√™n": "c·ª≠u thi√™n",
    "t·ª©c s·∫≠n": "t·ª©c gi·∫≠n",
    "tri t·ª≠": "chi t·ª≠",
    "tri n·ªØ": "chi n·ªØ",
    "l·∫≠p tr√≠": "l·∫≠p ch√≠",
    "ho√†i b√°o": "ho√†i b√£o",
    "tri·ªát ƒë·ªÅ": "tri·ªát ƒë·ªÉ",
    "qua kh·ª©": "qu√° kh·ª©",
    "quy·ªÅn ti·ªÉu thuy·∫øt": "quy·ªÉn ti·ªÉu thuy·∫øt",
    "t·ª≠ h√¥n": "t·ª´ h√¥n",
    "ch√∫c c∆°": "tr√∫c c∆°",
    "tr√∫c c∆° k·ª∑": "tr√∫c c∆° k·ª≥",
    "ngh·∫πt m·∫∑t": "ngh·ªách m·∫∑t",
    "r·ª©t c√¢u": "d·ª©t c√¢u",
    "d√¢y d·ª´a": "d√¢y d∆∞a",
    "r√∫t suy nghƒ©": "d·ª©t suy nghƒ©",
    "s·ªù c√†m": "s·ªù c·∫±m",
    "c∆∞·ªùi kinh": "c∆∞·ªùi khinh",
    "d√¢y ch·ª©c": "gi√¢y tr∆∞·ªõc",
    "d√¢y sau": "gi√¢y sau",
    "hoa nh·∫£y": "hoa nh√†i",
    "c∆∞·ªõc tr√¢u": "c·ª©c tr√¢u",
    "l·ªü l·ªùi": "l·ª° l·ªùi",
    "hai ƒë·∫•y": "hay ƒë·∫•y",
    "m√¥ t√≠p": "m√¥ tu√Ωp",
    "cho ch·∫øt": "ch√≥ ch·∫øt",
    "ph·∫°m ch·ªß": "ph·∫°m tr√π",
    "chuy·ªÉn c√¥ng": "truy·ªÅn c√¥ng",
    "x∆∞ng h√∫t": "x∆∞ng h√∫p",
    "tr·ªïm tr·ªÖ": "ch·ªïm ch·ªá",
    "ch·ª© b√°t gi·ªõi": "tr∆∞ b√°t gi·ªõi",
    "m√πa h√¥i": "m·ªì h√¥i",
    "h√© to√°ng": "h√©t to√°ng",
    "s·∫Øc ∆∞·ªõp": "x√°c ∆∞·ªõp",
    "nh·∫•t m√©p": "nh·∫øch m√©p",
    "d∆∞∆°ng d∆∞∆°ng": "r∆∞ng r∆∞ng",
    "l·∫°m x√°c": "l·∫°m s√°t",
    "kh·∫£i r√°p": "kh·∫£i gi√°p",
    "long l√†nh": "long lanh",
    "ƒë·∫•m m√°u": "ƒë·∫´m m√°u",
    "dun d·ªÖ": "run r·∫©y",
    "c·ªßa h√°n": "c·ªßa h·∫Øn",
    "b√¨nh ph√≤ng": "b√¨nh phong",
    "cho c·ªët": "tro c·ªët",
    "x·ªâ kh√≥i": "x√¨ kh√≥i",
    "m·ª•i t·ª´": "mu·ªôi t·ª≠",
    "l·∫•p l√°": "l·∫•p la",
    "h√†ng ng·ªôi": "h√†ng ngu·ªôi",
    "l·ª≠a h√≥i": "l·ª´a h√≥i",
    "nh√¢n l·∫°i": "nhƒÉn l·∫°i",
    "h∆°i th·ªüi": "h∆°i th·ªü",
    "qu·∫£nn": "qu·∫£n",
    "lanhh": "lanh",
    "th·∫Ønh": "th√°nh",
    "g·∫£i": "g√£i",
    "s∆∞ t·ªìn": "s∆∞ t√¥n",
    "th∆∞·ªüng c·ªï": "th∆∞·ª£ng c·ªï",
    "thay nghi√™n": "thanh ni√™n",
    "m√πng": "m·ªìm",
    "duy cho c√πng": "suy cho c√πng",
    "tr∆∞·ª£t tr√¥ng": "ch·ª£t tr√¥ng",
    "ngh·∫πt ra": "ngh·ªách ra",
    "s·∫≠n": "gi·∫≠n",
    "nh√©t m√©p": "nh·∫øch m√©p",
    "th·∫£ nhi√™n": "th·∫£n nhi√™n",
    "mi·∫øn rƒÉng": "nghi·∫øn rƒÉng",
    "ƒë·ªëng sang": "ƒë·ªëm s√°ng",
    "tr∆∞·ªüng v·ªÅ": "ch∆∞·ªüng v·ªÅ",
    "c∆∞·ªùng h·∫Øn": "c∆∞·ªùng h√£n",
    "d∆° hai tay": "gi∆° hai tay",
    "c·∫ßu d·∫´n": "c√¢u d·∫´n",
    "gi·∫•c c√¢u": "d·ª©t c√¢u",
    "d∆∞ng d∆∞ng": "r∆∞ng r∆∞ng",
    "cao g·∫Øt": "c√°u g·∫Øt",
    "tay tr·ªùi": "t√†y tr·ªùi",
    "cung b√°i": "c√∫ng b√°i",
    "b·∫£n t√°n": "b√†n t√°n",
    "nh√¢n t·ª≠": "nh√¢n t·ª´",
    "ƒëi·ªán long": "ƒë·ªãa long",
    "ch·ªü m√¨nh": "tr·ªü m√¨nh",
    "ng·ª´ng ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "trao ƒë·∫£o": "chao ƒë·∫£o",
    "khi ch·∫•t": "kh√≠ ch·∫•t",
    "lu√¥ng s·ª©c m·∫°nh": "lu·ªìng s·ª©c m·∫°nh",
    "h·∫øt to√°n": "h√©t to√°n",
    "b·ªì l√¥ b·ªì l√†": "b√¥ l√¥ b√¥ la",
    "ng√†y th·∫Øng": "ng√†y th√°ng",
    "d√® luy·ªán": "r√®n luy·ªán",
    "h∆∞∆°ng th·ªãnh": "h∆∞ng th·ªãnh",
    "s·ª´ng s·ª´ng": "s·ª´ng s·ªØng",
    "tr·∫Øng l·ªá": "tr√°ng l·ªá",
    "ƒë√∫ng ƒë√°ng": "ƒë√∫ng ƒë·∫Øn",
    "ng√†n r·∫≠m": "ng√†n d·∫∑m",
    "d∆∞a cao": "gi∆° cao",
    "ba ng√†y ban m·∫∑t": "ban ng√†y ban m·∫∑t",
    "c·∫≠u t·∫∑c": "c·∫©u t·∫∑c",
    "xe √°o": "x√© √°o",
    "ngaynh": "ngh√™nh",
    "r·ªìi kh·ªèi": "r·ªùi kh·ªèi",
    "c·ª≠u truy·ªÅn": "c·ª≠u chuy·ªÉn",
    "ƒë·ªì ƒë·ªãa": "ƒë·ªì ƒë·ªá",
    "qu√¢n th·ª≠": "qu√¢n t·ª≠",
    "ch·ªçt v√†ng": "ch·ªçt v√†o",
    "th·ªü v√†o": "th·ªü ph√†o",
    "·ªßng c√¥ng": "u·ªïng c√¥ng",
    "trong coi": "tr√¥ng coi",
    "√°o tro√†ng": "√°o cho√†ng",
    "nh√∫ng nh·∫£y": "nh√∫n nh·∫£y",
    "kinh t·ªïm": "kinh t·ªüm",
    "chi·∫øm c·ª©u": "chi·∫øm c·ª©",
    "ngay ƒë√≥n": "ngh√™nh ƒë√≥n",
    "·∫•p √° ·∫•p √∫m": "·∫•p a ·∫•p √∫ng",
    "h√° h√≥c": "h√° h·ªëc",
    "ch∆°n tr∆∞·ª£t": "tr∆°n tr∆∞·ª£t",
    "g√¨ s√°t": "d√≠ s√°t",
    "√¥m tr·∫ßm": "√¥m ch·∫ßm",
    "d∆° l√™n": "gi∆° l√™n",
    "v√®o m√°": "v√©o m√°",
    "l√πng linh kh√≠": "lu·ªìng linh kh√≠",
    "th·∫©m nghƒ©": "th·∫ßm nghƒ©",
    "c·ªØng √©p": "c∆∞·ª°ng √©p",
    "di·ªÖp": "di·ªáp",
    "tay d∆°": "tay gi∆°",
    "ngh·ªâ th·∫ßm": "nghƒ© th·∫ßm",
    "m∆∞a m√†ng": "m∆° m√†ng",
    "n∆∞·ªõc m·∫Øt tr·∫£i": "n∆∞·ªõc m·∫Øt ch·∫£y",
    "d∆∞a ƒëi·ªán tho·∫°i": "gi∆° ƒëi·ªán tho·∫°i",
    "t·ªë r√°c": "t·ªë gi√°c",
    "tu√©": "t√≥e",
    "tay nghe": "tai nghe",
    "m√©ttt": "m√©t",
    "nh·∫£y c·∫´n": "nh·∫£y c·∫´ng",
    "v·ª´a r∆∞·ªõc": "v·ª´a d·ª©t",
    "ch·∫ßm xu·ªëng": "tr·∫ßm xu·ªëng",
    "r∆° ra": "gi∆° ra",
    "g√¢y d·ªëi": "g√¢y r·ªëi",
    "t√™n sinh": "ti√™n sinh",
    "h∆∞ng th√∫": "h·ª©ng th√∫",
    "ƒë·ªìng s·ª± tr∆∞·ªüng": "ƒë·ªïng s·ª± tr∆∞·ªüng",
    "ch√™u": "tr√™u",
    "gi·ªØ r·∫Øc": "d√¨u d·∫Øt",
    "chi·∫øu d·ªçi": "chi·∫øu r·ªçi",
    "t·∫°o gia": "t·∫°o ra",
    "tr√≥i m·∫Øt": "ch√≥i m·∫Øt",
    "ƒë·ªï r·ªìn": "ƒë·ªï d·ªìn",
    "ph√¢n th∆∞·ªüng": "ph·∫ßn th∆∞·ªüng",
    "s·ª≠ng s·ªØng": "s·ª´ng s·ªØng",
    "ch·ªânh chu": "ch·ªân chu",
    "s·ªüi l·ªùi": "x·ªüi l·ªüi",
    "qu·ª≥ c√¥ng ty": "qu√Ω c√¥ng ty",
    "b·ªìn ti·ªÉu th∆∞": "b·ªïn ti·ªÉu th∆∞",
    "tr√≥i trang": "ch√≥i chang",
    "ch·∫Øn ·∫£n": "ch√°n n·∫£n",
    "bu·ªìn d·∫ßu": "bu·ªìn r·∫ßu",
    "ch√πng v·ªõi": "tr√πng v·ªõi",
    "danh ma": "ranh ma",
    "ƒë·∫°i h·∫Øn": "ƒë·∫°i h√°n",
    "ca l·ªõn nu·ªët": "c√° l·ªõn nu·ªët",
    "ca b√©": "c√° b√©",
    "nh·∫≠t nh·∫°t": "nh·ª£t nh·∫°t",
    "thang b·∫±ng": "thƒÉng b·∫±ng",
    "m√°u ch√≥ng": "mau ch√≥ng",
    "qu·ªëc chim": "cu·ªëc chim",
    "danh gi·ªõi": "ranh gi·ªõi",
    "s·∫µn r√≤": "d·∫∑n d√≤",
    "ƒë√≥i d√©t": "ƒë√≥i r√©t",
    "t·ªßng lung": "t√πm lum",
    "c√∫ √†": "c√¥ ·∫£",
    "ch·ªØ ch·ª©ng": "tri·ªáu ch·ª©ng",
    "h∆∞∆°ng th√∫": "h·ª©ng th√∫",
    "c√°i c·∫≠y": "c√°i k·ªá",
    "nh·∫π d·ªçng": "nh·∫π gi·ªçng",
    "nghi√™m d·ªçng": "nghi√™m gi·ªçng",
    "th√≠ch thu": "th√≠ch th√∫",
    "gi√≠t": "r√≠t",
    "l·ªèng ƒë·∫•t": "l√≤ng ƒë·∫•t",
    "gi·∫≠n d·ªè": "d·∫∑n d√≤",
    "ch√∫ng ƒë·ªôc": "tr√∫ng ƒë·ªôc",
    "rƒÉn √°c": "gian √°c",
    "m·ªßm": "m·ªìm",
    "r·ªá ƒëi": "d·∫≠y ƒëi",
    "r·ª©c kho√°t": "d·ª©t kho√°t",
    "k·∫øt s·∫Øt": "k√©t s·∫Øt",
    "ung t√πm": "um t√πm",
    "ch√∫t l√°t": "ch·ªëc l√°t",
    "v·ªè gi·ªëng": "v·ªè r·ªóng",
    "c·∫ßm n√≠n": "c√¢m n√≠n",
    "nh·∫•t b·ªóng": "nh·∫•c b·ªóng",
    "v·ªè gi·ªóng": "v·ªè r·ªóng",
    "ng∆° m·∫∑t da": "ng∆° m·∫∑t ra",
    "mi·ªÖn c∆∞·ªùi": "m·ªâm c∆∞·ªùi",
    "l√¥ l√†": "l√¢u la",
    "b√≠a l√πi": "m√≠a l√πi",
    "ng√¢y chi·∫øn": "ngh√™nh chi·∫øn",
    "nh·∫øn ch·∫∑t": "nghi·∫øn ch·∫∑t",
    "ra t√≥c": "gia t·ªëc",
    "ƒë·∫Øt √Ω": "ƒë·∫Øc √Ω",
    "s·ª£ r·ªßi": "s·ª£ r·ªìi",
    "l√πng nƒÉng l∆∞·ª£ng": "lu·ªìng nƒÉng l∆∞·ª£ng",
    "r√® bi·ªÉu": "d√® bi·ªÉu",
    "chung n√≥": "ch√∫ng n√≥",
    "kinh t·ªùm": "kinh t·ªüm",
    "v·∫´n kh·ªõp": "v·∫∑n kh·ªõp",
    "h·∫°t s·ªëng": "h·∫°t gi·ªëng",
    "hay to": "h√©t to",
    "ƒë·∫ßy d·∫´y": "ƒë·∫ßy r·∫´y",
    "nh·ª•m": "nhu·ªôm",
    "v·ªânh m√©p": "v·ªÉnh m√©p",
    "mang tay": "mang tai",
    "h·ªçc m√°u": "h·ªôc m√°u",
    "d·ªçi s√°ng": "r·ªçi s√°ng",
    "x√≠ch ch·∫∑t": "si·∫øt ch·∫∑t",
    "m·ªìm h·∫øt": "m·ªìm h√©t",
    "bay b·ªèng": "bay b·ªïng",
    "ng·ª©ng ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "b·∫£o tr√¢u": "b·∫£o ch√¢u",
    "nh√†n ch√°n": "nh√†m ch√°n",
    "si·ªÅng x√≠ch": "xi·ªÅng x√≠ch",
    "v√£i c·∫£ tr∆∞·ªùng": "v√£i c·∫£ ch∆∞·ªüng",
    "m·∫∑t may": "m·∫∑t m√†y",
    "x·ªâ c·∫£ kh√≥i": "x√¨ c·∫£ kh√≥i",
    "v·ª±c th·∫£m": "v·ª±c th·∫≥m",
    "ƒë∆∞·ª£c c√£i": "ƒë∆∞·ª£c c√°i",
    "con qu·∫£ ƒëen": "con qu·∫° ƒëen",
    "t√¥i s·∫ßm": "t·ªëi s·∫ßm",
    "gi·ªØ h√¥n l·ªÖ": "d·ª± h√¥n l·ªÖ",
    "ƒë·ªÅu c√†ng": "ƒë·ªÉu c√°n",
    "x√©t ƒë√°nh": "s√©t ƒë√°nh",
    "b√°o th·ªß": "b√°o th√π",
    "tr∆∞·ªùng m·∫Øt": "tr·ª´ng m·∫Øt",
    "xu·∫•t sinh": "s√∫c sinh",
    "ƒë·∫øn m·∫°ng": "ƒë·ªÅn m·∫°ng",
    "ƒëen k·ªãch": "ƒëen k·ªãt",
    "√° ƒë·ªß": "√° ƒë√π",
    "li√™n tr∆∞·ªüng": "li·ªÅn ch∆∞·ªüng",
    "tr√≠ b·∫£o": "ch√≠ b·∫£o",
    "li√™n ch·∫£m": "li√™n tr·∫£m",
    "t·∫©y t√πy": "t·∫©y t·ªßy",
    "rang r·ªông": "giang r·ªông",
    "ƒë·ª´ng h·ªìng": "ƒë·ª´ng h√≤ng",
    "nƒÉm ƒë·∫•m": "n·∫Øm ƒë·∫•m",
    "hung t·∫≠n": "hung t·ª£n",
    "ch∆∞ th·ª©c": "chi√™u th·ª©c",
    "c·∫Øn n√∫t": "c·∫Øn nu·ªët",
    "s√°m x·ªãt": "x√°m x·ªãt",
    "ƒë·∫ßn ·∫©n": "ƒë·∫ßn ƒë·∫ßn",
    "d·ªâ ra": "r·ªâ ra",
    "l∆∞·ªùng m·∫Øt": "l∆∞·ªùm m·∫Øt",
    "ƒë·ªè √¢u": "ƒë·ªè au",
    "thanh tr√¢u": "thanh ch√¢u",
    "co d√∫ng": "co r√∫m",
    "li√™n li·∫øc nh√¨n": "li·ªÅn li·∫øc nh√¨n",
    "ch·∫Øc ƒë·ªãch": "ch·∫Øc n·ªãch",
    "qu√Ω xu·ªëng": "qu·ª≥ xu·ªëng",
    "tr·ªïng c·∫Øp m√¥ng": "ch·ªïng c·∫∑p m√¥ng",
    "t·ªï tr·∫£ng": "t·ªï ch·∫£ng",
    "t√≠m d·ªãm": "t√≠m r·ªãm",
    "tru to√†n": "chu to√†n",
    "so d·ª±": "do d·ª±",
    "r·ªìn l√™n n√£o": "d·ªìn l√™n n√£o",
    "g√¢y r·ª£n": "gh√™ r·ª£n",
    "di·ªát chuy·ªÉn": "d·ªãch chuy·ªÉn",
    "r∆° hai tay": "gi∆° hai tay",
    "ch·ª©c ch√°n": "tr∆∞·ªõc tr√°n",
    "√† ta": "·∫£ ta",
    "ph·∫•t ph∆°i": "ph·∫•t ph∆°",
    "v·∫Ω m·∫∑t": "v·∫ª m·∫∑t",
    "phu qu·∫ßn": "phu qu√¢n",
    "c·ª•c c∆∞·ªõc": "c·ª•c c·ª©t",
    "lau ƒë·∫øn": "lao ƒë·∫øn",
    "gi·ªØ c√¢u": "d·ª©t c√¢u",
    "t·∫•t h·∫£i": "t·∫•t th·∫©y",
    "g·∫°ng gi·ªçng": "g·∫∑ng gi·ªçng",
    "ch·ª©ng m·∫Øt": "tr·ª´ng m·∫Øt",
    "sung k√≠ch": "xung k√≠ch",
    "c√πng b·∫£o": "cu·ªìng b·∫°o",
    "l√™n th·∫•t th√†nh": "l√™n th·∫•t thanh",
    "tr·∫ª l√†m ƒë√¥i": "ch·∫ª l√†m ƒë√¥i",
    "th·ªü r·ªëc": "th·ªü d·ªëc",
    "li·ªÅn tr∆∞·ªüng": "li·ªÅn ch∆∞·ªüng",
    "ti·∫øng s√°ng": "tia s√°ng",
    "ng∆∞∆°i √°o": "ng∆∞·ªùi √°o",
    "nhanh nh∆∞ tr∆∞·ªõc": "nhanh nh∆∞ ch·ªõp",
    "chung ch√∫": "chƒÉm ch√∫",
    "l√† ng∆∞∆°i c·ªßa": "l√† ng∆∞·ªùi c·ªßa",
    "c·ª≠ huy·ªÅn": "c·ª≠u huy·ªÅn",
    "b·∫Øt ch√¨": "b·∫•t tri",
    "g∆∞·ª£ng ·∫°o": "g∆∞·ª£ng g·∫°o",
    "m·ªân c∆∞·ªùi": "m·ªâm c∆∞·ªùi",
    "lau d√†y": "lau gi√†y",
    "nh·ªõng m√†y": "nh∆∞·ªõng m√†y",
    "c·ª©ng h√£n": "c∆∞·ªùng h√£n",
    "gi·∫£ng r·ª°": "r·∫°ng r·ª°",
    "h·∫≠u r·ªá": "h·∫≠u du·ªá",
    "qu·∫•y d√†y": "qu·∫•y r·∫ßy",
    "th·ª©c th·ªüi": "th·ª©c th·ªùi",
    "n√¢ng c·∫ßm": "n√¢ng c·∫±m",
    "l√¢n l∆∞·ª£t": "l·∫ßn l∆∞·ª£t",
    "ng·∫©n m·∫∑t": "ng·∫©ng m·∫∑t",
    "d·∫≠t m√¨nh": "gi·∫≠t m√¨nh",
    "b·ªô r√°ng": "b·ªô d√°ng",
    "ƒëan r∆∞·ª£c": "ƒëan d∆∞·ª£c",
    "n·∫∑ng chƒ©u": "n·∫∑ng trƒ©u",
    "x·ª©ng s·ªü": "s·ªØng s·ªù",
    "lo·∫°n tr·ªçng": "lo·∫°n cho·∫°ng",
    "v·ª•y v√£": "v·ªôi v√£",
    "thong rong": "thong dong",
    "m·ªát m·ªèi nh√¨": "m·ªát m·ªèi nh·ªâ",
    "c√¢y c√∫": "cay c√∫",
    "c√¢y thi·ªát": "cay thi·ªát",
    "ra ra": "gia gia",
    "h·ª•c g·∫•m": "h·ªôp g·∫•m",
    "ng√†n gi·∫£m": "ng√†n d·∫∑m",
    "ng·∫´u nghƒ©": "ng·∫´m nghƒ©",
    "nh√¢n m·∫∑t": "nhƒÉn m·∫∑t",
    "b·∫•t chi b·∫•t gi√°c": "b·∫•t tri b·∫•t gi√°c",
    "ƒë·ªông l·∫°i": "ƒë·ªçng l·∫°i",
    "nhanh ch√≠": "nhanh tr√≠",
    "cho ch√≥t": "cho tr√≥t",
    "qu·ªÅ r·ªën": "qu·ªÅ d·ªën",
    "c·∫£i l·∫°i": "c√£i l·∫°i",
    "tan s∆∞∆°ng": "tan x∆∞∆°ng",
    "tr·∫ª l√†m hai": "ch·∫ª l√†m hai",
    "g·∫∑n r·ªông": "g·∫∑ng gi·ªçng",
    "ngay xong": "nghe xong",
    "d√¨u r·∫Øt": "d√¨u d·∫Øt",
    "s·∫µn d·ªØ": "gi·∫≠n d·ªØ",
    "nhan m·∫∑t": "nhƒÉn m·∫∑t",
    "·ªß √°m": "u √°m",
    "tr·ªïng m√¥ng": "ch·ªïng m√¥ng",
    "c·ª•c c∆∞·ªõt": "c·ª•c c·ª©t",
    "th·∫ßn tr∆∞·ªüng": "th·∫ßn ch∆∞·ªüng",
    "d·ªØ r·ªôi": "d·ªØ d·ªôi",
    "tung tu·∫ø": "tung t√≥e",
    "l√†o ƒë·∫£o": "l·∫£o ƒë·∫£o",
    "ch·ªìng m√¥ng": "ch·ªïng m√¥ng",
    "nh·ªçn ho√°t": "nh·ªçn ho·∫Øc",
    "cao c·∫•u": "c√†o c·∫•u",
    "rƒÉng t∆°": "giƒÉng t∆°",
    "tu·∫πt r·ªùi": "to·∫πt d·ªùi",
    "nu·ªët ·ª©c": "nu·ªët ·ª±c",
    "ƒëƒÉn h·ªìi": "ƒë√†n h·ªìi",
    "r√°n ƒë·∫ßy": "d√°n ƒë·∫ßy",
    "ph√π tr√∫": "ph√π ch√∫",
    "ƒë√¥i m·∫£y": "ƒë√¥i m√†y",
    "m·ªß h√¥i": "m·ªì h√¥i",
    "ti·∫øng th·∫•t th√†nh": "ti·∫øng th·∫•t thanh",
    "n√µ n·∫£": "n√µn n√†",
    "b·ªóng tr·ªëc": "b·ªóng ch·ªëc",
    "c√¢y ch√¢m c·∫£i t√≥c": "c√¢y tr√¢m c√†i t√≥c",
    "∆∞u t·ªëi": "u t·ªëi",
    "l·∫•p lanh": "l·∫•p l√°nh",
    "s·ª©ng s·ªü": "s·ªØng s·ªù",
    "vu·ªët d√¢u": "vu·ªët r√¢u",
    "trang s√°ng": "trƒÉng s√°ng",
    "m·ªânh c∆∞·ªùi": "m·ªâm c∆∞·ªùi",
    "do ƒë·ªông": "dao ƒë·ªông",
    "th·ª≠ l·ªói": "th·ª© l·ªói",
    "tr√∫c l·∫•y": "chu·ªëc l·∫•y",
    "c√°o g·∫Øt": "c√°u g·∫Øt",
    "si√™u ph·∫°m": "si√™u ph√†m",
    "v√∫t c·∫ßm": "vu·ªët c·∫±m",
    "t√¥ng ng√¥n": "t√¥ng m√¥n",
    "b√†i ki·∫øn": "b√°i ki·∫øn",
    "mi·∫øng l·ª•i": "m√≠a l·ª•i",
    "ng·∫≠m v√†o m√π": "ng·∫≠m v√†o m·ªìm",
    "tr·ªëng h√¥ng": "ch·ªëng h√¥ng",
    "ƒë·ªët kh√≠ c·ª•": "ƒë√∫c kh√≠ c·ª•",
    "c·∫°nh gi·ªõi": "c·∫£nh gi·ªõi",
    "nam x∆∞a": "nƒÉm x∆∞a",
    "kinh b·ªâ": "khinh b·ªâ",
    "tr√¥ng ƒë·ª°": "ch·ªëng ƒë·ª°",
    "tr√™n ch√°n": "tr√™n tr√°n",
    "tr·ªëng ƒë·ª°": "ch·ªëng ƒë·ª°",
    "c√°i s·∫Øc": "c√°i x√°c",
    "r∆° l√™n": "gi∆° l√™n",
    "ch√≥ ng√°p ph·∫£i r·ªìi": "ch√≥ ng√°p ph·∫£i ru·ªìi",
    "y√™u √°i": "∆∞u √°i",
    "gi·ªçng gi·∫∑c": "d√µng d·∫°c",
    "ƒë√° l√¥ng nhao": "ƒë√° l√¥ng nheo",
    "c√°o t·ª≠": "c√°o t·ª´",
    "r·∫°t sang": "d·∫°t sang",
    "tr·ª´a ƒë∆∞·ªùng": "ch·ª´a ƒë∆∞·ªùng",
    "khi th·∫ø": "kh√≠ th·∫ø",
    "g·∫°ng h·ªèi": "g·∫∑ng h·ªèi",
    "d·∫´n d·ªØ": "gi·∫≠n d·ªØ",
    "ƒë√≠t n·ªïi": "ƒë√≠t n·ªìi",
    "cho m√†y": "chau m√†y",
    "ng√¢y ngang": "ngh√™nh ngang",
    "nhe giang": "nhe rƒÉng",
    "ƒëi·ªÉm tƒ©nh": "ƒëi·ªÅm tƒ©nh",
    "nghi·∫øn giang": "nghi·∫øn rƒÉng",
    "ƒë·∫Øc tr√≠": "ƒë·∫Øc ch√≠",
    "s√°ng d·ª±ng": "s√°ng r·ª±c",
    "hua tay": "khua tay",
    "tr∆∞·ªüng m·ªôt ph√°t": "ch∆∞·ªüng m·ªôt ph√°t",
    "an ch·ªçn": "ƒÉn tr·ªçn",
    "dang r·ªông": "giang r·ªông",
    "b·∫£o ph√°t": "b·∫°o ph√°t",
    "g√¨ ra": "r·ªâ ra",
    "v√†m v·ª°": "v·∫°m v·ª°",
    "s·∫µn gi·ªØ": "gi·∫≠n d·ªØ",
    "ch·ª£t v·∫≠t": "ch·∫≠t v·∫≠t",
    "x·ªØ r·ªôi": "d·ªØ d·ªôi",
    "dao long": "giao long",
    "m·ªôt tr∆∞·ªùng": "m·ªôt ch∆∞·ªüng",
    "h√°t l·ªõn": "h√©t l·ªõn",
    "nguy√™n d·∫≠n": "ngu√¥i gi·∫≠n",
    "tr∆∞·ªüng v·ª´a r·ªìi": "ch∆∞·ªüng v·ª´a r·ªìi",
    "khi·∫øn tr√°ch": "khi·ªÉn tr√°ch",
    "v√∫t s√¢u": "vu·ªët r√¢u",
    "chi·∫øu d√µi": "chi·∫øu r·ªçi",
    "s·∫£i d·ªçng": "s·∫£i r·ªông",
    "lo·∫°n tro·∫°ng": "lo·∫°n cho·∫°ng",
    "phi√™n tr·ª£": "phi√™n ch·ª£",
    "ng·ªìi s·ªïm": "ng·ªìi x·ªïm",
    "c√† ca": "ca ca",
    "tr·ªëng tay": "ch·ªëng tay",
    "th·∫ßm mƒ©": "th·∫ßm nghƒ©",
    "l·ª´a m·∫Øt": "l∆∞·ªùm m·∫Øt",
    "n√°m ƒë·∫•m": "n·∫Øm ƒë·∫•m",
    "ng·ª©ng m·∫∑t": "ng·∫©ng m·∫∑t",
    "c·∫£ n·∫±m tr√™n": "c√° n·∫±m tr√™n",
    "bam ch·∫∑t": "bƒÉm ch·∫∑t",
    "xin ta ·ª´": "xin ta ∆∞",
    "khing": "khinh",
    "vu·ªët ve c·∫ßm": "vu·ªët ve c·∫±m",
    "d·ª∑ ra": "r·ªâ ra",
    "l·ªìng ng∆∞·ª£c": "l·ªìng ng·ª±c",
    "kh√¥ng ch·∫ø": "kh·ªëng ch·∫ø",
    "quy xu·ªëng": "qu·ª≥ xu·ªëng",
    "n·ª©t n·∫£y": "n·ª©t n·∫ª",
    "ti√™n l√¥i x√°ch": "tia l√¥i s√©t",
    "m·ªôt tr∆∞·ªüng": "m·ªôt ch∆∞·ªüng",
    "d·∫∑n gi√≤": "d·∫∑n d√≤",
    "tr∆∞·ªüng m·ªôt ph√°t": "ch∆∞·ªüng m·ªôt ph√°t",
    "lu·ªìngg": "lu·ªìng",
    "ti√™u l√¥i x√©t": "tia l√¥i s√©t",
    "nh√≠u m·∫£y": "nh√≠u m√†y",
    "m√†n tr·∫Øng": "m√†n ch·∫Øn",
    "m√†n tr·∫Øn": "m√†n ch·∫Øn",
    "r∆∞·ªõc l·ªùi": "d·ª©t l·ªùi",
    "tr·∫Øngg": "tr·∫Øng",
    "lai ƒë·ªông": "lay ƒë·ªông",
    "l·ªó h·ªìng": "l·ªó h·ªïng",
    "vung v·ª©t": "vu√¥ng v·ª©t",
    "nh√¢n d√¢n t·ªÉ": "nh√¢n d√¢n t·ªá",
    "lung cu·ªëng": "lu·ªëng cu·ªëng",
    "nu tri·ªÅu": "nu√¥ng chi·ªÅu",
    "kh√¥ng l·ª≠a": "kh√¥ng l·ª´a",
    "s·ª£i d√¢u": "s·ª£i r√¢u",
    "kinh t·ªìng": "kinh t·ªüm",
    "d√£ d·ª•a": "gi·∫´y d·ª•a",
    "tr·ª£t nh·ªõ": "ch·ª£t nh·ªõ",
    "ph·∫ª tay": "ph·∫©y tay",
    "v·∫©y s√¢u": "v·∫©y r√¢u",
    "ph·∫£n h√°ng": "ph·∫£n kh√°ng",
    "ch√πn ch√¨a kh√≥a": "ch√πm ch√¨a kh√≥a",
    "tr·∫Øng b·ªãch": "tr·∫Øng b·ªách",
    "con d·ªëi": "con r·ªëi",
    "chi√™u ƒë√πa": "tr√™u ƒë√πa",
    "ng·ª´ng ng∆°": "ng·∫©n ng∆°",
    "c∆∞·ªùng c√°p": "c·ª©ng c√°p",
    "chi√™u con": "tr√™u con",
    "√¥ng ch√≥ng": "√¥ng ch√°u",
    "g·∫≠p g·ªÅnh": "g·∫≠p gh·ªÅnh",
    "·ªëng √°nh": "√≥ng √°nh",
    "s√°t v√†ng": "d√°t v√†ng",
    "tr·ª£t l√≥e": "ch·ª£t l√≥e",
    "tr·∫Øng b·ªánh": "tr·∫Øng b·ªách",
    "l√¥n ti·∫øng": "l·ªõn ti·∫øng",
    "s∆° k√Ω": "s·ªù k·ªπ",
    "d·∫°ng sƒÉn h√¥": "r·∫°ng san h√¥",
    "d√£ng d·ª°": "r·∫°ng r·ª°",
    "s√∫c tu": "x√∫c tu",
    "ng·ªçc chai": "ng·ªçc trai",
    "ch·∫≥ng ƒë·∫ßy": "tr√†n ƒë·∫ßy",
    "cho t√†n": "tro t√†n",
    "lan s∆∞∆°ng m√π": "l√†n s∆∞∆°ng m√π",
    "tr·ª£t ng√¢y": "ch·ª£t ng√¢y",
    "ho√†ng tuy·ªÉn": "ho√†ng tuy·ªÅn",
    "·∫©n tr∆∞a": "·∫©n ch·ª©a",
    "c·∫£nh d∆∞·ªõi": "c·∫£nh gi·ªõi",
    "bu·ªôt mi·ªáng": "bu·ªôc mi·ªáng",
    "t∆∞·ªüng tr·ª´ng": "t∆∞·ªüng ch·ª´ng",
    "s√∫p tu": "x√∫c tu",
    "l∆∞ng ch·ªìng": "l∆∞ng tr√≤ng",
    "tr·ª£t m·ªÅm": "ch·ª£t m·ªÅm",
    "m·ªÅm nh≈©ng": "m·ªÅm nh≈©n",
    "kh·ªëng ch·∫øt": "kh√¥ng ch·∫øt",
    "tr∆∞·ª£t l√≥e": "ch·ª£t l√≥e",
    "√°nh s·∫Ω": "anh x√©",
    "tr·∫£i r∆∞·ªùng": "tr·∫£i gi∆∞·ªùng",
    "t·ª´ng d√†i": "t·ª´ng d·∫£i",
    "s·∫µn d√≤": "d·∫∑n d√≤",
    "nh·∫•t ƒë·ªãnh d√£y": "nh·∫•t ƒë·ªãnh s·∫Ω",
    "·∫©m ·∫©m ·∫©m": "·∫ßm ·∫ßm ·∫ßm",
    "dung chuy·ªÉn": "rung chuy·ªÉn",
    "ƒë·ª•c ng√¢u": "ƒë·ª•c ng·∫ßu",
    "·ªì ·ªì ·ªì": "√π √π √π",
    "l·∫°nh b√∫a": "l·∫°nh bu·ªëc",
    "ch·∫£y r∆∞·ªùng": "tr·∫£i gi∆∞·ªùng",
    "gƒÉng t·∫Øc": "gang t·∫•c",
    "m√™ nu·ªôi": "m√™ mu·ªôi",
    "·ªßng ·ªßc": "√πng ·ª•c",
    "·ª´c": "·ª±c",
    "trong tr√®o": "trong tr·∫ªo",
    "t·ªët c√πng": "t·ªôt c√πng",
    "gi·∫≠n t√≥c": "r·ª£n t√≥c",
    "t√≥c g√°i": "t√≥c g√°y",
    "d√£y ru·ªông": "gi√£y gi·ª•a",
    "l√¢y chuy·ªÉn": "lay chuy·ªÉn",
    "nhu·ªëng": "nhu·ªëm",
    "ch·ªü tay": "tr·ªü tay",
    "the the": "the th√©",
    "trao ra": "tr√†o ra",
    "bu√¥ng l√≤ng": "bu√¥ng l·ªèng",
    "d√£y d·ª•": "gi√£y gi·ª•a",
    "m·ªëi b·ªè b·ªÅ": "mu·ªëi b·ªè b·ªÉ",
    "ng·ªìi v·ªãt": "ng·ªìi ph·ªãch",
    "run d·∫≠y": "run r·∫©y",
    "lu·∫≠n l·ªù": "l∆∞·ª£n l·ªù",
    "thi·ªÅn c·∫≠n": "thi·ªÉn c·∫≠n",
    "th·ªßy t√¨nh": "th·ªßy tinh",
    "s√°t s·ªëng": "x√°c s·ªëng",
    "b√≥ng gi√°ng": "b√≥ng d√°ng",
    "ng∆∞a ng√°c": "ng∆° ng√°c",
    "n∆∞·ªõc to√°c": "n·ª©t to√°c",
    "khe n∆∞·ªõc": "khe n·ª©t",
    "n∆∞·ªõc ch·ª´ng": "nu·ªët ch·ª≠ng",
    "s·∫Ω r·ª•": "gi√£y gi·ª•a",
    "gi·ª°ng": "gi·ª°n",
    "d√£y d·ª•": "gi√£y gi·ª•a",
    "ng∆∞∆°ng h√°c": "ng∆° ng√°c",
    "sƒÉn h√¥": "san h√¥",
    "r√°c r√°c r√°c": "r·∫Øc r·∫Øc r·∫Øc",
    "qu·∫£ ch·ª©ng": "qu·∫£ tr·ª©ng",
    "ti√™m m·ªù m·ªãt": "tia m·ªù m·ªãt",
    "ng·ªçc chai": "ng·ªçc trai",
    "ch·ª©ng c√∫t": "tr·ª©ng c√∫t",
    "k·ªÅ rau": "k·ªÅ dao",
    "m·ªôt ph√™n": "m·ªôt phen",
    "qu·∫£ ch·ª©ng": "qu·∫£ tr·ª©ng",
    "nh√† nh·∫°t": "nh√†n nh·∫°t",
    "√°o tr√†ng": "√°o cho√†ng",
    "th·ªã th·∫ßm": "th√¨ th·∫ßm",
    "hi√™u v≈©": "khi√™u v≈©",
    "th·ªßy chi·ªÅu": "th·ªßy tri·ªÅu",
    "huy·∫øt x√¢m": "huy·∫øt s√¢m",
    "th√¢n d∆∞·ª£c": "th·∫ßn d∆∞·ª£c",
    "qu·ª∑ quai": "qu·ª∑ qu√°i",
    "c·ª©ng nh∆∞ s√°t": "c·ª©ng nh∆∞ s·∫Øt",
    "ƒëau th∆∞∆°ng b·∫•t nh·∫≠p": "ƒëao th∆∞∆°ng b·∫•t nh·∫≠p",
    "m√¢y m√¥ng": "m√™nh m√¥ng",
    "huy·∫øt x√°o": "hu√Ωt s√°o",
    "r√£ng r·ª°": "r·∫°ng r·ª°",
    "ghu ch·∫øt": "h√π ch·∫øt",
    "nh·∫°t ƒë∆∞·ª£c": "nh·∫∑t ƒë∆∞·ª£c",
    "ho√†n ho√£n": "ngoan ngo√£n",
    "b√≤ b·ªçc": "bao b·ªçc",
    "tu·ªïi t·∫Øc": "tu·ªïi t√°c",
    "nguy·ªÅn r·ªß": "nguy·ªÅn r·ªßa",
    "h√∫ h√∫ h√∫": "hu hu hu",
    "ch∆∞a r·ª©t": "ch∆∞a d·ª©t",
    "b·ªã ch·∫∑t": "b·ªãt ch·∫∑t",
    "ch·∫°m trung chuy·ªÉn": "tr·∫°m trung chuy·ªÉn",
    "tr·∫°m trung truy·ªÅn": "tr·∫°m trung chuy·ªÉn",
    "tourv√≠t": "tua v√≠t",
    "th∆∞∆°ng ng√†i": "th∆∞a ng√†i",
    "s·∫Øp ti·ªÅn": "s·∫•p ti·ªÅn",
    "gi√†y c·ªôp": "d√†y c·ªôp",
    "kinh chi·∫øu y√™u": "k√≠nh chi·∫øu y√™u",
    "·∫©n d·∫•u": "·∫©n gi·∫•u",
    "nh·ªÖ nh·∫°y": "nh·ªÖ nh·∫°i",
    "m√≥c ph√≠": "m√≥c v√≠",
    "ƒë·ª´ng gi·ªù cho": "ƒë·ª´ng gi·ªü tr√≤",
    "c∆∞·ªùi tr√≥i": "c·ªüi tr√≥i",
    "d√†y cao g√≥t": "gi√†y cao g√≥t",
    "l·ªôt c·ªôp": "l·ªôp c·ªôp",
    "b√π nh√°o": "b√πn nh√£o",
    "s√∫c t√∫": "x√∫c tu",
    "ch·∫≥ng ƒë·∫ßy": "tr√†n ƒë·∫ßy",
    "ch·∫ßm tr·∫ßm": "ch·∫±m ch·∫±m",
    "ch·ªçc l·ªëc": "tr·ªçc l√≥c",
    "t√¢m h∆°i": "tƒÉm h∆°i",
    "s·∫Øc d·ªëi": "r·∫Øc r·ªëi",
    "ch√∫c l·∫•y": "chu·ªëc l·∫•y",
    "r·ª• r·ªó": "d·ª• d·ªó",
    "c√°m r·ªó": "c√°m d·ªó",
    "nh√≠t ng∆∞·ªùi": "nh√≠ch ng∆∞·ªùi",
    "g·∫°m": "g·∫∑m",
    "·ªß r√∫": "·ªß r·ªß",
    "h√† h√™": "h·∫£ h√™",
    "v·ª´a v·∫°n": "v·ª´a v·∫∑n",
    "r·ªßaa": "r·ªßa",
    "·ªánhnhnh": "·ªánh",
    "·ªánhnh": "·ªánh",
    "u·ªëngg": "u·ªëng",
    "·∫´ngg": "·∫´ng",
    "v√≤n v·∫πn": "v·ªèn v·∫πn",
    "b·ªô r√°c": "b·ªô gi√°p",
    "ch∆∞a h√¥m sau": "tr∆∞a h√¥m sau",
    "l·ªôn th·ª•ng": "l·ªôm th·ªôm",
    "d·ªëi ghen": "r·ªëi ren",
    "tri vi·ªán": "chi vi·ªán",
    "xuy·∫øt ch√∫t": "su√Ωt ch√∫t",
    "nu√™": "nu√¥i",
    "g·ª£t ƒë·∫ßu": "g·∫≠t ƒë·∫ßu",
    "khai kh·∫Ω": "khe kh·∫Ω",
    "l·∫•p ƒë·∫©y": "l·∫•p ƒë·∫ßy",
    "chi√™u y√™u": "chi·∫øu y√™u",
    "v·∫°n d·∫°m": "v·∫°n d·∫∑m",
    "ru ngo·∫°n": "du ngo·∫°n",
    "hung m·∫£nh": "hung m√£nh",
    "tr·ªìng l√™n nhau": "ch·ªìng l√™n nhau",
    "ƒëƒÉng ƒëƒÉng": "ƒëang ƒëang",
    "v·∫≠t ƒë·∫ßu": "g·∫≠t ƒë·∫ßu",
    "c·∫•t ƒë·ªï": "c·∫•t ƒë·ªì",
    "mini": "mi ni",
    "tr√≥i tai": "ch√≥i tai",
    "tr√≥i tay": "ch√≥i tai",
    "dung l√™n": "rung l√™n",
    "r√£i n√∫i": "d√£y n√∫i",
    "r√µ r√©t": "d√≤ x√©t",
    "c·ªï h·ªçc": "c·ªï h·ªçng",
    "√¥n ƒë·∫ßu": "√¥m ƒë·∫ßu",
    "b·ªè d·∫≠y": "b√≤ d·∫≠y",
    "tr√≠ch ti·ªát": "ch·∫øt ti·ªát",
    "tue t√≥et": "toe to√©t",
    "g√µng k√≠nh": "g·ªçng k√≠nh",
    "y√™u ·∫•t": "y·∫øu ·ªõt",
    "l√π nhi·ªát": "lu·ªìng nhi·ªát",
    "b·ªãt tay": "b·ªãt tai",
    "nh√© m·∫Øt": "nh√°y m·∫Øt",
    "l·∫ßu m·ªù": "l·ªù m·ªù",
    "th·ªãt v≈©ng": "th·ªãt v·ª•n",
    "ch·∫ßm ƒë·ª•c": "tr·∫ßm ƒë·ª•c",
    "m√Ω m·∫Øt": "m√≠ m·∫Øt",
    "ch·∫ßm th·∫•p": "tr·∫ßm th·∫•p",
    "l·∫°ng l·∫Ω": "l·∫∑ng l·∫Ω",
    "r√≤ x√©t": "d√≤ x√©t",
    "h√¨nh n·ªôn": "h√¨nh n·ªôm",
    "ƒë√¥ng lo·∫°t": "ƒë·ªìng lo·∫°t",
    "lenh canh": "len ken",
    "cam r·ªó": "c√°m gi·ªó",
    "r√¥ng d·∫°": "r∆°m r·∫°",
    "b·ªãn tay": "v·ªãn tay",
    "ƒë√†m nh·∫≠n": "ƒë·∫£m nh·∫≠n",
    "ngh·ªâ ng∆∞·ªùi": "ngh·ªâ ng∆°i",
    "ch·∫ßm ·∫•m": "tr·∫ßm ·∫•m",
    "giao ƒë·ªông": "dao ƒë·ªông",
    "√≠t h·∫ßu": "y·∫øt h·∫ßu",
    "ƒÉn v·∫≠t": "ƒÉn v·∫∑t",
    "tr·ª£t hi·ªÉu": "ch·ª£t hi·ªÉu",
    "m·ªÅm nhu·ªën": "m·ªÅm nh≈©n",
    "tr·∫Øng b·ªÅ": "tr·∫Øng b·ªát",
    "ph·∫øt x·∫πo": "v·∫øt s·∫πo",
    "gi·ªØ t·ª£n": "d·ªØ t·ª£n",
    "phi√™n ƒë√°": "vi√™n ƒë√°",
    "n∆∞·ªõc n·ªü": "n·ª©c n·ªü",
    "c·∫ßm mi·ªáng": "c√¢m mi·ªáng",
    "k·ª≥ th∆°i": "k·ªãp th·ªùi",
    "s√¥ng l√™n": "x√¥ng l√™n",
    "trinh l·ªãch": "ch√™nh l·ªách",
    "c√∫ ƒë·∫ßm": "c√∫ ƒë·∫•m",
    "ng·ª• m√°u": "ng·ª•m m√°u",
    "h·∫≥n √Ω": "h√†n √Ω",
    "tr·∫ßn chu·ªìng": "tr·∫ßn tru·ªìng",
    "r∆°m d·∫°ng": "r∆°m r·∫°",
    "nh·∫°c chung": "nh·∫°c chu√¥ng",
    "ngo√†i ch·ª©": "ngo√†i tr·ª´",
    "sai ƒë·∫Øm": "say ƒë·∫Øm",
    "r√°c ng·ªô": "gi√°c ng·ªô",
    "quy·ªÉn v·ªù": "quy·ªÉn v·ªü",
    "ch·ª≠ t√†": "tr·ª´ t√†",
    "l·ª©c n·ªü": "n·ª©c n·ªü",
    "c√∫i tr√†o": "c√∫i ch√†o",
    "ch·ªë m·∫Øt": "tr·ªë m·∫Øt",
    "th·ªß lao": "th√π lao",
    "d∆° ng√≥n": "gi∆° ng√≥n",
    "kh√¥ng x√≥t": "kh√¥ng s√≥t",
    "ƒë·ªì k·ªµ": "ƒë·ªë k·ªµ",
    "ƒë·∫πp chai": "ƒë·∫πp trai",
    "s√°ng s·ª≠a": "s√°ng s·ªßa",
    "da d√¨": "ra g√¨",
    "n·∫£y n·ªç": "n√†y n·ªç",
    "chai xinh": "trai xinh",
    "v√≥ng v·∫£i": "v·∫Øng v·∫ª",
    "c∆∞·ªùi giƒÉng": "c∆∞·ªùi gian",
    "t·∫Øt nghi·ªáp": "t√°c nghi·ªáp",
    "r√†ng gi·∫£i": "gi·∫£ng gi·∫£i",
    "ch·∫ø t·∫Øc": "ch·∫ø t√°c",
    "lau v·ªÅ": "lao v·ªÅ",
    "ƒë·∫•u k·ªµ": "ƒë·ªë k·ªµ",
    "r·∫±ng co": "gi·∫±ng co",
    "ƒëi√™n c√πng": "ƒëi√™n cu·ªìng",
    "ti·∫øc n√∫i": "ti·∫øc nu·ªëi",
    "b·ªìn ph√°p s∆∞": "b·ªïn ph√°p s∆∞",
    "s√°t xu·∫•t": "x√°c xu·∫•t",
    "d·ª•ng ch·ª©ng": "r·ª•ng tr·ª©ng",
    "b·ªõt qu√°": "b·∫•t qu√°",
    "n·∫±m d·∫°p": "n·∫±m r·∫°p",
    "l·ªìng c·ªìm": "l·ªìm c·ªìm",
    "k√Ω t·ª©c": "kh√≠ t·ª©c",
    "kh√°c ch·∫ø": "kh·∫Øc ch·∫ø",
    "thoang c√°i": "tho√°ng c√°i",
    "ch·∫ßm gi·ªçng": "tr·∫ßm gi·ªçng",
    "haha": "ha ha",
    "tr√™n l·ªùi": "chen l·ªùi",
    "dƒ© nƒÉng": "d·ªã nƒÉng",
    "gi·∫Øt ng∆∞·ªùi": "d·∫Øt ng∆∞·ªùi",
    "d·ªÖ c√¢y": "r·ªÖ c√¢y",
    "ch√¢u b·ªè": "tr√¢u b√≤",
    "phi ƒëau": "phi ƒëao",
    "nh√©t l√™n": "nh·∫øch l√™n",
    "x√≠t ch·∫∑t": "si·∫øt ch·∫∑t",
    "h√°c r√°p": "h·∫Øc gi√°p",
    "g√†o gi·ªëng": "g√†o r·ªëng",
    "ch√†n ra": "tr√†n ra",
    "kh√¢u chung": "kh√¥ng trung",
    "ng∆∞·ªùi g√°": "ng∆∞·ªùi g√£",
    "ch√™u ng∆∞·ªùi": "tr√™u ng∆∞∆°i",
    "s√¢u x√≠": "x·∫•u x√≠",
    "·∫©m m·ªôt ti·∫øng": "·∫ßm m·ªôt ti·∫øng",
    "s∆∞∆°ng kh·ªët": "x∆∞∆°ng c·ªët",
    "b·∫•t h√≥a": "b·∫•t qu√°",
    "v√∫t xu·ªëng": "v·ª©t xu·ªëng",
    "gi·ªëng √≠t h·∫øt": "gi·ªëng y h·ªát",
    "ƒë·ªôc nh√£n l√≤ng": "ƒë·ªôc nh√£n long",
    "vi√™n tr√¢u": "vi√™n ch√¢u",
    "ƒë·ªè tr√≥i": "ƒë·ªè ch√≥i",
    "l·∫∑ng l·∫∑ng": "l·∫≥ng l·∫∑ng",
    "h·∫°t tr√¢u": "h·∫°t ch√¢u",
    "th∆∞∆°ng √†i": "th∆∞a ng√†i",
    "venh": "v√™nh",
    "l·ªó tay": "l·ªó tai",
    "sao tr·ªïi": "sao ch·ªïi",
    "cam t·ª©c": "cƒÉm t·ª©c",
    "bi ph·∫´n h·∫øt": "bi ph·∫´n h√©t",
    "ƒëi·ªÅu luy·ªán": "ƒëi√™u luy·ªán",
    "ƒë·∫ßy √°p": "ƒë·∫ßy ·∫Øp",
    "ph·∫£n n√†n": "ph√†n n√†n",
    "v∆∞∆°ng vai": "v∆∞∆°n vai",
    "th·ªï ƒëi·ªán": "th·ªï ƒë·ªãa",
    "c·ªët ƒëi·ªán": "c·ªôt ƒëi·ªán",
    "m·∫£i nh√¨n": "m√£i nh√¨n",
    "√¥ng l·∫•y b·ª•ng": "√¥m l·∫•y b·ª•ng",
    "trang sƒ©": "tr√°ng sƒ©",
    "ƒë·ªìng su": "ƒë·ªìng xu",
    "k√™u l√† oai oai": "k√™u la oai o√°i",
    "b·∫£y t·∫Øc": "b·∫£y t·∫•c",
    "soi ƒëo": "so ƒëo",
    "t·ª± ri·ªÖu": "t·ª± gi·ªÖu",
    "h√°n th·∫•y": "h·∫Øn th·∫•y",
    "di·∫øng": "gi·∫øng",
    "√† √† √†": "a a a",
    "√† √†": "a a",
    "b·ªìn cung": "b·ªïn cung",
    "ƒëau v√°n": "ƒëo v√°n",
    "m·∫ßy m√≤": "m√†y m√≤",
    "m·ªπ ƒÉn li·ªÅn": "m·ª≥ ƒÉn li·ªÅn",
    "ch·ª©ng g√†": "tr·ª©ng g√†",
    "s√¥ng kh√≥i": "x√¥ng kh√≥i",
    "m·ªôt ti·∫øng ·∫©m": "m·ªôt ti·∫øng ·∫ßm",
    "ng√≥t ng√≥t": "ngo·∫Øc ngo·∫Øc",
    "s√°ch c√°i": "x√°ch c√°i",
    "ch·ª©ng n√†y": "tr·ª©ng n√†y",
    "d∆° ra": "gi∆° ra",
    "v√†ng ·ªëng": "v√†ng √≥ng",
    "c∆∞ rao": "c·ª© giao",
    "ƒë·∫•t ƒë·ªè": "ƒë·∫Øt ƒë·ªè",
    "ng∆∞·ªùi th·∫•y m√πi": "ng·ª≠i th·∫•y m√πi",
    "d·ªØ ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "d·∫´n r√µ": "d·∫∑n d√≤",
    "m·ªëi th·ªß": "m·ªëi th√π",
    "d·∫°p chi·∫øu": "r·∫°p chi·∫øu",
    "b·∫£n c√¥ng": "b·∫£n cung",
    "nh·∫•t n√°ch": "nh·ª©c n√°ch",
    "m·∫∑t d√¢y": "m·∫∑t d√†y",
    "nh·∫£y tr·ªìm": "nh·∫£y ch·ªìm",
    "nguy·ªát qu√™": "nguy·ªát qu·∫ø",
    "tr·ª£ ho√°n": "tri·ªáu ho√°n",
    "lƒÉn kh√≥i": "l√†n kh√≥i",
    "x·∫•u m√∫i": "6 m√∫i",
    "v√†o ng∆∞·ª£c": "v√†o ng·ª±c",
    "r·ªìn √©p": "d·ªìn √©p",
    "r∆∞·ª£u k·∫ø": "di·ªáu k·∫ø",
    "d√¢n d·ªã": "r√™n r·ªâ",
    "phi ph√≥": "ph√¨ ph√≤",
    "veo m√°": "v√©o m√°",
    "r·∫Øn v·∫ª": "d√°ng v·∫ª",
    "gi√≥t": "r√≥t",
    "ch·∫ßm tr·ªì": "tr·∫ßm tr·ªì",
    "th∆∞·ªùng n√≥ng": "th∆∞·ªüng n√≥ng",
    "ƒë√™n cu·ªìng": "ƒëi√™n cu·ªìng",
    "ng·∫•u mi·∫øn": "ng·∫•u nghi·∫øn",
    "li√™n tranh th·ªß": "li·ªÅn tranh th·ªß",
    "nh·∫Øc l√™n": "nh·∫•c l√™n",
    "r·ªôi th·∫≥ng": "d·ªôi th·∫≥ng",
    "tr·∫£ n∆∞·ªõc": "tr√† n∆∞·ªõc",
    "gi·∫≠t tho√°t": "gi·∫≠t th√≥t",
    "m·∫•t ƒë√£": "m·∫•t ƒë√†",
    "b·ªèng gi√°t": "b·ªèng r√°t",
    "r·∫Øt xu·ªëng": "d·∫Øt xu·ªëng",
    "s·∫Ω chau": "s·∫Ω cho",
    "r·∫•t theo": "d·∫Øt theo",
    "thi·∫øu da": "thi·∫øu gia",
    "nh·ªè r·ªông": "nh·ªè gi·ªçng",
    "cung nganh": "cung ngh√™nh",
    "ch·ªâ huy x·ª©": "ch·ªâ huy s·ª©",
    "xanh c·∫£ gi√°i": "xanh c·∫£ d√°i",
    "s·∫Ω ƒë√™n": "s·∫Ω ƒë·∫øn",
    "t·ªè v·ªÅ": "t·ªè v·∫ª",
    "ƒë·∫ßu c·∫Øt m√¥i": "ƒë·∫ßu c·∫Øt moi",
    "vƒÉng l·ªánh": "v√¢ng l·ªánh",
    "r·∫Øc m·∫∑t": "s·∫Øc m·∫∑t",
    "d√†ng ƒë∆∞·ªùng": "gi·∫£ng ƒë∆∞·ªùng",
    "th·ªÉ c√¥": "th·∫ßy c√¥",
    "l·∫°nh r·ªông": "l·∫°nh gi·ªçng",
    "r·ª´ng tay": "d·ª´ng tay",
    "tr∆∞·ªùng h·ªôc": "tr∆∞·ªùng h·ªçc",
    "m·ªôt ƒëau": "m·ªôt ƒëao",
    "ru√¥n gi·ªçng": "run gi·ªçng",
    "h√£y th√†": "h√£y tha",
    "r·∫ßm m∆∞a": "d·∫ßm m∆∞a",
    "r√∫t ƒëau": "r√∫t ƒëao",
    "b√†o ·ª©ng": "b√°o ·ª©ng",
    "b√† gia": "b√† gi√†",
    "tranh l·ªách": "ch√™nh l·ªách",
    "d∆∞·ªõi ch·ª©ng": "d∆∞·ªõi tr∆∞·ªõng",
    "d√©n": "r√©n",
    "b√πng m√°u": "b√∫ng m√°u",
    "khi k√¨nh": "kh√≠ k√¨nh",
    "t·ª´ ra": "t·ª© gia",
    "l·ªÖ gia": "l·∫Ω ra",
    "tr·∫ßm m·∫∑c": "tr·∫ßm m·∫∑t",
    "r·ªëi cu·ªôc": "r·ªët cu·ªôc",
    "ƒëang qu·ª∑": "ƒëang qu·ª≥",
    "gian luy·ªán": "r√®n luy·ªán",
    "bi·∫øn c√¥": "bi·∫øn c·ªë",
    "ba n·ªôi": "b√† n·ªôi",
    "gi·∫£ v√¢ng": "d·∫° v√¢ng",
    "tr∆∞·ªüng t·ª´": "tr∆∞·ªüng t·ª≠",
    "√¢m ch·∫ßm": "√¢m tr·∫ßm",
    "r√∫t ƒë√†o": "r√∫t ƒëao",
    "cha ra": "tra ra",
    "to t·∫Øt": "to t√°t",
    "nh·ªù v√†": "nh·ªù v·∫£",
    "n√≥ng n√†y": "n√≥ng n·∫£y",
    "ƒë·∫ßu chu√¥ng": "ƒë·ªï chu√¥ng",
    "t∆∞ sinh": "ti√™n sinh",
    "v·ªôi d∆°": "v·ªôi gi∆°",
    "tr·∫£ tr√°ch": "ch·∫£ tr√°ch",
    "kho·∫£n vai": "kho·∫£n vay",
    "vai n√≥ng": "vay n√≥ng",
    "s√†ng kho√°i": "s·∫£ng kho√°i",
    "t√¥i vai": "t√¥i vay",
    "sang s·ªõm": "s√°ng s·ªõm",
    "m·ªân c∆∞·ªõi": "m·ªâm c∆∞·ªùi",
    "ƒë√¨nh ∆∞·ªõc": "ƒë√≠nh ∆∞·ªõc",
    "th√°p h∆∞∆°ng": "th·∫Øp h∆∞∆°ng",
    "tr∆∞·ªõng m·∫Øt": "ch∆∞·ªõng m·∫Øt",
    "d·∫´n x√¥i": "gi·∫≠n s√¥i",
    "nh·∫≠p h·ªôc": "nh·∫≠p h·ªçc",
    "b·ªánh th√¢n kinh": "b·ªánh th·∫ßn kinh",
    "vung tr∆∞·ªüng": "vung ch∆∞·ªüng",
    "tr·∫Øn n·∫£n": "ch√°n n·∫£n",
    "m√† k·ªá": "m·∫∑c k·ªá",
    "l·ªôn s·ªôn": "l·ªôn x·ªôn",
    "h√£ng n√≥i": "h·∫µng n√≥i",
    "th√†nh rao": "th√†nh giao",
    "khi t·ª©c": "kh√≠ t·ª©c",
    "ch√™u ch·ªçc": "tr√™u ch·ªçc",
    "kh√°ch x√†o": "kh√°ch s√°o",
    "c·ª©ng c√≤i": "c·ª©ng c·ªèi",
    "x·∫ßm m·∫∑t": "s·∫ßm m·∫∑t",
    "v√µ gi√†": "v√µ gi·∫£",
    "x·∫Øc m·∫∑t": "s·∫Øc m·∫∑t",
    "thi√™u ra": "thi·∫øu gia",
    "s∆∞ng h√¥": "x∆∞ng h√¥",
    "ru√¥n gi·∫©y": "run r·∫©y",
    "ƒë·ªôi tr∆∞·ªùng": "ƒë·ªôi tr∆∞·ªüng",
    "ch√©n tr·∫£": "ch√©n tr√†",
    "run r·ªông": "run gi·ªçng",
    "c·∫•t ch√≥": "c·ª©t ch√≥",
    "d∆° ch√¢n": "gi∆° ch√¢n",
    "nh·∫Øc h·∫Øn l√™n": "nh·∫•c h·∫Øn l√™n",
    "l√™n b·∫£n": "l√™n b√†n",
    "√¥m song": "om s√≤m",
    "l·ª≠ng l·∫´y": "l·ª´ng l·∫´y",
    "·∫£o r√°c": "·∫£o gi√°c",
    "th·ª≠ k·∫ø": "th·ª´a k·∫ø",
    "mau tr√≥ng": "mau ch√≥ng",
    "ai ra": "ai gia",
    "th√®m th√πng": "th√®m thu·ªìng",
    "ch√≥ g√°y": "ch√≥ gh·∫ª",
    "tr·ª± h·ªìi": "tri·ªáu h·ªìi",
    "ai d·ªì": "ai gi√¥",
    "b·∫Øt ch√≥i": "b·∫Øt tr√≥i",
    "b·∫©n thi·ªÅu": "b·∫©n thi·ªÉu",
    "ƒÉn chai": "ƒÉn chay",
    "d·∫•u d∆∞·ªõi": "gi·∫•u d∆∞·ªõi",
    "h·∫øt v√†o": "h√©t v√†o",
    "ch√†o ngai": "ch√†o ng√†i",
    "nay th√¨": "n√†y th√¨",
    "ph·ªü l√°t": "ph·ªù l√°t",
    "bi√™n th√°i": "bi·∫øn th√°i",
    "qu·∫ßn d·ªãp": "qu·∫ßn s·ªãp",
    "d√†i ngoang": "d√†i ngo·∫±ng",
    "thi√™u n·ªØ": "thi·∫øu n·ªØ",
    "trung tin nh·∫Øn": "chu√¥ng tin nh·∫Øn",
    "l·∫©m b·∫ßm": "l·∫©m b·∫©m",
    "ceo": "xi e √¥",
    "cu·ªëc m√°y": "c√∫p m√°y",
    "d√¢y ch√°n": "d√¢y tr√°n",
    "c·ªông qu·∫£n l√Ω": "c·ª•c qu·∫£n l√Ω",
    "t·ª©c d·∫´n": "t·ª©c gi·∫≠n",
    "tr·ªôn ƒë·ªì ƒÉn": "tr·ªôm ƒë·ªì ƒÉn",
    "truy·ªÅn ph√°t nhanh": "chuy·ªÉn ph√°t nhanh",
    "kinh h·∫°c": "kinh ng·∫°c",
    "ch√†o ph√∫ng": "tr√†o ph√∫ng",
    "n√≥i ph√©p": "n√≥i ph√©t",
    "lan l·ªôn": "lƒÉn l·ªôn",
    "d√†i luy·ªán": "r√®n luy·ªán",
    "ch∆°i ƒë√£i": "chi√™u ƒë√£i",
    "√°i tr√†": "√°i ch√†",
    "thi√™u h√†o": "ti√™u hao",
    "ƒë·∫ßu ch·ªçc": "ƒë·∫ßu tr·ªçc",
    "sen m·ªìm": "xen m·ªìm",
    "bay cho": "b√†y tr√≤",
    "h·ªó s∆∞·ª£c": "h·ªón x∆∞·ª£c",
    "ƒëi h·ªôc": "ƒëi h·ªçc",
    "ti·ªác d·ª±a": "ti·ªác r∆∞·ª£u",
    "ph√≤ng ·∫•n": "phong ·∫•n",
    "s·ª≠a c·∫£ gai ·ªëc": "s·ªün c·∫£ gai ·ªëc",
    "xong t·ªõi": "x√¥ng t·ªõi",
    "tung tr∆∞·ªüng": "tung ch∆∞·ªüng",
    "s·ªù dƒ©": "s·ªü dƒ©",
    "nh∆∞ ng∆∞·ªùi": "nh∆∞ ng∆∞∆°i",
    "n√™n ti·∫øp": "li√™n ti·∫øp",
    "b√°o ƒë∆∞·ª£c th·ªß": "b√°o ƒë∆∞·ª£c th√π",
    "m√¢u ch·ªët": "m·∫•u ch·ªët",
    "l√†m ng·ªù": "l√†m ng∆°",
    "ch√™ ng∆∞·ªùi": "tr√™n ng∆∞·ªùi",
    "ch·ª´ng tr·ªã": "tr·ª´ng tr·ªã",
    "mau g√†": "m√†o g√†",
    "nh∆° xu·ªëng": "nh·ªõ xu·ªëng",
    "say khi·∫øn": "sai khi·∫øn",
    "v√°i l·∫°i": "b√°i l·∫°y",
    "roi ra": "roi da",
    "th·∫•t l∆∞ng": "th·∫Øt l∆∞ng",
    "ƒë·ªÉ n·∫•y": "ƒë·∫øn ƒë·∫•y",
    "d·∫° ch·∫øt": "d·ªça ch·∫øt",
    "quy·ªÅn b√≠ kƒ©": "quy·ªÉn b√≠ kƒ©",
    "c·ª±c m·ªôt l·∫ßn": "c∆∞·ª£c m·ªôt l·∫ßn",
    "c·∫ßm m·ªìm": "c√¢m m·ªìm",
    "gi·∫£i ho√†ng": "d√†i ngo·∫±ng",
    "h·ªèng r√¥i": "h·ªèng r·ªìi",
    "b·∫•t ch·∫Øc": "b·∫•t tr·∫Øc",
    "m·ªü m·∫°n": "m·ªü m√†n",
    "th√¢n b√≠": "th·∫ßn b√≠",
    "b·ªìng b√¨nh": "b·ªìng b·ªÅnh",
    "v·∫´n may": "v·∫≠n may",
    "tr·ªçt tr√∫ng": "ch·ªçt tr√∫ng",
    "ch·ªó ƒëong": "ch·ªó ƒëau",
    "kh√¥n ki·∫øp": "kh·ªën ki·∫øp",
    "ti√™n b·ªëi": "ti·ªÅn b·ªëi",
    "ch·∫•p v√°": "ch·∫Øp v√°",
    "lu√¥n phi√™n": "lu√¢n phi√™n",
    "phi·ªÅn t√≥i": "phi·ªÅn to√°i",
    "s√≥ng xo√†i": "s·ªèng so√†i",
    "ƒë√¥ng ng·∫πt": "ƒë√¥ng ngh·∫πt",
    "ph√≤ng vi·∫øt": "ph√≤ng v√≠p",
    "r∆∞·ªùng b·ªánh": "gi∆∞·ªùng b·ªánh",
    "ng√≥i ƒë·∫ßu": "ngoi ƒë·∫ßu",
    "n√†o ng∆°": "n√†o ng·ªù",
    "nghi√™u ngao": "ngh√™u ngao",
    "xong v√†o": "x√¥ng v√†o",
    "sai v·∫≠t": "sai v·∫∑t",
    "do ph√≥": "giao ph√≥",
    "tƒÉng v·∫≠t": "tang v·∫≠t",
    "t·ªë ch·ª©c": "t·ªë ch·∫•t",
    "d·ªëi lo·∫°n": "r·ªëi lo·∫°n",
    "ai r√®": "ai d√®",
    "y·∫øu si·ªÅu": "·ªâu x√¨u",
    "ƒë√°nh ng·ª©t": "ƒë√°nh ng·∫•t",
    "ti·ªÉu hi·ªÉu": "ti·ªÉu h·ªØu",
    "ƒë·∫£ng ch√≠": "ƒë·∫£ng tr√≠",
    "ng·ªØ ki·∫øm": "ng·ª± ki·∫øm",
    "ch·ªçn ƒë·ªùi": "tr·ªçn ƒë·ªùi",
    "t·ª´ ƒë·∫ßu tr√≠ cu·ªëi": "t·ª´ ƒë·∫ßu ch√≠ cu·ªëi",
    "d√£y m·∫°nh": "gi√£y m·∫°nh",
    "ph√°p khi": "ph√°p kh√≠",
    "ngon ng·∫ª": "ngon ngh·∫ª",
    "b·∫ªn": "b√®n",
    "minh m√¥ng": "m√™nh m√¥ng",
    "tha b·ªèng": "tha b·ªïng",
    "cu·ªìng ƒëau": "cu·ªìng ƒëao",
    "ƒë·∫£nh l√≤ng": "ƒë√†nh l√≤ng",
    "ki·ªÉu non": "c·ª´u non",
    "ƒë·ªï ki·∫øp": "ƒë·ªô ki·∫øp",
    "nghi√™n rƒÉng": "nghi·∫øn rƒÉng",
    "canh k√©t": "ken k√©t",
    "d∆° cao": "gi∆° cao",
    "h·ªìng h·ªôp": "h·ªìng h·ªôc",
    "t∆∞∆°i gi√≥i": "t∆∞∆°i r√≥i",
    "d√¢n d·∫°y": "rƒÉn d·∫°y",
    "m·∫•t m√°i": "m·∫•p m√°y",
    "·∫•p t·ªõi": "·∫≠p t·ªõi",
    "m≈©i nh·∫£y": "m≈©i nh·∫°y",
    "m√†n x∆∞∆°ng": "m√†n s∆∞∆°ng",
    "tr·ªôp": "ch·ªôp",
    "m·ªôt ch·∫£o": "m·ªôt tr·∫£o",
    "ƒëong g√≥i": "ƒë√≥ng g√≥i",
    "ch·ª©c ƒë√£": "tr∆∞·ªõc ƒë√£",
    "taxi": "t·∫Øc xi",
    "ti·∫øng gi·ªëng": "ti·∫øng r·ªëng",
    "nh·ª©c ·ªëc": "nh·ª©c √≥c",
    "r∆∞·ª£t th·ªßy": "d∆∞·ª£c th·ªßy",
    "ƒë·ª£i th√≤": "ƒë·ª£i th·ªè",
    "l√†m g·ªçi": "l√†m g·ªèi",
    "√°t ph·∫£i": "·∫Øt ph·∫£i",
    "√† ƒë√π": "√° ƒë√π",
    "v·∫Ω m·ªùi": "v√© m·ªùi",
    "m·∫°ng s√¥ng": "m·∫°ng s·ªëng",
    "quay h√≥a": "quay ngo·∫Øc",
    "ph√¢n m·ªÅm": "ph·∫ßn m·ªÅm",
    "tr√∫c c·ªù": "tr√∫c c∆°",
    "ƒë·ªát m·ª°": "ƒë·ªát m·ª£",
    "h√†n nh·ªõ": "h·∫Øn nh·ªõ",
    "tr√¥n s√¢u": "ch√¥n s√¢u",
    "h·ªèi r√≤": "h·ªèi d√≤",
    "l·∫∑ng l√£ng": "l·∫≥ng l·∫∑ng",
    "nhu·ªën vai": "nh√∫n vai",
    "chƒÉm ch·∫±m": "ch·∫±m ch·∫±m",
    "ng·ªóng nghƒ©": "ng·∫´m nghƒ©",
    "salon": "sa l√¥ng",
    "l·ªánh l√πng": "l·∫°nh l√πng",
    "d·ªëng l√™n": "r·ªëng l√™n",
    "n√≥i b·ªØa": "n√≥i b·ª´a",
    "gi·ªù cao": "gi∆° cao",
    "ba kh√≠": "b√° kh√≠",
    "c∆° th·∫ßy": "c∆° th·ªÉ",
    "√°p ƒë√†o": "√°p ƒë·∫£o",
    "d·∫≠n d·ªØ": "gi·∫≠n d·ªØ",
    "h√°n gi·∫≠n": "h·∫Øn gi·∫≠n",
    "ra chi√™u ch·ª©c": "ra chi√™u tr∆∞·ªõc",
    "kinh k·ªµ": "ki√™n k·ªµ",
    "b·∫•u phi·∫øu": "b·∫•u v√≠u",
    "th·ªß ch·∫£o": "th·ªß tr·∫£o",
    "ch·∫£o ·∫£nh": "tr·∫£o ·∫£nh",
    "qu·∫°p xu·ªëng": "qu·∫∑p xu·ªëng",
    "chi√™u ch·ª©c": "chi√™u th·ª©c",
    "l√†m ƒë√†o": "l√†m ƒëao",
    "·∫£nh ƒë√†o": "√°nh ƒëao",
    "ƒë√†o th·∫ø": "ƒëao th·∫ø",
    "ch·∫£o c√¥ng": "tr·∫£o c√¥ng",
    "ƒë√†o ch√©m": "ƒëao ch√©m",
    "n√°t b∆∞∆°ng": "n√°t b∆∞∆°m",
    "ƒë√°nh gi·∫°p": "ƒë√°nh r·∫°p",
    "ƒë·ªì ra d·ª•ng": "ƒë·ªì gia d·ª•ng",
    "m·ªôt ƒë√†o": "m·ªôt ƒëao",
    "tr·ªëng l√™n": "ch·ªëng l√™n",
    "t·∫£i song": "t·∫£i xong",
    "b·ªô d√£n": "b·ªô d·∫°ng",
    "t√≠ch th√∫": "th√≠ch th√∫",
    "gi·∫≠n ng√†i ƒëi": "d·∫´n ng√†i ƒëi",
    "n√¥ ra": "n√¥ gia",
    "ch·ª©a d·ªçi": "chi·∫øu r·ªçi",
    "khai c·ª≠a": "khe c·ª≠a",
    "d·ªçi v√†o m·∫Øt": "r·ªçi v√†o m·∫Øt",
    "h·ªëc h√°t": "h·ªëc h√°c",
    "kinh h·∫£i": "kinh h√£i",
    "ng·ª±a ng√πng": "ng∆∞·ª£ng ng√πng",
    "thi√™n gi√†y": "thi√™n giai",
    "truy ph√≤ng": "truy phong",
    "c·ªüi ng·ª±a": "c∆∞·ª°i ng·ª±a",
    "kh√¥n l·ª´a": "kh√¥n l∆∞·ªùng",
    "d√≤ng xo√†i": "x·ªèng xo√†i",
    "chip chip": "ch√≠p ch√≠p",
    "k√¨ b√≤": "ki bo",
    "ch·∫øu c·ªë": "chi·∫øu c·ªë",
    "song ƒë·ªùi": "xong ƒë·ªùi",
    "bi·ªát minh": "bi·ªán minh",
    "t·ªµ t·ªµ": "t·ª∑ t·ª∑",
    "di·ªÖu c∆∞·ª£c": "gi·ªÖu c·ª£t",
    "v∆∞∆°ng tay": "v∆∞∆°n tay",
    "d·ªã th·∫≠t": "d·ªã thu·∫≠t",
    "l√°o li·ªÅn": "l√°o li√™n",
    "∆∞·ªõn n∆∞·ªõc m·∫Øt": "·ª©a n∆∞·ªõc m·∫Øt",
    "ch√°u b·ªèng": "ch√°u b·ªìng",
    "tr·∫≠u n∆∞·ªõc": "ch·∫≠u n∆∞·ªõc",
    "chuy·ªán c·∫£nh": "chuy·ªÉn c·∫£nh",
    "thi√™n tri ki√™u n·ªØ": "thi√™n chi ki√™u n·ªØ",
    "th∆∞·ªùng ti·∫øc": "th∆∞∆°ng ti·∫øc",
    "ƒë√¥i da": "ƒë∆° ra",
    "ƒë√°ng bƒÉng": "ƒë√≥ng bƒÉng",
    "tay xanh": "t√°i xanh",
    "m√°u m·ªïng": "m√°u m·ªìm",
    "ƒë·ªãa d√†i": "ƒë·ªãa giai",
    "b·ªï s√∫ng": "b·ªï xu·ªëng",
    "tr·∫°ng ƒë∆∞·ªùng": "ch·∫∑n ƒë∆∞·ªùng",
    "r·ªìn v√†o": "d·ªìn v√†o",
    "xanh sao": "xanh xao",
    "ch·ªëng c·∫£m": "ch·ªëng c·∫±m",
    "ch·∫°m v√†o ch√°n": "ch·∫°m v√†o tr√°n",
    "s·∫µn ra": "gi√£n ra",
    "x√¨ nh·ª•c": "sƒ© nh·ª•c",
    "tr·ªìng b√°nh": "ch·ªìng b√°nh",
    "d√°ng th·∫≥ng": "gi√°ng th·∫≥ng",
    "th·∫Øt ƒë·∫ßy": "to√°t ƒë·∫ßy",
    "ƒë·ª©t x√©o": "li·∫øc x√©o",
    "b√†ng long": "b·∫±ng l√≤ng",
    "s∆∞a tay": "xua tay",
    "thƒÉm ki·∫øn": "tham ki·∫øn",
    "k√™u k·ª≥": "ki√™u k·ª≥",
    "r√°ng b·∫ª": "d√°ng v·∫ª",
    "nƒÉng ta": "n√†ng ta",
    "t·ª∑ n·ªØ": "t·ª≥ n·ªØ",
    "c·ªßa c√°c ng∆∞·ªùi": "c·ªßa c√°c ng∆∞∆°i",
    "m√©o s·ªát": "m√©o x·ªách",
    "c√¥ng n·ªØ": "cung n·ªØ",
    "thi√™n kh√¥ng": "xuy√™n kh√¥ng",
    "li√™n d·∫´n": "li·ªÅn d·∫´n",
    "cu·ªëi tr√†o": "c√∫i ch√†o",
    "nu√¥i t√†i": "n√¥ t√†i",
    "thi th·∫£m": "th√™ th·∫£m",
    "sai ra": "sai gia",
    "b·ªô kho√°i": "b·ªï kho√°i",
    "ƒë·∫°o ra": "ƒë·∫°o gia",
    "huy·ªán nh√†": "huy·ªán nha",
    "th·ª≠a s·ªëng thi·∫øu ch·∫øt": "th·ª´a s·ªëng thi·∫øu ch·∫øt",
    "ch·ªßng m∆∞a": "tr√∫ m∆∞a",
    "c·ª≠ ng·ª°": "c·ª© ng·ª°",
    "th·∫£m th√≠ch": "th·∫£m thi·∫øt",
    "th√†nh ch·ªâ": "th√†nh tr√¨",
    "t·ª•t c√πng": "t·ªôt c√πng",
    "ƒë·ªìng ch·ª©": "ƒë√∫ng ch·ª©",
    "ƒë·ªçt ki·∫øm": "ƒëo·∫°t ki·∫øm",
    "tray gi·∫•u": "che gi·∫•u",
    "li√™n ƒë·ªãnh t·ªôi": "li·ªÅn ƒë·ªãnh",
    "hi·ªÉm nghi": "hi·ªÅm nghi",
    "say m·ªÅn": "say m·ªÅm",
    "d·∫°y chau m√†y": "d·∫°y cho m√†y",
    "ƒë√°m ch√¨m": "ƒë·∫Øm ch√¨m",
    "v·∫•t v·∫£": "v·∫•t v√£",
    "ng√¥i t√π": "ng·ªìi t√π",
    "h√πng,": "h·ª≠m",
    "om song": "om s√≤m",
    "thi·ªát th√¥i": "thi·ªát th√≤i",
    "ƒë√≥ng x√¢m": "ƒë√≥ng s·∫ßm",
    "qu·ª∑ qu·ªµt": "qu·ª∑ quy·ªát",
    "m√† no": "m√° n√≥",
    "n·∫±m lan": "n·∫±m lƒÉn",
    "ƒë·ªô m√°": "ƒë·∫≠u m√°",
    "th·∫ø nhi√™n": "thanh ni√™n",
    "m·∫∑t xeo": "m·∫∑t s·∫πo",
    "g·∫Øt r·ªông": "g·∫Øt gi·ªçng",
    "ng∆∞·ªùi ra ƒë√¢y": "ng∆∞∆°i ra ƒë√¢y",
    "h·ªçc tr·ª•ng": "h·ªçc tr·ªôm",
    "gi·ªù th·ªß ƒëo·∫°n": "gi·ªü th·ªß ƒëo·∫°n",
    "bao v·∫ßy": "bao v√¢y",
    "b·ªì ƒë·∫ßu": "b·ªï ƒë·∫ßu",
    "ch·ª´ng l·ªõn": "tr·ª´ng l·ªõn",
    "d·ªØ t∆∞·ª£ng": "d·ªØ t·ª£n",
    "s∆°n gi√£": "s∆°n d√£",
    "h∆∞ l·∫°nh": "h·ª´ l·∫°nh",
    "tr∆∞·ªüng mu√¥n": "ch∆∞·ªüng m√¥n",
    "r≈© r√†nh": "d·ªó d√†nh",
    "x√°ch g·ªì √°o": "x√°ch c·ªï √°o",
    "v·ªët d√¢u": "vu·ªët r√¢u",
    "rung nh·∫≠p": "dung nh·∫≠p",
    "ch·ªãu h√≥a": "tri·ªáu ho√°n",
    "ng∆∞∆°ng kh√≠": "ng∆∞ng kh√≠",
    "ti√™n ta": "tin ta",
    "vi·ªác v·∫≠t": "vi·ªác v·∫∑t",
    "i·ªÉm tr·ª£": "y·ªÉm tr·ª£",
    "r·ª´ng ch√¢n": "d·ª´ng ch√¢n",
    "kh√¢u ch√∫t": "kh√¥ng ch√∫t",
    "m·ªôt l·∫°i": "m·ªôt l·∫°y",
    "v√¥ chi": "v√¥ tri",
    "h·∫° ch·∫°y": "h·∫° tr·∫°i",
    "l√† li·∫øm": "la li·∫øm",
    "g√£ g·∫´m": "g·∫° g·∫´m",
    "tr∆∞·ªõc ch√°n": "tr∆∞·ªõc tr√°n",
    "tr·∫Øn ki·∫øm": "ch·∫Øn ki·∫øm",
    "n·ªÅ m·∫∑t": "n·ªÉ m·∫∑t",
    "b·ªìn ph√°i": "b·ªïn ph√°i",
    "l·∫°i nh·∫£y": "l·∫£i nh√£i",
    "sang h·ªì": "giang h·ªì",
    "nhau nhau": "nhao nhao",
    "d√¢n v·∫≠t": "d·∫±n v·∫∑t",
    "tr·∫Øn tr∆∞·ªõc": "ch·∫Øn tr∆∞·ªõc",
    "b√°o x√¢y": "b√°o sai",
    "h√°c ƒëao": "h·∫Øc ƒëao",
    "b·∫≠t v√¥ √¢m": "b·∫∑t v√¥ √¢m",
    "ch·∫Øc tay": "ch·∫Øp tay",
    "nhi·ªÅu ph√∫t c·ªßa": "nh·ªù ph√∫c c·ªßa",
    "ch·ª©ng ng·∫°i": "ch∆∞·ªõng ng·∫°i",
    "m·∫Øt tr·ªôt": "m·∫Øt ch·ªôt",
    "b·ªè t·ªõi": "b√≤ t·ªõi",
    "m·∫∑t x·∫πo": "m·∫∑t s·∫πo",
    "xo√†i qua": "xo·∫πt qua",
    "v·∫øt s·∫°ch": "v·∫øt r·∫°ch",
    "cu·ªëi ƒë·∫ßu": "c√∫i ƒë·∫ßu",
    "ng·∫ßn ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "ni·ªám tr√∫": "ni·ªám ch√∫",
    "ph√° ch·ª©ng": "ph√° tr·ª©ng",
    "xe kh√¥ng": "x√© kh√¥ng",
    "th√¢n th·∫ßy": "th√¢n th·ªÉ",
    "n∆∞∆°ng ng∆∞∆°ng": "n∆∞∆°ng n∆∞∆°ng",
    "chuy·ªÉn c·∫°nh": "chuy·ªÉn c·∫£nh",
    "si·∫øt kh·ªâ": "xi·∫øc kh·ªâ",
    "v·ª´a b·∫•t qu√°": "v·ª´a b∆∞·ªõc qua",
    "l√Ω v·∫´n th√¢m": "l√Ω v·∫•n t√¢m",
    "gi·∫£i d·ª•": "gi√£y gi·ª•a",
    "m√®o tam th·∫ø": "m√®o tam th·ªÉ",
    "l√™n tr√≠": "linh tr√≠",
    "th∆° c√∫ng": "th·ªù c√∫ng",
    "h·ª•c g·ªó": "h·ªôp g·ªó",
    "m·∫£nh v√†i": "m·∫£nh v·∫£i",
    "ch√©m ch√∫ng": "ch√©m tr√∫ng",
    "tr·∫ßn an": "tr·∫•n an",
    "d∆° ki·∫øm": "gi∆° ki·∫øm",
    "th√¢n th·ªÉ h√°n": "th√¢n th·ªÉ h·∫Øn",
    "khi h·∫£i": "kh√≠ h·∫£i",
    "h√°n g·∫Øt gi·ªçng": "h·∫Øn g·∫Øt gi·ªçng",
    "l·ª≠a ƒë·∫£o": "l·ª´a ƒë·∫£o",
    "nhi√™n h√°n": "nhi√™n h·∫Øn",
    ", h√°n": ", h·∫Øn",
    "l√° ph·ªß": "l√° ph√π",
    "ph·ªß l·ªói": "ph√π l·ªói",
    "ph·ªß ƒëan": "ph√π ƒëan",
    "ƒëang l√Ω gia": "ƒë√°ng l√Ω ra",
    "ch·ª© phi": "tr·ª´ phi",
    "h√°n li·ªÅn": "h·∫Øn li·ªÅn",
    "l√† h√°n": "l√† h·∫Øn",
    "√¥n m·∫∑t": "√¥m m·∫∑t",
    "l·∫•y h√°n": "l·∫•y h·∫Øn",
    "v·ªõi nh√†": "v·ªõi nha",
    "r√°o h·∫•n": "gi√°o hu·∫•n",
    "l√≤ng h√°n": "l√≤ng h·∫Øn",
    "ph∆°i s√°t": "ph∆°i x√°c",
    "thay h√°n": "th·∫•y h·∫Øn",
    "m·ªçi ng∆∞∆°i": "m·ªçi ng∆∞·ªùi",
    "b·ªô qu√°i": "b·ªï kho√°i",
    "ch√≠nh v·ªã s∆∞": "ch√≠n v·ªã s∆∞",
    "m·∫•t ƒëi ch·ªâ nh·ªõ": "m·∫•t ƒëi tr√≠ nh·ªõ",
    "ch√∫ng anh": "tr√∫ng anh",
    "·ªü d·ªÖ": "·ªü r·ªÖ",
    "rung nhan": "dung nhan",
    "ch√πa ng·∫£": "chu·ªìng g√†",
    "say r·∫•t n·ªìng": "say gi·∫•c n·ªìng",
    "ch√†ng d·ªÖ": "ch√†ng r·ªÖ",
    "ƒëo√°": "ƒë√≥a",
    "ng·ªß ngang": "ng·ªïn ngang",
    "chƒÉm h·ªç": "trƒÉm h·ªç",
    "g·∫ßn d·ªçng": "g·∫±ng gi·ªçng",
    "nguy·ªán bi·ªán": "ng·ª•y bi·ªán",
    "thi th·∫ßm": "th√¨ th·∫ßm",
    "l·∫°i ƒë·ª±ng": "l·∫°i ƒë∆∞·ª£c",
    "nh·ªù v·∫£o": "nh·ªù v√†o",
    "r√°c r·ª≠a": "r√°c r∆∞·ªüi",
    "v√† m·∫∑t": "v·∫£ m·∫∑t",
    "ng∆∞∆°i nh√†": "ng∆∞·ªùi nh√†",
    "t∆∞ chi": "t·ª© chi",
    "th·∫ø ra": "th·∫ø gia",
    "l√£o tr·ª•": "l√£o ch·ªß",
    "h·ªõt tay": "h·∫•t tay",
    "gi·ªõi ly h√¥n": "gi·∫•y ly h√¥n",
    "t·ª± di·ªÖu": "t·ª± gi·ªÖu",
    "ch·ªâ r√πng": "ch·ªâ d√πng",
    "tu·ªïi th√¢n": "t·ªßi th√¢n",
    "s·∫Ω l√†m ƒë√¥i": "x√© l√†m ƒë√¥i",
    "ch·ªâ b·ªõi": "ch·ª≠i b·ªõi",
    "n√≥i x·∫£m": "n√≥i x√†m",
    "m∆∞·ª£n ƒëau": "m∆∞·ª£n ƒëao",
    "b√†n lƒ©nh": "b·∫£n lƒ©nh",
    "ki·ªÉu huy·ªÅn": "c·ª≠u huy·ªÅn",
    "v·ª´a k·ªãch": "v·ªü k·ªãch",
    "x√¥i m√°u": "s√¥i m√°u",
    "giang c·ª≠a": "rƒÉng c·ª≠a",
    "c·ªßa v≈©": "c·ªï v≈©",
    "l√™n ri·∫øt": "l√™n gi·∫øt",
    "g√≥p g√°p": "g·∫•p g√°p",
    "qu·∫£n qu·∫°i": "qu·∫±n qu·∫°i",
    "h√°t tuy·∫øn": "h·∫Øc tuy·∫øn",
    "im du": "im ru",
    "s·ªçt m√°u": "gi·ªçt m√°u",
    "th·∫±ng g√¨": "th·∫±ng r·ªÖ",
    "r∆∞ng r∆∞ng t·ª±": "d∆∞∆°ng d∆∞∆°ng t·ª±",
    "nh·ªè nhau": "nh·ªè nhoi",
    "nh·∫£y c·∫Øn": "nh·∫£y c·∫´ng",
    "d√°m ti·∫øp": "gi√°n ti·∫øp",
    "r·ª• h·ªç": "d·ª• h·ªç",
    "ng∆∞·ªùi nguy·ªát": "ng·ªù ngh·ªách",
    "m√πa m·ªôt": "m√πng m·ªôt",
    "b√≠ch th√¢n": "ƒë√≠ch th√¢n",
    "n·ªïi d·∫´n": "n·ªïi gi·∫≠n",
    "rƒÉng d·ª•ng": "rƒÉng r·ª•ng",
    "gi√°c r∆∞·ª°i": "r√°c r∆∞·ª°i",
    "th√πng gi√°c": "th√πng r√°c",
    "luy√™n thuy√™n": "li√™n thuy√™n",
    "xu√¥n rƒÉng": "s√∫n rƒÉng",
    "t·ªõ n√†y": "t·ªõi nay",
    "s√†ng nghi·ªáp": "s·∫£n nghi·ªáp",
    "th√¢m ch·ªâ": "th·∫ßm ch·ª≠i",
    "l√†nh l·∫°n": "l√†nh l·∫∑n",
    "m√πm": "m·ªìm",
    "thi li·ªÅn": "th√¨ li·ªÅn",
    "gi√† ch·ªß": "gia ch·ªß",
    "ngay kh√¥ng hi·ªÉu": "nghe kh√¥ng hi·ªÉu",
    "√°t ƒë√£": "·∫Øt ƒë√£",
    "trong tr∆∞·ªùng": "tr√¥ng ch·ª´ng",
    "th·∫ßy c∆°": "th·ªùi c∆°",
    "k·ªÉ l·ªÅ": "k·ªÉ l·ªÉ",
    "d√πi ∆∞": "r·ªìi ∆∞",
    "b·∫•t x√°c": "b·∫•t gi√°c",
    "h√≤a h·∫°": "hoa h·∫°",
    "c·∫£ ch√©p": "c√° ch√©p",
    "h√≥a d√≤ng": "h√≥a r·ªìng",
    "mi·∫øng m√πi": "mi·∫øng m·ªìi",
    "√°o phong": "√°o ph√¥ng",
    "lo√†i lo·∫°t": "l√≤e lo·∫πt",
    "kim ƒë·ªçc": "kim ƒë·ªôc",
    "v√¥ tr√¨": "v√¥ tri",
    "ch·∫£y h·ªôi": "tr·∫©y h·ªôi",
    "c√°i th·ªâa": "c√°i th√¨a",
    "anh d·ªÖ": "anh r·ªÖ",
    "ti·∫øn hi·ªáu": "t√≠n hi·ªáu",
    "gi√†u g√¨": "r·∫ßu r·ªâ",
    "x√© t·ªçc": "x√© to·∫°t",
    "s·ª©c kho√°c": "d·ª©t kho√°c",
    "ch·∫•p l·∫°i": "ch·∫Øp l·∫°i",
    "suy xoa": "su√Ωt xoa",
    "trong k·ªá": "tr√¥ng c·∫≠y",
    "hi·ªÉm c√≥": "hi·∫øm c√≥",
    "t·ªù d·∫•y": "t·ªù gi·∫•y",
    "ch·ªù tay": "tr·ªü tay",
    "d·ªëi d√≠t": "r·ªëi r√≠t",
    "nhanh nh√†o": "nhanh nh·∫£u",
    "b√® lao": "b√®n lao",
    "nh·ªõ ph√∫c": "nh·ªù ph√∫c",
    "k√Ω m√¥n": "k·ª≥ m√¥n",
    "ch·ªó tr√¥n": "ch·ªó ch√¥n",
    "ki·ªáp th·ªùi": "k·ªãp th·ªùi",
    "r√µng r·∫°c": "d√µng d·∫°c",
    "b·ªã d·∫°": "b·ªã d·ªça",
    "mua l√¢n": "m√∫a l√¢n",
    "cho h·ªÅ": "tr√≤ h·ªÅ",
    "ƒëe ng∆∞·ªùi": "ƒë√® ng∆∞·ªùi",
    "ch√∫c l√°t": "ch·ªëc l√°t",
    "ch√¢n an": "tr·∫•n an",
    "h·ªç reo": "h√≤ reo",
    "khoa ch√¢n": "khoa tr∆∞∆°ng",
    "gia l·ªánh": "ra l·ªánh",
    "nh·∫£y m√°t": "nh√°y m·∫Øt",
    "v∆∞·ªõt ƒëi": "v·ª©t ƒëi",
    "·ªßi·ªÉn truy·ªÅn": "uy·ªÉn chuy·ªÉn",
    "l√£o gia t·ª´": "l√£o gia t·ª≠",
    "l√£o gia t·ª´u": "l√£o gia t·ª´",
    "trinh chi·∫øn": "chinh chi·∫øn",
    "v√¥ kh·ªëng": "vu kh·ªëng",
    "d√≠u d√≠t": "r√≠u r√≠t",
    "h√∫ chi": "hu·ªëng chi",
    "ƒë·∫ßy c·ª≠a": "ƒë·∫©y c·ª≠a",
    "m∆∞a nh∆∞ ch√∫t": "m∆∞a nh∆∞ tr√∫t",
    "rƒÉng l·ªëi": "giƒÉng l·ªëi",
    "c·ªßa v√µ": "c·ªï v√µ",
    "t·∫ßm t√°": "t·∫ßm t√£",
    "ng·ª´ng l√™n": "ng·∫©ng l√™n",
    "r·ªØa thu·ªëc": "r∆∞·ª£u thu·ªëc",
    "xong su·ªëi": "xong xu√¥i",
    "ch√†n ch·ªÅ": "tr√†n tr·ªÅ",
    "l√† gi√°c": "l√† r√°c",
    "h√†n gi·∫£m": "h·∫Øn d√°m",
    "ƒë·ªëi co": "ƒë√¥i co",
    "d·ªëi gi·∫øt": "r·ªëi r√≠t",
    "kh√°n ƒë·∫£i": "kh√°n ƒë√†i",
    "k√™u cƒÉng": "ki√™u cƒÉng",
    "v√™n m·∫∑t": "v√™nh m·∫∑t",
    "chƒÉn ng·∫≠p": "tr√†n ng·∫≠p",
    "ng∆∞∆°i anh em": "ng∆∞·ªùi anh em",
    "m·ªói tr√™u": "m·ªói chi√™u",
    "mai l√†m sao": "may l√†m sao",
    "ho√†ng h·ªìn": "ho·∫£ng h·ªìn",
    "tay m√©t": "t√°i m√©t",
    "h√£ng xem": "h·∫µng xem",
    "v∆°n l√™n": "v∆∞∆°n l√™n",
    "su·ªët cu·ªôc": "r·ªët cu·ªôc",
    "th√†nh th∆°i": "th·∫£nh th∆°i",
    "sai l·∫°": "xa l·∫°",
    "ƒë√¢y ri·∫øng": "ƒë√°y gi·∫øng",
    "xe lan": "xe lƒÉn",
    "bay sa": "bay xa",
    "√¥ ng·ª±c": "√¥m ng·ª±c",
    "t√©p di√™u": "t√©p ri√™u",
    "t·ªôc ph·ªß": "t·ªôc ph·ªï",
    "ch·ªØa tr·∫ßn": "ch·ªØa ch√¢n",
    "s∆∞ hu·ª≥nh": "s∆∞ huynh",
    "v√¥ y√™u": "v√¥ ∆∞u",
    "trong non": "tr√¥ng nom",
    "sanh m·∫∑t": "xanh m·∫∑t",
    "ƒë√°y ri·∫øng": "ƒë√°y gi·∫øng",
    "giam gi√°p": "rƒÉm r·∫Øp",
    "cho c·∫≠y g·∫ßn nh√†": "ch√≥ c·∫≠y g·∫ßn nh√†",
    "ch√≥ ·ªß th·∫ø ng∆∞·ªùi": "ch√≥ ·ª∑ th·∫ø ng∆∞·ªùi",
    "c√°c ng∆∞·ªùi x√†o": "c√°c ng∆∞∆°i sao",
    "n·∫Øm ƒë√¢m": "n·∫Øm ƒë·∫•m",
    "g√£y s·∫Øt": "g·∫≠y s·∫Øt",
    "ch·∫∑n ƒë√°nh": "tr·∫≠n ƒë√°nh",
    "v·ªôi ∆∞u": "v√¥ ∆∞u",
    "lam√¥n": "la m√¥n",
    "r√°c r·ª≠i": "r√°c r∆∞·ªüi",
    "tr·ªùi m·∫Øng": "ch·ª≠i m·∫Øng",
    "·ªõt ·ª©c": "u·∫•t ·ª©c",
    "√Ω th·∫ø hi·∫øp ng∆∞·ªùi": "·ª∑ th·∫ø hi·∫øp ng∆∞·ªùi",
    "ƒë·ªÅu kh√°c h·ªça ti·∫øt": "ƒëi√™u kh·∫Øc h·ªça ti·∫øt",
    "ƒë√≥an": "ƒëo√°n",
    "s·∫Øt chi√™u": "s√°t chi√™u",
    "vƒÉng l·ªùi": "v√¢ng l·ªùi",
    "c·∫°nh r·ª´ng": "c·∫°nh gi∆∞·ªùng",
    "∆∞ m√°u": "·ª© m√°u",
    "tuy ti·ªán": "t√πy ti·ªán",
    "thoan tho√°t": "thoƒÉn tho·∫Øt",
    "chƒÉm c·ª©u": "ch√¢m c·ª©u",
    "nh·∫Øc m√°y": "nh·∫•c m√°y",
    "tr·∫ßn ch·ª©": "ch·∫ßn ch·ª´",
    "h·ªët s·∫Øc": "h·ªët x√°c",
    "d·∫≠y r·ªó": "d·∫°y d·ªó",
    "ph√≥c d√°ng": "v√≥c d√°ng",
    "gia tay": "ra tay",
    "tr·ªãu h√¨nh": "ch·ªãu h√¨nh",
    "gieo l√™n": "reo l√™n",
    "ng√†y r·ªó": "ng√†y gi·ªó",
    "ngay c√¢u": "nghe c√¢u",
    "minh kinh": "minh k√¨nh",
    "√°m kinh": "√°m k√¨nh",
    "ch·ªß n·ªïi": "tr·ª• n·ªïi",
    "d∆° tr∆°n": "gi∆° ch√¢n",
    "tru·∫©n b·ªã": "chu·∫©n b·ªã",
    "kh√≠ k·ªânh": "kh√≠ k√¨nh",
    "ƒë·∫∑t c·ª±c": "ƒë·∫∑t c∆∞·ª£c",
    "c∆∞·ªùi xoa": "c∆∞·ªùi x√≤a",
    "d·ªü gi·ªçng": "gi·ªü gi·ªçng",
    "tin cho": "t√≠nh cho",
    "trao g√°i": "ch√°u g√°i",
    "gi·∫•u v·∫øt": "d·∫•u v·∫øt",
    "l√πi th·ªßi": "l·ªßi th·ªßi",
    "kh√≠·∫øn": "khi·∫øn",
    "trung h·ª£p": "tr√πng h·ª£p",
    "c·∫°m c·ª•i": "c·∫∑m c·ª•i",
    "ch·∫≠n ph√°p": "tr·∫≠n ph√°p",
    "b·∫Øt ch·ªçn": "b·∫Øt tr·ªçn",
    "n·∫Øm m∆°": "n·∫±m m∆°",
    "ba n√£y": "ban n√£y",
    "·∫©n n√°o": "·∫©n n√°u",
    "nh·∫£m ch√°n": "nh√†m ch√°n",
    "c·∫£ ƒë√£ c·∫Øn c√¢u": "c√° ƒë√£ c·∫Øn c√¢u",
    "gi·∫•t l·ªùi": "d·ª©t l·ªùi",
    "v√© nh·∫π": "v√©n nh·∫π",
    "tr√πng ƒë·∫ßu": "tr√πm ƒë·∫ßu",
    "ngay kh√¥ng l·ªçt": "nghe kh√¥ng l·ªçt",
    "li√™n b·ªë tr√≠": "li·ªÅn b·ªë tr√≠",
    "hoang m√†ng": "hoang mang",
    "ƒë∆∞·ªùng cung": "ƒë∆∞·ªùng c√πng",
    "l∆∞u m·ªôt tr·∫≠n": "li·ªÅu m·ªôt tr·∫≠n",
    "kim tr√¢m": "kim ch√¢m",
    "gi√°o h·∫•n": "gi√°o hu·∫•n",
    "v∆∞ th·∫ßn": "vu th·∫ßn",
    "ch∆∞·ªüng l√£o": "tr∆∞·ªüng l√£o",
    "c∆∞ng r·∫Øn": "c·ª©ng r·∫Øn",
    "b√® cong": "b·∫ª cong",
    "ƒëau s·∫Øt": "ƒëao s·∫Øt",
    "k√Ω mu√¥n": "k·ª≥ m√¥n",
    "v√†i chi·ªÅu": "v√†i chi√™u",
    "mu√¥n ch·ªß": "m√¥n ch·ªß",
    "nguy√™n r√πa": "nguy·ªÅn r·ªßa",
    "t·∫•m th·∫Øc": "t·∫•m t·∫Øc",
    "th·∫ßn mu√¥n": "th·∫ßn m√¥n",
    "li√™n n·∫Øm tay": "li·ªÅn n·∫Øm tay",
    "c√≥ tr√∫t": "c√≥ ch√∫t",
    "ƒë·ªÉ ch√≥i": "ƒë·ªÉ tr√≥i",
    "c·ª±c v·ªõi": "c∆∞·ª£c v·ªõi",
    "t∆∞·ªõng m·∫°c": "t∆∞·ªõng m·∫°o",
    "chi√™u c·ªëi": "chi√™u cu·ªëi",
    "thi√™n h·∫° ƒë·ªÉ nh·∫•t": "thi√™n h·∫° ƒë·ªá nh·∫•t",
    "k·ª∑ m√¥n": "k·ª≥ m√¥n",
    "kh·∫øp s·ª£": "khi·∫øp s·ª£",
    "huy·ªÅn mu√¥n": "huy·ªÅn m√¥n",
    "x√πi b·ªçt m√©p": "s√πi b·ªçt m√©p",
    "ƒë∆° c·ª©u": "ƒë∆° c·ª©ng",
    "b·ªè m·∫∑c": "b·ªè m·∫∑t",
    "d√£y r·ªó": "d·∫°y d·ªó",
    "tu·ªïi con nh·ªè": "tu·ªïi c√≤n nh·ªè",
    "d√¢u ri√™u": "r√¢u ria",
    "h√†o h·ª©c": "h√°o h·ª©c",
    "h∆°i h·ª£t": "h·ªùi h·ª£t",
    "d·∫´n d√≤": "d·∫∑n d√≤",
    "v·∫øt x·∫πo": "v·∫øt s·∫πo",
    "n·ªÅ n√†ng": "n·ªÉ nang",
    "c·∫•u xe": "c·∫•u x√©",
    "tr·ªü gi√∫p": "tr·ª£ gi√∫p",
    "v∆∞u th·∫ßn": "vu th·∫ßn",
    "hung t∆∞·ª£ng": "hung t·ª£n",
    "vƒÉng l·ªùi": "v√¢ng l·ªùi",
    "ti·∫øng ·ªïn": "ti·∫øng ·ªìn",
    "g·∫≠p ·∫£nh": "g·∫≠p gh·ªÅnh",
    "lan tr√≤n": "lƒÉn tr√≤n",
    "body": "bo ƒëi",
    "r·ª•c nhau": "gi·ª•c nhau",
    "ti·∫øng t√¢m": "ti·∫øng tƒÉm",
    "c·ªôp l√≥c": "c·ªôc l·ªëc",
    "ni·ªÅm n·ªùi": "ni·ªÅm n·ªü",
    "d·ª• v√†o ch·ªìng": "d·ª• v√†o tr√≤ng",
    "ch·ªát ƒë·ªÉ": "tri·ªát ƒë·ªÉ",
    "ly d·ª±": "ly r∆∞·ª£u",
    "xeo l√™n": "reo l√™n",
    "nickname": "n√≠t nem",
    "l·∫•y ph√©p": "l·ªÖ ph√©p",
    "ng·ª±a c∆∞·ªùi": "g∆∞·ª£ng c∆∞·ªùi",
    "ng·ªè l·ªëi": "ng·ªè l·ªùi",
    "tr·∫£ h√†m": "ch·∫£ ham",
    "s∆∞·ª°ng ch√¢n": "s∆∞·ª£ng tr√¢n",
    "em d·ªÖ": "em r·ªÖ",
    "m·ªßng": "m·ªìm",
    "tr·∫£ d·∫°y": "ch·∫£ d·∫°y",
    "d·∫°o ch·ª©c": "d·∫°o tr∆∞·ªõc",
    "ƒë√¥ c·ªï": "ƒë·ªì c·ªï",
    "t·∫£ √°c": "t√† √°c",
    "kh√∫c x√°o": "kh√∫c s√°o",
    "tr·∫ª c·ªßi": "ch·∫ª c·ªßi",
    "thi ho·∫°": "thi h·ªça",
    "con d·ªÖ": "con r·ªÖ",
    "l√£o gia t·ª©": "l√£o gia t·ª≠",
    "ch·∫≠t t·ª±": "tr·∫≠t t·ª±",
    "ƒÉn ƒë·∫•t": "ƒÉn ƒë·ª©t",
    "nguy√™n chi·∫øn": "ngh√™nh chi·∫øn",
    "ch·∫•n ti·ªám": "tr·∫•n ti·ªám",
    "c√¢y ƒë√°ng": "cay ƒë·∫Øng",
    "m·ªôt kh√¥ng h√†i": "m·ªôt kh√¥ng hai",
    "gieo h√≤": "reo h√≤",
    "t√† t∆°i": "t·∫£ t∆°i",
    "n√∫t tr∆∞·ªüng": "nu·ªët ch·ª≠ng",
    "l√£nh gi√°": "l·∫°nh gi√°",
    "cam h·∫≠n": "cƒÉm h·∫≠n",
    "m·ªôt s·ªõp": "m·ªôt x·∫•p",
    "nghƒ© nh√¢n": "m·ªπ nh√¢n",
    "d·ªói ngh·ªÅ": "r·ªói ngh·ªÅ",
    "t√™n ƒëi·ªÉu": "t√™n ƒë·ªÉu",
    "thi√™u gia": "thi·∫øu gia",
    "lu√¥n ti·∫øng": "l·ªõn ti·∫øng",
    "ƒë·ªì ƒë·ªÅu": "ƒë·ªì ƒë·ªÉu",
    "m∆∞a h·ªì": "m∆° h·ªì",
    "v√†ng l√™n": "vang l√™n",
    "d∆° n·∫Øm ƒë·∫•m": "gi∆° n·∫Øm ƒë·∫•m",
    "kh√≥c ·∫©m": "kh√≥c ·∫ßm",
    "ƒëi√™n r·ªï": "ƒëi√™n r·ªì",
    "ƒë√πa d·∫´n": "ƒë√πa gi·ª°n",
    "sofa": "s√¥ pha",
    "tr√°n tr∆∞·ªõc": "ch·∫Øn tr∆∞·ªõc",
    "l√®n v√†o": "l·∫ªn v√†o",
    "·∫•p ƒë·∫øn": "·∫≠p ƒë·∫øn",
    "h·∫πn ch·ª©": "h·∫πn tr∆∞·ªõc",
    "tuy·∫øp": "tu√Ωp",
    "tr√¨nh t·ªÅ": "ch·ªânh t·ªÅ",
    "bao ch·ªçn": "bao tr·ªçn",
    "quang ƒë√°ng": "quang ƒë√£ng",
    "ch·∫≠t kh·ªõp": "tr·∫≠t kh·ªõp",
    "h√† h·ªëc": "h√° h·ªëc",
    "vƒÉn xin": "van xin",
    "d·ª± d√†ng": "d·ªãu d√†ng",
    "sang b√≥ng": "s√°ng b√≥ng",
    "b·ª•t cao": "bu·ªôc cao",
    "ch·ªÖ vai": "tr·ªÖ vai",
    "ƒë·∫ßy ƒë·∫°n": "ƒë·∫ßy ƒë·∫∑n",
    "th√¥ng ph·ª©c": "th∆°m ph·ª©c",
    "ƒë·∫©y ·∫•p": "ƒë·∫ßy ·∫Øp",
    "chamberteen": "cham b∆° tin",
    "domain": "ƒë√¥ men",
    "leroy": "ly roi",
    "√¥n ch·∫≠t": "√¥m ch·∫∑t",
    "b·ªë gi·∫£": "b·ªë gi√†",
    "b·∫´u c·ª≠a": "b·∫≠u c·ª≠a",
    "l√Ωt": "li·∫øc",
    "lu·∫≠t phi√™u": "l∆∞·ª£t vi√™u",
    "la l·ªãch": "lai l·ªãch",
    "ch·ªëc m·∫Øt": "ch·ªõp m·∫Øt",
    "th·∫≥ng th√°n": "th·∫≥ng th·∫Øn",
    "ƒëa th·ªÅ": "ƒëa th√™",
    "th·ªÅ thu·ªëc": "th·ªÅ th·ªët",
    "nh·∫Øc nh·ªù": "nh·∫Øc nh·ªü",
    "r∆∞·ªõi √°nh m·∫Øt": "d∆∞·ªõi √°nh m·∫Øt",
    "m·ªì h√¥i h·ªì": "m·ªì h√¥i h·ªôt",
    "che ng∆∞·ª£c": "che ng·ª±c",
    "do d·ªØ": "do d·ª±",
    "wechat": "qui ch√°t",
    "ƒë√¥i s√°ch": "ƒë·ªëi s√°ch",
    "gi·ªù hai tay": "gi∆° hai tay",
    "vƒÉn xin": "van xin",
    "√Ω ƒë·ªï": "√Ω ƒë·ªì",
    "c√¥ ch·∫•p": "c·ªë ch·∫•p",
    "chi√™u ch·ªçc": "tr√™u ch·ªçc",
    "c·ªùt": "c·ª£t",
    "th·∫ßm m√°u": "th·∫•m m√°u",
    "b√†n h√¨nh": "m√†n h√¨nh",
    "b·∫£n ph√≠m": "b√†n ph√≠m",
    "ƒë·ª•c chi·∫øm": "ƒë·ªôc chi·∫øm",
    "l·ªánh lung": "l·∫°nh l√πng",
    "c·∫•p t√¨nh": "c·∫•p t·ªânh",
    "th∆∞·ªùng th·ª©c": "th∆∞·ªüng th·ª©c",
    "radar": "ra ƒëa",
    "ƒë√°y d·∫ßm": "ƒë√°i d·∫ßm",
    "d∆° dao": "gi∆° dao",
    "t√∫ng vai": "t√∫m vai",
    "vansin": "van xin",
    "ch∆° gi√∫p": "ch∆∞a d·ª©t",
    "nh·ªã nh·ª•c": "nh·ªãn nh·ª•c",
    "t√∫ng c·ªï": "t√∫m c·ªï",
    "v·ªÅ hiu": "v·ªÅ h∆∞u",
    "nhiu m√†y": "nh√≠u m√†y",
    "tr√† t·∫•n": "tra t·∫•n",
    "l√†m gi·∫•u": "l√†m d·∫•u",
    "s·ªßa b·∫´y": "s·ªßa b·∫≠y",
    "d∆∞a n·∫Øm ƒë·∫•m": "gi∆° n·∫Øm ƒë·∫•m",
    "d·ªëi b√π": "r·ªëi b√π",
    "d·ªëi tung": "r·ªëi tung",
    "tr·∫≠n m·∫Øt": "tr·ª£n m·∫Øt",
    "tin th·∫•y": "t√¨m th·∫•y",
    "r√†o ƒë·ªì ƒÉn": "giao ƒë·ªì ƒÉn",
    "t√∫ng l·∫•y": "t√∫m l·∫•y",
    "nh·∫•c c·∫ßm": "nh·∫•c c·∫±m",
    "g√≥c d·ªÖ": "g√≥c r·∫Ω",
    "r∆∞·ª£u v√†ng": "r∆∞·ª£u vang",
    "ho√†ng s·ª±": "ho·∫£ng s·ª£",
    "ng·∫ßng ƒë·∫ßu": "ng·∫©ng ƒë·∫ßu",
    "nh·∫Øn t√≠nh": "nh·∫Øn tin",
    "g√£c": "g√°c",
    "r√°m x√¥ng": "d√°m x√¥ng",
    "r·ªông ch√¢n": "d·∫≠m ch√¢n",
    "cu√¥n x√©o": "cu·ªën x√©o",
    "d√™n g√¨": "r√™n r·ªâ",
    "hi√™n h√≤a": "hi·ªÅn h√≤a",
    "trao h·ªèi": "ch√†o h·ªèi",
    "alice": "a l√≠t",
    "xe m√™": "say m√™",
    "hogwarts": "ho qu·ªõt",
    "r√µ h·ªèi": "d√≤ h·ªèi",
    "nguy·ªÖn giang": "nghi·∫øn rƒÉng",
    "ch·∫ßm l·∫Øng": "tr·∫ßm l·∫Øng",
    "ch·ªù mu·ªôn": "ch∆∞a mu·ªôn",
    "ng√¥ng c·ªßng": "ng√¥ng cu·ªìng",
    "ch√¨ v√†o": "ch·ªâ v√†o",
    "mado": "ma ƒë√¥",
    "vazin": "van xin",
    "khoai khoang": "khoe khoang",
    "t·∫Øt h·∫Øn": "t√°t h·∫Øn",
    "c√°i gi√°m": "c√°i r·∫Øm",
    "m·ªôt ch·∫≠n": "m·ªôt tr·∫≠n",
    "v·∫ª m·∫Øt": "v·∫ª m·∫∑t",
    "t√¨nh gi·∫•c": "t·ªânh gi·∫•c",
    "gi·ªù nay": "gi·ªù n√†y",
    "di√™u nhau": "d√¨u nhau",
    "li√™n n√≥i": "li·ªÅn n√≥i",
    "ƒë√πa b·ªõn": "ƒë√πa b·ª°n",
    "m·∫£nh kh·∫≥ng": "m·∫£nh kh·∫£nh",
    "d·ªÖ d·ª•a": "gi√£y gi·ª•a",
    "ƒë·∫ª c√¥ xu·ªëng": "ƒë√® c√¥ xu·ªëng",
    "r·ª≠a tr√≤": "gi·ªü tr√≤",
    "ben n√≥i": "b√®n n√≥i",
    "ch∆∞a m·∫Øt": "tr∆° m·∫Øt",
    "m·∫π r·ª•t": "m·∫π ru·ªôt",
    "bi·ªát ra": "b·ªãa ra",
    "tr√¢n l√Ω": "ch√¢n l√Ω",
    "ƒëi√™n c·ªßng": "ƒëi√™n cu·ªìng",
    "h·∫≠u ru·ªá": "h·∫≠u du·ªá",
    "kh√¥ l·ªói": "kh√¥i l·ªói",
    "√¥ ·∫ø": "√¥ u·∫ø",
    "ch·ªØa ch·ªã": "ch·ªØa tr·ªã",
    "h·∫≠u d·ªÖ": "h·∫≠u du·ªá",
    "ch∆∞·ªõc l·∫´n sau": "tr∆∞·ªõc l·∫´n sau",
    " th·∫ª th√πng": " th·∫πn th√πng",
    "bi·∫øn thai": "bi·∫øn th√°i",
    "√¥m l·∫ø": "√¥m l·∫•y",
    "an m√†y": "ƒÉn m√†y",
    "v·∫°t v√£nh": "v·∫∑t v√£nh",
    "ch√©nh canh": "ch√©n canh",
    "huy·ªÅn ƒë·∫°i": "huynh ƒë√†i",
    "kh√¥ng d√°m ƒë·∫ßu": "kh√¥ng d√°m ƒë√¢u",
    "l∆∞·ªõc": "li·∫øc",
    "ph·ªß nh√†": "ph·ªß nha",
    "t·ª´ t·ª©": "t·ª´ t·ª´",
    "gia kh·ªèi": "ra kh·ªèi",
    "tr∆∞·ªüng sinh": "tr∆∞·ªùng sinh",
    "gi·∫£ng d√†i": "gi·∫£ng gi·∫£i",
    "lao ki·∫øm": "lau ki·∫øm",
    "c·∫ßu n·ªá": "c√¢u n·ªá",
    "d·∫•u d·∫øm": "d·∫•u gi·∫øm",
    "con d√≤ng": "con r·ªìng",
    "l√≤ng t·ª≠": "long t·ª≠",
    "n·∫øu ph·ª•": "n·ªØ ph·ª•",
    "tr√πng chi√™u": "tr√∫ng chi√™u",
    "ƒëo√†n ki·∫øm": "ƒëo·∫£n ki·∫øm",
    "ƒëo·∫°n ki·∫øm": "ƒëo·∫£n ki·∫øm",
    "con l·ª≠a": "con l·ª´a",
    "l√¥ng t·ª´": "long t·ª≠",
    "mi·∫øu th·ªü": "mi·∫øu th·ªù",
    "nh√† ph·ªß": "nha ph·ªß",
    "x√≠ch ch√∫t": "su√Ωt ch√∫t",
    "h·ªón s·ª±c": "h·ªón x∆∞·ª£c",
    "th·ª©c gi·∫≠n": "t·ª©c gi·∫≠n",
    "t·ªâ n·ªØ": "tu·ª≥ n·ªØ",
    "th·ªïi x√°o": "th·ªïi s√°o",
    "di√™u d·∫Øt": "d√¨u d·∫Øt",
    "qu√† c·∫Øp": "qu√† c√°p",
    "tƒÉng l·ªÖ": "tang l·ªÖ",
    "bi·∫øn ƒë·ªè": "b·∫øn ƒë√≤",
    "mi·∫øu th·ªü": "mi·∫øu th·ªù",
    "om song": "√¥m x·ªìm",
    "l√Ω ƒë·∫°o tr∆∞·ªùng": "l√Ω ƒë·∫°o tr∆∞·ªüng",
    "di h·∫£i": "di h√†i",
    "x√πi b·ªçt": "s·ªßi b·ªçt",
    "d·ªØ t∆∞·ª£ng": "d·ªØ t·ª£n",
    "b·∫±ng hi·ªÉu": "b·∫°n h·ªØu",
    "x·ªët ru·ªôt": "s·ªët ru·ªôt",
    "th√π li·ªÖm": "thu li·ªÖm",
    "huy√™n ƒë√†i": "huynh ƒë√†i",
    "ch√°y ng∆∞·ª£c": "tr√°i ng∆∞·ª£c",
    "ƒë·∫°o hi·ªÉu": "ƒë·∫°o h·ªØu",
    "hi·∫øu k·ª∑": "hi·∫øu k·ª≥",
    "√¥n ch√°n": "√¥m tr√°n",
    "thu sƒ©": "tu sƒ©",
    "t·∫°c l∆∞·ª°i": "t·∫∑c l∆∞·ª°i",
    "ch·∫ßn chu·ªìng": "tr·∫ßn tru·ªìng",
    "chai tr√°ng": "trai tr√°ng",
    "b·ªìn c√¥ng t·ª≠": "b·ªïn c√¥ng t·ª≠",
    "tr√†o thuy·ªÅn": "ch√®o thuy·ªÅn",
    "ph√≤ng phu": "ph√†m phu",
    "d√¢n ch·ªßng": "d√¢n ch√∫ng",
    "quy·ªÅn tr∆∞·ªüng": "quy·ªÅn tr∆∞·ª£ng",
    "x·∫•m x√©t": "s·∫•m s√©t",
    "thinh h√£i": "kinh h√£i",
    "ti√™u ch√°y": "thi√™u ch√°y",
    "d·ªÖ d·ª•a": "gi√£y d·ª•a",
    "th·∫•t x√°ch": "th·∫•t s√°ch",
    "ngu xu√¢n": "ngu xu·∫©n",
    "song sui": "xong xui",
    "h√°m h·∫°i": "h√£m h·∫°i",
    "tr∆∞·ªùng b·ªëi": "tr∆∞·ªüng b·ªëi",
    "x·∫•m s√©t": "s·∫•m s√©t",
    "b·ªìn qu√¢n": "b·ªïn qu√¢n",
    "th·∫≥ng th√°n": "th·∫≥ng th·∫Øn",
    "h√†n r·∫°m": "ng√†n d·∫∑m",
    "nh√£y con": "nh√£i con",
    "run r·ªÉ": "run r·∫©y",
    "r·ª©t kho√°t": "d·ª©t kho√°t",
    "ch√≥i bu·ªôc": "tr√≥i bu·ªôc",
    "b.u.c.c.": "b·ª©c",
    "t·ªâu ƒë·ªá": "ti·ªÉu ƒë·ªá",
    "ch·∫≠n nh√£n": "tr·∫≠n nh√£n",
    "th·∫≥ng th√°n": "th·∫≥ng th·∫Øn",
    "b·ªìn qu√¢n": "b·ªïn qu√¢n",
    "k·∫øp k·∫øp": "ki·∫øp ki·∫øp",
    "tr√πng chi·ªÅu": "tr√∫ng chi√™u",
    "r·ª´ng ch√∫t": "r·ª´ng tr√∫c",
    "c·ª≠ ƒë·ªãa": "c·ª≠u ƒë·ªá",
    "d√†ng d√†i": "gi·∫£ng gi·∫£i",
    "m√πi nh√°m": "m·ªìi nh·∫•m",
    "gi·∫£ ƒë√°o": "gi√° ƒë√°o",
    "nhao m·∫Øt": "nheo m·∫Øt",
    "·∫©m ·∫©m": "·∫ßm ·∫ßm",
    "m√°ng ch·ª≠i": "m·∫Øng ch·ª≠i",
    "nh·∫±n h·∫°": "nhan h·∫°",
    "khai n·ª©t": "khe n·ª©t",
    "x√¨ng x√≠ch": "xi·ªÅng x√≠ch",
    "gi·∫•y r·ª©t": "d√¢y d·ª©t",
    "t√π v√¨": "tu vi",
    "h·ªèa ho√£n": "ho√† ho√£n",
    "l√≤ng h·ªìn": "long h·ªìn",
    "h·ªßy h·ªìn": "h·ªßy h√¥n",
    "trao h·ªèi": "ch√†o h·ªèi",
    "ng√¢y ng·ª≠i": "ng√¢y ng∆∞·ªùi",
    "x·∫£ tinh": "x√† tinh",
    "c·∫ßm ch·∫ø": "c·∫•m ch·∫ø",
    "ƒë·ªìn s√°ng": "ƒë·ªëm s√°ng",
    "in ·ªèi": "inh ·ªèi",
    "b√© gai": "b√© g√°i",
    "tr·∫ßn ch·ªù": "ch·∫ßn ch·ªù",
    "gi√°o ƒë·ªï": "gi√°o ƒë·ªì",
    "nh·ªè nh·ªè": "nho nh·ªè",
    "thi·ªÅu n·ªØ": "thi·∫øu n·ªØ",
    "ƒë√¥ng n√°t": "ƒë·ªìng n√°t",
    "√Ω m·∫°nh": "·ª∑ m·∫°nh",
    "l·∫•y b√†y": "l·∫©y b·∫©y",
    "th√† m·∫°ng": "tha m·∫°ng",
    "th·ªâ th·∫ßm": "th√¨ th·∫ßm",
    "t·ª± x√°c": "t·ª± s√°t",
    "nhi√™m kh·∫Øc": "nghi√™m kh·∫Øc",
    "tr·ªën ·ªü": "ch·ªën ·ªü",
    "b·ªï c√¢u": "b·ªì c√¢u",
    "d√™n g√¨": "r√™n r·ªâ",
    "t·ªï h·ªèa": "t·∫©u h·ªèa",
    "s·ªëng m≈©i": "s√≥ng m≈©i",
    "ƒëong bƒÉng": "ƒë√≥ng bƒÉng",
    "th·∫©m m·∫Øng": "th·∫ßm m·∫Øng",
    "s·∫•m x√©t": "s·∫•m s√©t",
    "x√°t th∆∞∆°ng": "s√°t th∆∞∆°ng",
    "tr√πng t·ªôc": "ch·ªßng t·ªôc",
    "y√™u ƒë√°y": "∆∞u ƒë√£i",
    "m·ªôt ngh√¨n0": "m∆∞·ªùi ngh√¨n",
    "r∆° tay": "d∆° tay",
    "ti·∫øng x√©t": "ti·∫øng s√©t",
    "tr·ª•c t·ªôi": "chu·ªôc t·ªôi",
    "th·∫©m m·ªπ": "th·∫ßm nghƒ©",
    "tia x√©t": "tia s√©t",
    "kh√©t n·∫°ch": "kh√©t n·∫πt",
    "th·ªÅu th·∫£o": "th·ªÅu th√†o",
    "ghen g√¨": "r√™n r·ªâ",
    "m·ª•i": "mu·ªôi",
    "thi·∫øt l√¥i": "thi√™n l√¥i",
    "b√†ng long": "b·∫±ng l√≤ng",
    "m√¥n ƒë·∫ßu": "m√¥n ƒë·ªì",
    "n·ªãnh b·ª°": "n·ªãnh b·ª£",
    "ch√¢n tru": "tr∆°n tru",
    "∆∞ng bi·∫øn": "·ª©ng bi·∫øn",
    "th∆∞·ªùng ƒëi·ªÉm": "th∆∞·ªüng ƒëi·ªÉm",
    "r≈©i ra": "d≈©i ra",
    "ti·∫øng x√©t": "ti·∫øng s√©t",
    "tr·∫ßn ch·ªânh": "ch·∫•n ch·ªânh",
    "gi·∫£ n·ª©t": "r·∫°n n·ª©t",
    "di ch·ª©": "g√¨ ch·ª©",
    "ch∆∞a r·∫Ω": "chia r·∫Ω",
    "s∆∞ huy√™n": "s∆∞ huynh",
    "kh√¢u trung": "kh√¥ng trung",
    "tr·ª£t vang": "ch·ª£t vang",
    "t·ªâ m≈©i": "t·ªâ mu·ªôi",
    "r·∫Øc ng·ªô": "gi√°c ng·ªô",
    "t·ªï s∆∞ ra": "t·ªï s∆∞ gia",
    "di·ªát ch·ª´": "di·ªát tr·ª´",
    "s∆∞ c·∫•p": "s∆° c·∫•p",
    "nh·ª•t tr√≠": "nh·ª•t ch√≠",
    "ƒë·∫ßu nhi": "ƒë·ªì nhi",
    "ch·∫≠t qu√°t": "ch·ª£t qu√°t",
    "hai t·ª≠": "h√†i t·ª≠",
    "s∆∞·ªõng s·ªü": "s·ª≠ng s·ªù",
    "tu·∫ßn l·ªánh": "tu√¢n l·ªánh",
    "c·∫≥n k·∫Ω": "c·∫∑n k·∫Ω",
    "v·∫≠y l√™n": "v·∫≠y n√™n",
    "l√¥ la": "l√¢u la",
    "nhao nhao": "nhau nhau",
    "t·ªï vi": "t·∫©u vi",
    "th∆∞·ªüng s√°ch": "th∆∞·ª£ng s√°ch",
    "ngung c√πng": "ng√¥ng cu·ªìng",
    "minh man": "mi√™n man",
    "c√°o gi·∫£": "c√°o gi√†",
    "s√°c": "x√°c",
    "th√†nh tr√≠": "th√†nh tr√¨",
    "nhao nhau": "nhau nhau",
    "c√°m ∆°n": "c·∫£m ∆°n",
    "trong v√°ng": "cho√°ng v√°ng",
    "b√πn r√πn": "b·ªßn r·ªßn",
    "x∆∞ huynh": "s∆∞ huynh",
    "s·ªü qu·ªµt": "x·∫£o huy·ªát",
    "ng·ªù v∆∞·ª£t": "ng·ªù v·ª±c",
    "ch·ªëi t·ª≠": "ch·ªëi t·ª´",
    "h√≠ h·ª©ng": "h√≠ h·ª≠ng",
    "kh√¥n m·∫∑t": "khu√¥n m·∫∑t",
    "cho b·ª•i": "tro b·ª•i",
    "phu th·ªÅ": "phu th√™",
    "s·ªØ t∆∞·ª£ng": "d·ªØ t·ª£n",
    "n√°o t√†n": "n√£o t√†n",
    "cay r·∫Ω": "cay r√©",
    "l·ªô lƒ©u": "l·ªô li·ªÖu",
    "tr√¥n s·ªëng": "ch√¥n s·ªëng",
    "b√†ng ch·ªß": "bang ch·ªß",
    "th·ªÅ th·∫£m": "th√™ th·∫£m",
    "c·∫°n l·ªùn": "c·∫°n l·ªùi",
    "tr·ªØ ch·ª©ng": "tri·ªáu ch·ª©ng",
    "cha x√©t": "tra x√©t",
    "x∆∞∆°ng x∆∞·ªùn": "x∆∞∆°ng s∆∞·ªùn",
    "h·ªèii": "h·ªèi",
    "ch√¥ng r·ªông": "tr√¥ng r·ªông",
    "khi·∫øp ph√≠a": "khi·∫øp v√≠a",
    "s·∫µn kho√°i": "s·∫£ng kho√°i",
    "ngh√¨n0": "ngh√¨n",
    "s·∫ßm √∫t": "s·∫ßm u·∫•t",
    "t√™ nh√¢n vi√™n": "t√™n nh√¢n vi√™n",
    "ch√∫ng c·ª≠": "tr√∫ng c·ª≠",
    "nh·ªôm": "nhu·ªôm",
    "so bi·ªÉn": "s√≤ bi·ªÉn",
    "quy·ªÅn s·ªï": "quy·ªÉn s·ªï",
    "loa m·∫Øt": "lo√° m·∫Øt",
    "xu√¢n x·∫ª": "su√¥n s·∫ª",
    "d√¢n v∆∞·ªùn": "s√¢n v∆∞·ªùn",
    "n·ªëi r√µ": "n·ªëi d√µi",
    "ch√≠nh x√°ch": "ch√≠nh s√°ch",
    "ch·ªçc g·∫°o": "ch·ªçc gh·∫πo",
    "d·∫≠y r·ªó": "d·∫°y d·ªó",
    "ngang ng√≥ng": "nghe ng√≥ng",
    "h√†o s√†ng": "h√†o s·∫£ng",
    "m√†i gi·ªØa": "m√†i gi≈©a",
    "ph√≤ng x√°ch": "ph√≤ng s√°ch",
    "m·ªôi": "mu·ªôi",
    "mu√¥n n·ªùi": "mu√¥n ƒë·ªùi",
    "trinh chi·∫øn": "chinh chi·∫øn",
    "d·∫ßu x√¥i": "d·∫ßu s√¥i",
    "ph·ª• qu√¢n": "phu qu√¢n",
    "th·ªëng ƒëƒ©nh": "th·ªëng lƒ©nh",
    "y√™u k√©m": "y·∫øu k√©m",
    "r·ª•ng ƒë·ªìng": "ru·ªông ƒë·ªìng",
    "m·ªìm t∆°i": "m√πng t∆°i",
    "th·∫ßm l√£": "th·∫©m l√£o",
    "th·∫ßm phu": "th·∫©m phu",
    "th·∫ßm nh·ªã": "th·∫©m nh·ªã",
    "chen tr√∫c": "chen ch√∫c",
    "l√≤ ƒë·∫£o": "l·∫£o ƒë·∫£o",
    "x√°ch v·ªü": "s√°ch v·ªü",
    "r√® r·∫∑t": "d√® d·∫∑t",
    "qu·ª≥ l·∫°i": "qu·ª≥ l·∫°y",
    "b√£i ki·∫øn": "b√°i ki·∫øn",
    "·ªü d·ªÖ": "·ªü r·ªÉ",
    "ƒëi·ªÉm ƒë·∫°m": "ƒëi·ªÅm ƒë·∫°m",
    "ng∆∞·ªùi ng∆∞·ªùi": "ng·ªùi ng·ªùi",
    "giao ai": "ra oai",
    "h√°n": "h·∫Øn",
    "ph√©t l·ªëi": "ph√°ch l·ªëi",
    "b·ª≠a b√£i": "b·ª´a b√£i",
    "tr∆∞·ªùng m·ª±c": "ch·ª´ng m·ª±c",
    "c√¥ ra": "c√¥ gia",
    "g√¢y g·ªõm": "gh√™ g·ªõm",
    "cam v·∫´n": "cƒÉm ph·∫´n",
    "t·∫°p tr·ªßng": "t·∫°p ch·ªßng",
    "l·ª•c xo√°t": "l·ª•c so√°t",
    "·ªü d·ªÅ": "·ªü r·ªÉ",
    "tr·ªØ th∆∞∆°ng": "ch·ªØa th∆∞∆°ng",
    "ch·ªØa ch·ªã": "ch·ªØa tr·ªã",
    "tay m√©t": "t√°i m√©t",
    "d·ª°n": "gi·ª°n",
    "v√πng roi": "vung roi",
    "bi ch·ª©c": "vi ch·ª©c",
    "x√°ch": "s√°ch",
    "gia h·∫•n": "gia hu·∫•n",
    "o√£n g√°ch": "o√°n gh√©t",
    "tr·∫ßn ch·ªçc": "tr·∫±n tr·ªçc",
    "con d·∫ª": "con r·ªÉ",
    "nh√† ph·ª•": "nh·∫°c ph·ª•",
    "tr√≠ch tr√®": "ch√≠ch cho√®",
    "b√° t·ªõc": "b√° t∆∞·ªõc",
    "v·∫£i v√°n": "v√†i v√°n",
    "d√°m c·ª±c": "d√°m c∆∞·ª£c",
    "th·∫≠p c·ª≠uu": "th·∫≠p c·ª≠u",
    "gi·ªüi tr√≤": "gi·ªü tr√≤",
    "anh h·ª≠m": "anh h√πng",
    " id ": " ai ƒëi ",
    "song s√≥t": "s·ªëng s√≥t",
    "ch·ª£t t·ª±": "tr·∫≠t t·ª±",
    "heavy": "he vy",
    "engen": "en gh√¨nh",
    "thu·∫≠n ƒë√£": "thu·∫≠n ƒë√†",
    "t∆∞·ªùng tr·∫Øn": "t∆∞·ªùng ch·∫Øn",
    "h·∫Øp ·∫£nh": "h·∫Øc ·∫£nh",
    "ti√™n nhu·ªá": "tinh nhu·ªá",
    "nghi√™n chi·∫øn": "ngh√™nh chi·∫øn",
    "ƒë·ªó ki·∫øp": "ƒë·ªô ki·∫øp",
    "sinh t∆∞∆°i": "xinh t∆∞∆°i",
    "tr∆°n truy·ªÅn": "ch√¢n truy·ªÅn",
    "th·∫°nh th√πng": "th·∫πn th√πng",
    "ƒë·ªìng ng√¥n": "ƒë·ªìng m√¥n",
    "tr∆∞·ª£t ph√°t hi·ªán": "ch·ª£t ph√°t hi·ªán",
    "d·ª±c li·ªáu": "d∆∞·ª£c li·ªáu",
    "ch√¢u m·∫©y": "chau m√†y",
    "m·ª•y": "mu·ªôi",
    "m·ªôt tr√∫t": "m·ªôt ch√∫t",
    "tr√∫ t√¢m": "ch√∫ t√¢m",
    "m√†n sang": "m√†n s√°ng",
    "tr·ªü ƒë√£": "ch·ªù ƒë√£",
    "nh√°nh d·ªÖ": "nh√°nh r·ªÖ",
    "luy·ªán dan": "luy·ªán ƒëan",
    "dan kinh": "ƒëan kinh",
    "ng∆∞ng √°c": "ng∆° ng√°c",
    "linh can": "linh cƒÉn",
    "xu·∫•t hi·∫øu": "xu·∫•t khi·∫øu",
    "nh·∫•t dai": "nh·∫•t giai",
    "ph√¢n b·ªãa": "ph√¢n bi·ªát",
    "d∆∞·ªõi ch∆∞·ªõng": "d∆∞·ªõi tr∆∞·ªõng",
    "ph·∫£n v·ªá": "ph·∫£n ph·ªá",
    "ƒë·∫£o b·ªõi": "ƒë√†o b·ªõi",
    "ch·∫•n ph√°i": "tr·∫•n ph√°i",
    "ƒë·ªìng quy v∆∞u t·∫≠n": "ƒë·ªìng quy vu t·∫≠n",
    "nh·∫•t nh·ªù": "nh·∫Øc nh·ªü",
    "ƒë·∫•t x√©t": "ƒë·∫•t s√©t",
    "r·ª±c s∆°n": "d∆∞·ª£c s∆°n",
    "ti√™n r·ª±c": "ti√™n d∆∞·ª£c",
    "quy gi√°": "qu√Ω gi√°",
    "h√¥n m·ªôt ti·∫øng": "h√¥ m·ªôt ti·∫øng",
    "s·∫Øt ƒë∆∞·ª£c": "r·∫•t ƒë∆∞·ª£c",
    "r·ª•c d·ªãch": "r·ª•c r·ªãch",
    "ƒë√£ t·∫°": "ƒëa t·∫°",
    "linh c√¢n": "linh cƒÉn",
    "qu√Ω ti√™n": "quy ti√™n",
    "ƒë√£ th·ªÉ": "ƒë√£ th·ªÅ",
    "tr·ªùi ch√∫": "tr·ªùi tru",
    "ch·∫øt ƒë·ªÉ": "tri·ªát ƒë·ªÉ",
    "ph·∫©m dai": "ph·∫©m giai",
    "thanh h√®n": "thai ngh√©n",
    "m·∫ª ch√°n": "m·∫ª tr√°n",
    "tr√°ch ti·ªát": "ch·∫øt ti·ªát",
    "h√°c k·ª≥": "h·∫Øc k·ª≥",
    "s∆∞ m≈©i": "s∆∞ mu·ªôi",
    "t∆∞∆°ng kh√°c": "t∆∞∆°ng kh·∫Øc",
    "h·∫øt vƒÉng": "h·∫•t vƒÉng",
    "v·∫´n x·ª©c": "v·∫≠n s·ª©c",
    "l√™n l·ª±c": "linh l·ª±c",
    "nh·∫ßm v√†o": "nh·∫±m v√†o",
    "matu": "ma tu",
    "chung ky": "trung k·ª≥",
    "kim dan": "kim ƒëan",
    "bi·∫øt danh": "bi·ªát danh",
    "ƒë·ªçc x√†": "ƒë·ªôc x√†",
    "t√¥ng t√≠ch": "tung t√≠ch",
    "ch√∫t c∆°": "tr√∫c c∆°",
    "huy·∫øt ƒëau": "huy·∫øt ƒëao",
    "t·∫ø ƒëau": "t·∫ø ƒëao",
    "thanh ƒëau": "thanh ƒëao",
    "lai chuy·ªÉn": "lay chuy·ªÉn",
    "n·ªët tr·ª´ng": "nu·ªët ch·ª≠ng",
    "luy·ªán ƒëau": "luy·ªán ƒëao",
    "th·ªß dai": "th√π dai",
    "t√≠nh m·ªôt qu·∫£": "t√≠nh m·ªôt qu·∫ª",
    "th·∫•t x√°t": "th·∫•t s√°t",
    "th·∫•t x√°c": "th·∫•t s√°t",
    "t·ªèa h·ªìn ch·∫≠n": "t·ªèa h·ªìn tr·∫≠n",
    "ch√©p m√≥c": "tr√°ch m√≥c",
    "nh√£i danh": "nh√£i ranh",
    "√°c ch·ªß b√†i": "√°t ch·ªß b√†i",
    "l√£o nh√¢n ra": "l√£o nh√¢n gia",
    "ch·ªâ m·∫Øng": "ch·ª≠i m·∫Øng",
    "t·ª´ng thu·∫≠t": "t∆∞·ªùng thu·∫≠t",
    "h√°c th·ªßy": "h·∫Øc th·ªßy",
    "g·∫•p r·ªông": "g·∫•p gi·ªçng",
    "v·∫´n linh l·ª±c": "v·∫≠n linh l·ª±c",
    "cƒÉn ƒë·∫£m": "can ƒë·∫£m",
    "kh√≥c th·∫øt": "kh√≥c th√©t",
    "ph√°t b·∫£o": "ph√°p b·∫£o",
    "s√¥ng m√π": "s∆∞∆°ng m√π",
    "nh·∫Øc m√©p": "nh·∫øch m√©p",
    "nh·ªçc cung": "nh·ªçc c√¥ng",
    "hung gi·ªØ": "hung d·ªØ",
    "c√°t h√πng": "c√°t hung",
    "sai tho·∫°i": "giai tho·∫°i",
    "ngo·∫°n n√∫i": "ng·ªçn n√∫i",
    "tr√¥n th√¢y": "ch√¥n th√¢y",
    "r·ªìi giao": "d·ªìi d√†o",
    "th√¢m th·ªß": "th√¢m th√π",
    "nguy·ªán kh√≠": "nhu·ªá kh√≠",
    "t√≠ v·∫øt": "t√¨ v·∫øt",
    "ch√¢n qu√Ω": "tr√¢n qu√Ω",
    "ch·ªãu ho√°n": "tri·ªáu ho√°n",
    "ti√™u huy·∫øt": "tia huy·∫øt",
    "l√†m can": "l√†m c√†n",
    "t·ª´ng ƒë·∫£o": "t·ª´ng ƒë·∫°o",
    "s·ªØa ng∆∞·ªùi": "s·ªØng ng∆∞·ªùi",
    "h√≤a ai": "h√≤a √°i",
    "l·ªçt tay": "l·ªçt tai",
    "song v√†o": "x√¥ng v√†o",
    "quy l·ª±c": "uy l·ª±c",
    "b·ªè l√™n": "b√≤ l√™n",
    "h·ªët ho√†ng": "h·ªët ho·∫£ng",
    "ngay ng√≥c": "ng√¢y ng·ªëc",
    "ha h·ªëc": "h√° h·ªëc",
    "∆∞ng b∆∞·ªõng": "∆∞∆°ng b∆∞·ªõng",
    "ch·∫•p tr∆∞·ªüng": "ch·∫•p ch∆∞·ªüng",
    "r·ª´ng r·ª´ng": "d·ª´ng d·ª´ng",
    "ngu·ªìn ng·ª•t": "ng√πn ng·ª•t",
    "ƒëong ƒë√†m": "long ƒë√†m",
    "s·∫Øc ta": "x√°c ta",
    "c∆∞·ªùi khƒÉn": "c∆∞·ªùi khan",
    "vang d·ªÅn": "vang r·ªÅn",
    "n√≥i s·∫µng": "n√≥i x·∫±ng",
    "si sao": "x√¨ x√†o",
    "ƒëo√†n m·ªánh": "ƒëo·∫£n m·ªánh",
    "trung t√¨nh": "chung t√¨nh",
    "l√∫c ch·ª©c": "l√∫c tr∆∞·ªõc",
    "thi·∫øu ch·∫øt": "thi√™u ch·∫øt",
    "c√∫ng c√πng": "cu·ªëng cu·ªìng",
    "kh√°i h·ª´": "kh·∫Ω h·ª´",
    "truy·ªÅn t√≠nh": "truy·ªÅn tin",
    "ƒë·ªï xong ƒë·ªï b·ªÉ": "ƒë·ªï s√¥ng ƒë·ªï b·ªÉ",
    "t√°ch tr·∫£": "t√°ch tr√†",
    "h√°c ƒë·ªông": "h·∫Øc ƒë·ªông",
    "qu·ª≥ h·ªìn": "quy h·ªìn",
    "c∆∞·ªùng d·∫°": "c∆∞·ªùng gi·∫£",
    "ƒë√°m l√¢u l√†": "ƒë√°m l√¢u la",
    "c√° che": "c√° tr√™",
    "huy·∫øt t·ªõi": "huy·∫øt t·∫ø",
    "d·∫´u c√° ch√™": "r√¢u c√° tr√™",
    "d√¢u c√° ch√™": "r√¢u c√° tr√™",
    "s·ª©c hi·∫øu": "xu·∫•t khi·∫øu",
    "c·ªßng phong": "cu·ªìng phong",
    "tre ng·ª±c": "che ng·ª±c",
    "bi thu·∫≠t": "b√≠ thu·∫≠t",
    "v·ªët s√¢u": "vu·ªët r√¢u",
    "do x√©t": "d√≤ x√©t",
    "c√°i tr·ª£": "c√°i ch·ª£",
    "ng·∫°i l√†m": "ng·∫°i l·∫Øm",
    "c·∫•t s·ªØ": "c·∫•t gi·ªØ",
    "l∆∞·ªõn ti·∫øc": "luy·∫øn ti·∫øc",
    "ch√πm bao": "tr√πm bao",
    "t√≠n g·∫≠t": "t√≠n v·∫≠t",
    "tr·∫Øn ƒë∆∞·ª£c": "ch·∫Øn ƒë∆∞·ª£c",
    "ƒëi·ªÉm g·ª°": "ƒëi·ªÅm g·ª°",
    "gi·∫•u h·ªèi": "d·∫•u h·ªèi",
    "ch√¢u gi√†": "tr√¢u gi√†",
    "tr·ª´ng m·ª±c": "ch·ª´ng m·ª±c",
    "xu√¥n sao": "x√¥n sao",
    "luy·ªán kh√≠ k·ª∑": "luy·ªán kh√≠ k·ª≥",
    "song gi√≥": "s√≥ng gi√≥",
    "b√¥ng kh·ªèi": "bom kh√≥i",
    "ti·ªÉu qu·ª≥": "ti·ªÉu qu·ª∑",
    "h·ªìn √°o": "h·ªì n√°o",
    "ki·∫øm y": "ki·∫øm √Ω",
    "ch·∫≠t m·ªü": "ch·ª£t m·ªü",
    "m·ª´ng gi·ªØa": "m·ª´ng r·ª°",
    "h√¥ ly": "h·ªì ly",
    "th·ªù d√†i": "th·ªü d√†i",
    "g·ªì s·ª≠a": "g·ªçt r·ª≠a",
    "t·ªãch nhu·ªá": "tinh nhu·ªá",
    "v·ªÅ sao": "v·ªÅ sau",
    "c·ª±ng √©p": "c∆∞·ª°ng √©p",
    "b√°c t·ª±": "b√°t t·ª±",
    "th·∫°o m·ªánh": "th·ªç m·ªánh",
    "lao m·ªì h√¥i": "lau m·ªì h√¥i",
    "x√° tr·∫≠n": "s√°t tr·∫≠n",
    "kh√≥ ngay": "kh√≥ nghe",
    "s∆∞·ªõng s·ªù": "s·ªØng s·ªù",
    "th∆∞·ªüng ph·∫©m": "th∆∞·ª£ng ph·∫©m",
    "t√π luy·ªán": "tu luy·ªán",
    "to√†n b·ªï": "to√†n b·ªô",
    "ƒë√°nh ng·ªô": "ƒë√£i ng·ªô",
    "l∆∞·ª£t l·ªü": "l∆∞·ª£n l·ªù",
    "s√†n sinh": "s·∫£n sinh",
    "ƒëi·ªÉm hung": "ƒëi·ªÅm hung",
    "t·ªâ thi": "t·ªâ th√≠",
    "xuy√™n n·ªØa": "su√Ωt n·ªØa",
    "v·ª©t tay": "ph·∫•t tay",
    "t·ªânh b·ªù": "t·ªânh b∆°",
    "l√∫ng tung": "l√∫ng t√∫ng",
    "h·∫£i t·ª≠": "h√†i t·ª≠",
    "ch·∫£m y√™u": "tr·∫£m y√™u",
    "s∆° ƒëao": "gi∆° ƒëao",
    "h√¥ r·ª´ng": "h√¥ d·ª´ng",
    " ƒëo·∫° ": " ƒë·ªça ",
    "thao g·ª°": "th√°o g·ª°",
    "h√°c h√°c": "h·∫Øc h·∫Øc",
    "huynh ƒë·ªÉ": "huynh ƒë·ªá",
    "tr∆∞·ªüng nghƒ©a": "tr∆∞·ª£ng nghƒ©a",
    "huong chi": "hu·ªëng chi",
    "r√†nh r·ªói": "r√£nh r·ªói",
    "r·ªói d√†nh": "d·ªó d√†nh",
    "tho·∫£i m√£i": "tho·∫£i m√°i",
    "c·∫°n b√£": "c·∫∑n b√£",
    "c·ªßa ng√¥n": "cu·ªìng ng√¥n",
    "m·ªôt tr·ªçi m·ªôt": "m·ªôt ch·ªçi m·ªôt",
    "gi·ªët c·ª•c": "r·ªët c·ª•c",
    "m·∫•t t√¢m": "m·∫•t tƒÉm",
    "√¥n ng∆∞·ª£c": "√¥m ng·ª±c",
    "ho√†ng h·ªët": "ho·∫£ng h·ªët",
    "·∫•u ch·ªâ": "·∫•u trƒ©",
    "m≈©i ·∫•y": "mu·ªôi ·∫•y",
    " ng∆∞i ": " ng∆∞∆°i ",
    "ru d·∫©y": "run r·∫©y",
    "ch∆°n chu": "tr∆°n tru",
    "nguy·ªán r·ªßa": "nguy·ªÅn r·ªßa",
    "nh·ª° lo·∫°n": "nhi·ªÖu lo·∫°n",
    "t√¥ ch·∫•t": "t·ªë ch·∫•t",
    "ma gi√≥": "ma gi√°o",
    "nhi t·ª´": "nhi t·ª≠",
    "ƒë√°ng g·ªìm": "ƒë√°ng g·ªùm",
    "tr√™nh l·ªách": "ch√™nh l·ªách",
    "gi·∫£ ho·∫°t": "gi·∫£o ho·∫°t",
    "ch√©m c·ªôt": "ch√©m c·ª•t",
    "ca ch·∫øt l∆∞·ªõi": "c√° ch·∫øt l∆∞·ªõi",
    "tr·ªìng c·ª±": "ch·ªëng c·ª±",
    "khu√¥n ki·∫øp": "kh·ªën ki·∫øp",
    "ti·∫øc vi·ªán": "ti·∫øp vi·ªán",
    "b√°o v≈©": "b√°o th√π",
    "boss": "b√≥t",
    "ƒë·∫ßu ƒë·ªá": "ƒë·ªì ƒë·ªá",
    "ƒëi·ªÅu tr√πng": "ƒëi√™u tr√πng",
    "quanh qu·∫ßn": "quanh qu·∫©n",
    "b·∫•t ch·ªù": "b·∫•t ch·ª£t",
    "ƒë·ªãch nhƒÉn": "ƒë·ªãch nh√¢n",
    "ngo·∫° ngu·ªìn": "ng·ªçn ngu·ªìn",
    " ho√† ": " h√≤a ",
    " t·ª´c ": " t·ª©c ",
    " tu·ª≥ ": " t√πy ",
    "s·∫Øp qu·ª∑": "s·∫Øp qu·ª≥",
    "g·∫° g·∫•m": "g·∫° g·∫´m",
    "ti·ªÅn ƒë·∫ßu": "ti·ªÅn ƒë·ªì",
    "ra gi·∫•u": "ra d·∫•u",
    "nhai rƒÉng": "nhe rƒÉng",
    "t·∫ßn ph√°": "t√†n ph√°",
    "b√≥p d√π": "b√≥p d√∫",
    "c·∫°n b√°": "c·∫∑n b√£",
    "xa ƒëo·∫°n": "xa ƒë·ªça",
    "r·∫Øc d∆∞·ªõi": "r√°c r∆∞·ªüi",
    "trung quy": "chung quy",
    "m·ª•c gi·ªØa": "m·ª•c r·ªØa",
    "nh·ªëm": "nhu·ªëm",
    "nh√≠u m·∫£nh": "nh√≠u m√†y",
    "ƒë·ªè ·ª©ng": "ƒë·ªè ·ª≠ng",
    "l·∫•y ƒë·∫£": "l·∫•y ƒë√†",
    "·ªß·ªânh": "u·ª≥nh",
    "h·ªèng s√∫ng": "h·ªçng s√∫ng",
    "viper": "v√≠p p∆°",
    "l·ªùi bi·∫øng": "l∆∞·ªùi bi·∫øng",
    "ph·ª©c tay": "ph·∫•t tay",
    "lau v·ª•t": "lao v·ª•t",
    "h·∫øt to": "h√©t to",
    "tuy·∫øc r·∫±ng": "ti·∫øc r·∫±ng",
    "gi·ªØ ƒëi·ªÉm": "d·ª©t ƒëi·ªÉm",
    "xu·∫•t th·∫≥ng": "s√∫t th·∫≥ng",
    "√¥m ch√°n": "√¥m tr√°n",
    "d√†i ph·∫´u": "gi·∫£i ph·∫´u",
    "vector": "v√©t t∆°",
    "ƒë√®o n√≥i": "ƒë√©o n√≥i",
    "loi tr√¥i": "loi choi",
    "b·ªìng b·ªëp": "b√¥m b·ªëp",
    "ch·∫£n ra": "tr√†n ra",
    " hero ": " h√™ r√¥ ",
    " killer ": " kiu l∆° ",
    "m·∫£n che": "m√†n che",
    "ch·∫•n n·∫£n": "ch√°n n·∫£n",
    "b·∫≠t s·ª£i": "b·∫≠t d·∫≠y",
    "ti√™n l·ª≠a": "tia l·ª≠a",
    "lau v√∫t": "lao v√∫t",
    " m·∫øp ": " m√©p ",
    "chu·ªôt nh·∫•t": "chu·ªôt nh·∫Øt",
    "c√¢y d√¨u": "c√¢y r√¨u",
    "kh·ªßy·ªÉu": "khu·ª∑u",
    "x·ª©c ƒëi·ªÉm": "d·ª©t ƒëi·ªÉm",
    "tuy luy·ªán": "t√¥i luy·ªán",
    "binh b·ªëc": "binh b·ªëp",
    "l√™n ho√†ng c∆∞·ªõc": "li√™n ho√†ng c∆∞·ªõc",
    "v·∫≠t v√£nh": "v·∫∑t v√£nh",
    "r∆∞·ªõc ƒëi·ªÉm": "d·ª©t ƒëi·ªÉm",
    "th√™ c∆°": "th·∫ø c∆°",
    "gi·ªØ ch·ªØ": "d·ª± tr·ªØ",
    "ƒë·ªï s√°t": "ƒë·ªì s√°t",
    "ƒëeo c√≥": "ƒë√©o c√≥",
    " a4 ": " a b·ªën ",
    " a3 ": " a ba ",
    " a2 ": " a hai ",
    " a1 ": " a m·ªôt ",
    " a0 ": " a kh√¥ng ",
    "uhm": "∆∞·ªùm",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff",
    "ffff": "ffff"
}


def cleaner_text(text, is_loi_chinh_ta=False, language='vi', is_conver_number=True):
    try:
        if not text:
            return None
        if language == 'vi':
            for word, replacement in viet_tat.items():
                text = text.replace(word, replacement)
            text = text.lower()
            for word1, replacement1 in loai_bo_tieng_viet.items():
                word1 = word1.lower()
                text = text.replace(word1, replacement1)
            for word, replacement in special_word.items():
                text = text.replace(word, replacement)
            if is_loi_chinh_ta:
                for wrong, correct in loi_chinh_ta.items():
                    text = re.sub(rf'\b{re.escape(wrong)}(\W?)', rf'{correct}\1', text)
            if is_conver_number:
                text = number_to_vietnamese_with_units(text)
        elif language == 'en':
            text = text.lower()
            for word1, replacement1 in loai_bo_tieng_anh.items():
                word1 = word1.lower()
                text = text.replace(word1, replacement1)
            for word, replacement in special_word.items():
                text = text.replace(word, replacement)
            if is_conver_number:
                text = number_to_english_with_units(text)
        return text.strip()
    except:
        getlog()


# # -------S·ª≠a ch√≠nh t·∫£ trong file txt v√† xu·∫•t ra file txt kh√°c-------
# cnt = 1
# old_txt = "E:\\Python\\developping\\review comic\\test\\extract_audios\\1.txt"
# # old_txt = "E:\\Python\\developping\\review comic\\test\\extract_audios\\1.txt"

# fol = os.path.dirname(old_txt)
# file_name = os.path.basename(old_txt).split('.')[0]
# new_txt = os.path.join(fol, f'{file_name}_1.txt')
# with open(old_txt, 'r', encoding='utf-8') as fff:
#     lines = fff.readlines()
# with open(new_txt, 'w', encoding='utf-8') as ggg:
#     for line in lines:
#         if line and not line.strip().isdigit():
#             line = cleaner_text(line.strip())
#             ggg.write(f'{cnt}\n{line}\n')
#             cnt += 1








#--------------t·ªïng h·ª£p c√°c file sub v√† audio-----------------------------
def get_text_and_audio_in_folder(folder, txt_total='total.txt', audio_total_folder='total'):
    os.makedirs(audio_total_folder, exist_ok=True)
    txt_files = get_file_in_folder_by_type(folder, '.txt')
    unique_lines = set()  # D√πng set ƒë·ªÉ l∆∞u c√°c d√≤ng ƒë√£ ghi (t√¨m ki·∫øm nhanh h∆°n)
    index = 0
    
    try:
        with open(txt_total, mode='w', encoding='utf-8') as total:  # Ghi ƒë√® file t·ªïng
            for txt_f in txt_files:
                txt_path = os.path.join(folder, txt_f)
                file_name = os.path.splitext(txt_f)[0]
                audio_folder = os.path.join(folder, file_name)
                audios = get_file_in_folder_by_type(audio_folder, '.wav')
                try:
                    with open(txt_path, mode='r', encoding='utf-8') as fff:
                        lines = fff.readlines()
                    i_au = 0
                    for line in lines:
                        line_content = line.strip()
                        # Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i s·ªë
                        if not line_content.isdigit():
                            if i_au >= len(audios):  # Ki·ªÉm tra s·ªë l∆∞·ª£ng audio
                                print(f"Warning: Kh√¥ng ƒë·ªß file audio cho file {txt_f}")
                                break
                            
                            if line_content not in unique_lines and len(line_content) < max_lenth_text:
                                index += 1
                                processed_text = cleaner_text(line_content)
                                total.write(f'{index}\n{processed_text}\n')
                                unique_lines.add(line_content)  # Th√™m v√†o set ƒë·ªÉ tr√°nh tr√πng l·∫∑p
                                audio_path = os.path.join(audio_folder, audios[i_au])
                                new_au_path = os.path.join(audio_total_folder, f'{index}.wav')
                                shutil.copy(audio_path, new_au_path)
                            i_au += 1
                except Exception as e:
                    print(f"L·ªói khi x·ª≠ l√Ω file {txt_f}: {e}")
    except Exception as e:
        print(f"L·ªói khi ghi file t·ªïng {txt_total}: {e}")
# folder = "E:\\Python\\developping\\review comic\\test\\extract_audios"
# total_txt = os.path.join(folder, 'total.txt')
# audio_total_folder = os.path.join(folder, 'total_audios')   
# get_text_and_audio_in_folder(folder, total_txt, audio_total_folder)








#---------ki·ªÉm tra v√† x·ª≠ l√Ω file metadata ƒë·ªÉ ƒë√∫ng chu·∫©n training XTTS-v2 ---------------------------
def add_voice_to_csv(input_file, voice_tag="vi_female"):
    cur_dir = os.path.dirname(input_file)
    name = os.path.basename(input_file)
    output_dir = os.path.join(cur_dir, 'output')
    os.makedirs(output_dir, exist_ok=True)
    wavs_dir = os.path.join(output_dir, 'wavs')
    os.makedirs(wavs_dir, exist_ok=True)
    output_file = os.path.join(output_dir, name)
    index = 0
    try:
        # ƒê·ªçc n·ªôi dung file CSV
        with open(input_file, 'r', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile, delimiter='|')
            rows = [row for row in reader]
        
        # Th√™m voice tag v√†o cu·ªëi m·ªói d√≤ng
        updated_rows = []
        for i, row in enumerate(rows):
            if i == 0:  # Header ƒë√£ s·ª≠a ·ªü b∆∞·ªõc tr√™n
                row = ["audio_file", "text", "speaker_name"]
                updated_rows.append(row)
            else:
                text = row[1]
                if len(text) >= max_lenth_text or len(text) < 20:
                    continue
                else:
                    audio_path = os.path.join(cur_dir, row[0])
                    if not os.path.exists(audio_path):
                        continue
                    index += 1
                    new_path = os.path.join(wavs_dir, f'{index}.wav')
                    shutil.copy(audio_path, new_path)
                    row[0] = f'wavs/{index}.wav'
                updated_rows.append([row[0], row[1], voice_tag])
        
        # Ghi n·ªôi dung m·ªõi v√†o file ƒë·∫ßu ra
        with open(output_file, 'w', encoding='utf-8', newline='') as csvfile:
            writer = csv.writer(csvfile, delimiter='|')
            writer.writerows(updated_rows)
    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói: {e}")

# # S·ª≠ d·ª•ng h√†m
# input_csv = "E:\\Python\\developping\\review comic\\dataset\\vietnam\\train.csv"
# add_voice_to_csv(input_csv)












#------------Thay ƒë·ªïi t·ªëc ƒë·ªô audio h√†ng lo·∫°t---------
def adjust_audio_speed(input_folder, output_folder, speed=0.98, volume_factor=1.0):
    try:
        # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(output_folder, exist_ok=True)
        
        # Duy·ªát qua t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
        for file_name in sorted(os.listdir(input_folder)):
            if file_name.endswith(".wav"):
                input_path = os.path.join(input_folder, file_name)
                output_path = os.path.join(output_folder, file_name)
                
                # Command ƒë·ªÉ thay ƒë·ªïi t·ªëc ƒë·ªô v√† tƒÉng √¢m l∆∞·ª£ng
                ffmpeg_command = [
                    'ffmpeg', '-i', input_path,
                    '-filter:a', f"atempo={speed},volume={volume_factor}",
                    '-vn', output_path, '-y', '-loglevel', 'quiet'
                ]
                
                # Th·ª±c thi command
                run_command_ffmpeg(ffmpeg_command)
                print(f"ƒê√£ x·ª≠ l√Ω: {file_name}")
                
    except Exception as e:
        print(f"C√≥ l·ªói x·∫£y ra: {e}")

# input_folder = "E:\\Python\\developping\\review comic\\dataset\\vietnam\\wavs\\New folder_1"
# output_folder = "E:\\Python\\developping\\review comic\\dataset\\vietnam\\wavs\\New folder_2"
# input_folder = "E:\\Python\\developping\\review comic\\test\\extract_audios\\da lam"
# output_folder = "E:\\Python\\developping\\review comic\\test\\extract_audios\\da lam_1"
# os.makedirs(output_folder, exist_ok=True)
# adjust_audio_speed(input_folder, output_folder, speed=0.99, volume_factor=0.8)